
cfi_cmdset_0002.o:     file format elf32-littlearm

Disassembly of section .text:

00000000 <cfi_cmdset_0002>:
       0:	e1a0c00d 	mov	r12, sp
       4:	e92ddff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
}

static void __exit cfi_amdstd_exit(void)
{
	inter_module_unregister(im_name);
       8:	e1a07000 	mov	r7, r0
       c:	e24dd004 	sub	sp, sp, #4	; 0x4
      10:	e5978038 	ldr	r8, [r7, #56]
      14:	e5983008 	ldr	r3, [r8, #8]
      18:	e598200c 	ldr	r2, [r8, #12]
      1c:	e0050392 	mul	r5, r2, r3
      20:	e24cb004 	sub	r11, r12, #4	; 0x4
      24:	e5980010 	ldr	r0, [r8, #16]
      28:	e598203c 	ldr	r2, [r8, #60]
      2c:	e3500001 	cmp	r0, #1	; 0x1
      30:	e50b202c 	str	r2, [r11, -#44]
      34:	1a00024d 	bne	970 <cfi_cmdset_0002+0x970>
      38:	e3510000 	cmp	r1, #0	; 0x0
      3c:	15983024 	ldrne	r3, [r8, #36]
      40:	15d31005 	ldrneb	r1, [r3, #5]
      44:	15d32006 	ldrneb	r2, [r3, #6]
      48:	05983024 	ldreq	r3, [r8, #36]
      4c:	05d31009 	ldreqb	r1, [r3, #9]
      50:	05d3200a 	ldreqb	r2, [r3, #10]
      54:	e1814402 	orr	r4, r1, r2, lsl #8
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
      58:	e598300c 	ldr	r3, [r8, #12]
      5c:	e3a02055 	mov	r2, #85	; 0x55
      60:	e0010293 	mul	r1, r3, r2
      64:	e3a0c000 	mov	r12, #0	; 0x0
      68:	e5980008 	ldr	r0, [r8, #8]
      6c:	e5973008 	ldr	r3, [r7, #8]
	__u32 val;
	__u32 addr = base + cfi_build_cmd_addr(cmd_addr, CFIDEV_INTERLEAVE, type);
      70:	e51b202c 	ldr	r2, [r11, -#44]
      74:	e3530001 	cmp	r3, #1	; 0x1
      78:	e0222190 	mla	r2, r0, r1, r2
      7c:	0a000029 	beq	128 <cfi_cmdset_0002+0x128>
      80:	e3530002 	cmp	r3, #2	; 0x2
      84:	1a000025 	bne	120 <cfi_cmdset_0002+0x120>
      88:	e3500001 	cmp	r0, #1	; 0x1
      8c:	0a000029 	beq	138 <cfi_cmdset_0002+0x138>
      90:	e59f3370 	ldr	r3, [pc, #370]	; 408 <cfi_cmdset_0002+0x408>
      94:	e3500002 	cmp	r0, #2	; 0x2
      98:	ea000030 	b	160 <cfi_cmdset_0002+0x160>
      9c:	e3530004 	cmp	r3, #4	; 0x4
      a0:	1a000032 	bne	170 <cfi_cmdset_0002+0x170>
      a4:	e3500001 	cmp	r0, #1	; 0x1
      a8:	1a00002b 	bne	15c <cfi_cmdset_0002+0x15c>
      ac:	e3a0c098 	mov	r12, #152	; 0x98
      b0:	ea000032 	b	180 <cfi_cmdset_0002+0x180>
      b4:	e3500002 	cmp	r0, #2	; 0x2
      b8:	059fc34c 	ldreq	r12, [pc, #34c]	; 40c <cfi_cmdset_0002+0x40c>
      bc:	0a000032 	beq	18c <cfi_cmdset_0002+0x18c>
      c0:	e59f3348 	ldr	r3, [pc, #348]	; 410 <cfi_cmdset_0002+0x410>
      c4:	e3500004 	cmp	r0, #4	; 0x4
      c8:	01a0c003 	moveq	r12, r3
      cc:	13a0c000 	movne	r12, #0	; 0x0
      d0:	e5973008 	ldr	r3, [r7, #8]
      d4:	e3530001 	cmp	r3, #1	; 0x1
      d8:	1a00003a 	bne	1c8 <cfi_cmdset_0002+0x1c8>
      dc:	e1a00007 	mov	r0, r7
      e0:	e20c1098 	and	r1, r12, #152	; 0x98
      e4:	e1a0e00f 	mov	lr, pc
      e8:	e597f01c 	ldr	pc, [r7, #28]
      ec:	ea000048 	b	214 <cfi_cmdset_0002+0x214>
      f0:	e3530002 	cmp	r3, #2	; 0x2
      f4:	1a000042 	bne	204 <cfi_cmdset_0002+0x204>
      f8:	e59f1308 	ldr	r1, [pc, #308]	; 408 <cfi_cmdset_0002+0x408>
      fc:	e1a00007 	mov	r0, r7
     100:	e00c1001 	and	r1, r12, r1
     104:	e1a0e00f 	mov	lr, pc
     108:	e597f020 	ldr	pc, [r7, #32]
     10c:	ea000048 	b	234 <cfi_cmdset_0002+0x234>
     110:	e3530004 	cmp	r3, #4	; 0x4
     114:	1a000048 	bne	23c <cfi_cmdset_0002+0x23c>
     118:	e1a00007 	mov	r0, r7
     11c:	e1a0100c 	mov	r1, r12
     120:	e1a0e00f 	mov	lr, pc
     124:	e597f024 	ldr	pc, [r7, #36]
     128:	e2843003 	add	r3, r4, #3	; 0x3
}

static inline __u8 cfi_read_query(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
     12c:	e5972008 	ldr	r2, [r7, #8]
     130:	e51b102c 	ldr	r1, [r11, -#44]
     134:	e3520001 	cmp	r2, #1	; 0x1
     138:	e0211395 	mla	r1, r5, r3, r1
     13c:	1a000052 	bne	28c <cfi_cmdset_0002+0x28c>
		return map->read8(map, addr);
     140:	e1a00007 	mov	r0, r7
     144:	e1a0e00f 	mov	lr, pc
     148:	e597f00c 	ldr	pc, [r7, #12]
     14c:	ea00005f 	b	2d0 <cfi_cmdset_0002+0x2d0>
	} else if (cfi_buswidth_is_2()) {
     150:	e3520002 	cmp	r2, #2	; 0x2
     154:	1a000058 	bne	2bc <cfi_cmdset_0002+0x2bc>
		return cfi16_to_cpu(map->read16(map, addr));
     158:	e1a00007 	mov	r0, r7
     15c:	e1a0e00f 	mov	lr, pc
     160:	e597f010 	ldr	pc, [r7, #16]
     164:	ea00005f 	b	2e8 <cfi_cmdset_0002+0x2e8>
	} else if (cfi_buswidth_is_4()) {
     168:	e3520004 	cmp	r2, #4	; 0x4
     16c:	1a00005e 	bne	2ec <cfi_cmdset_0002+0x2ec>
		return cfi32_to_cpu(map->read32(map, addr));
     170:	e1a00007 	mov	r0, r7
     174:	e1a0e00f 	mov	lr, pc
     178:	e597f014 	ldr	pc, [r7, #20]
     17c:	ea00005f 	b	300 <cfi_cmdset_0002+0x300>
	} else {
		return 0;
     180:	e3a00000 	mov	r0, #0	; 0x0
     184:	e200a0ff 	and	r10, r0, #255	; 0xff
     188:	e2843004 	add	r3, r4, #4	; 0x4
}

static inline __u8 cfi_read_query(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
     18c:	e5972008 	ldr	r2, [r7, #8]
     190:	e51b102c 	ldr	r1, [r11, -#44]
     194:	e3520001 	cmp	r2, #1	; 0x1
     198:	e0211395 	mla	r1, r5, r3, r1
     19c:	1a00006a 	bne	34c <cfi_cmdset_0002+0x34c>
		return map->read8(map, addr);
     1a0:	e1a00007 	mov	r0, r7
     1a4:	e1a0e00f 	mov	lr, pc
     1a8:	e597f00c 	ldr	pc, [r7, #12]
     1ac:	ea000077 	b	390 <cfi_cmdset_0002+0x390>
	} else if (cfi_buswidth_is_2()) {
     1b0:	e3520002 	cmp	r2, #2	; 0x2
     1b4:	1a000070 	bne	37c <cfi_cmdset_0002+0x37c>
		return cfi16_to_cpu(map->read16(map, addr));
     1b8:	e1a00007 	mov	r0, r7
     1bc:	e1a0e00f 	mov	lr, pc
     1c0:	e597f010 	ldr	pc, [r7, #16]
     1c4:	ea000077 	b	3a8 <cfi_cmdset_0002+0x3a8>
	} else if (cfi_buswidth_is_4()) {
     1c8:	e3520004 	cmp	r2, #4	; 0x4
     1cc:	1a000076 	bne	3ac <cfi_cmdset_0002+0x3ac>
		return cfi32_to_cpu(map->read32(map, addr));
     1d0:	e1a00007 	mov	r0, r7
     1d4:	e1a0e00f 	mov	lr, pc
     1d8:	e597f014 	ldr	pc, [r7, #20]
     1dc:	ea000077 	b	3c0 <cfi_cmdset_0002+0x3c0>
	} else {
		return 0;
     1e0:	e3a00000 	mov	r0, #0	; 0x0
     1e4:	e1a0100a 	mov	r1, r10
     1e8:	e20060ff 	and	r6, r0, #255	; 0xff
     1ec:	e1a02006 	mov	r2, r6
     1f0:	e59f021c 	ldr	r0, [pc, #21c]	; 414 <cfi_cmdset_0002+0x414>
     1f4:	e1a03004 	mov	r3, r4
     1f8:	ebfffffe 	bl	1f8 <cfi_cmdset_0002+0x1f8>
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
     1fc:	e598300c 	ldr	r3, [r8, #12]
     200:	e3a02055 	mov	r2, #85	; 0x55
     204:	e0010293 	mul	r1, r3, r2
     208:	e3a0c000 	mov	r12, #0	; 0x0
     20c:	e5980008 	ldr	r0, [r8, #8]
     210:	e5973008 	ldr	r3, [r7, #8]
	__u32 val;
	__u32 addr = base + cfi_build_cmd_addr(cmd_addr, CFIDEV_INTERLEAVE, type);
     214:	e51b202c 	ldr	r2, [r11, -#44]
     218:	e3530001 	cmp	r3, #1	; 0x1
     21c:	e0222190 	mla	r2, r0, r1, r2
     220:	0a000092 	beq	470 <cfi_cmdset_0002+0x470>
     224:	e3530002 	cmp	r3, #2	; 0x2
     228:	1a00008e 	bne	468 <cfi_cmdset_0002+0x468>
     22c:	e3500001 	cmp	r0, #1	; 0x1
     230:	0a000092 	beq	480 <cfi_cmdset_0002+0x480>
     234:	e59f31dc 	ldr	r3, [pc, #1dc]	; 418 <cfi_cmdset_0002+0x418>
     238:	e3500002 	cmp	r0, #2	; 0x2
     23c:	ea000099 	b	4a8 <cfi_cmdset_0002+0x4a8>
     240:	e3530004 	cmp	r3, #4	; 0x4
     244:	1a00009b 	bne	4b8 <cfi_cmdset_0002+0x4b8>
     248:	e3500001 	cmp	r0, #1	; 0x1
     24c:	1a000094 	bne	4a4 <cfi_cmdset_0002+0x4a4>
     250:	e3a0c0f0 	mov	r12, #240	; 0xf0
     254:	ea00009b 	b	4c8 <cfi_cmdset_0002+0x4c8>
     258:	e3500002 	cmp	r0, #2	; 0x2
     25c:	059fc1b8 	ldreq	r12, [pc, #1b8]	; 41c <cfi_cmdset_0002+0x41c>
     260:	0a00009b 	beq	4d4 <cfi_cmdset_0002+0x4d4>
     264:	e59f31b4 	ldr	r3, [pc, #1b4]	; 420 <cfi_cmdset_0002+0x420>
     268:	e3500004 	cmp	r0, #4	; 0x4
     26c:	01a0c003 	moveq	r12, r3
     270:	13a0c000 	movne	r12, #0	; 0x0
     274:	e5973008 	ldr	r3, [r7, #8]
     278:	e3530001 	cmp	r3, #1	; 0x1
     27c:	1a0000a3 	bne	510 <cfi_cmdset_0002+0x510>
     280:	e1a00007 	mov	r0, r7
     284:	e20c10f0 	and	r1, r12, #240	; 0xf0
     288:	e1a0e00f 	mov	lr, pc
     28c:	e597f01c 	ldr	pc, [r7, #28]
     290:	ea0000b1 	b	55c <cfi_cmdset_0002+0x55c>
     294:	e3530002 	cmp	r3, #2	; 0x2
     298:	1a0000ab 	bne	54c <cfi_cmdset_0002+0x54c>
     29c:	e59f1174 	ldr	r1, [pc, #174]	; 418 <cfi_cmdset_0002+0x418>
     2a0:	e1a00007 	mov	r0, r7
     2a4:	e00c1001 	and	r1, r12, r1
     2a8:	e1a0e00f 	mov	lr, pc
     2ac:	e597f020 	ldr	pc, [r7, #32]
     2b0:	ea0000b1 	b	57c <cfi_cmdset_0002+0x57c>
     2b4:	e3530004 	cmp	r3, #4	; 0x4
     2b8:	1a0000b1 	bne	584 <cfi_cmdset_0002+0x584>
     2bc:	e1a00007 	mov	r0, r7
     2c0:	e1a0100c 	mov	r1, r12
     2c4:	e1a0e00f 	mov	lr, pc
     2c8:	e597f024 	ldr	pc, [r7, #36]
     2cc:	e59f3150 	ldr	r3, [pc, #150]	; 424 <cfi_cmdset_0002+0x424>
     2d0:	e598200c 	ldr	r2, [r8, #12]
     2d4:	e0010392 	mul	r1, r2, r3
     2d8:	e3a0c000 	mov	r12, #0	; 0x0
     2dc:	e5980008 	ldr	r0, [r8, #8]
     2e0:	e5973008 	ldr	r3, [r7, #8]
     2e4:	e51b202c 	ldr	r2, [r11, -#44]
     2e8:	e3530001 	cmp	r3, #1	; 0x1
     2ec:	e0222190 	mla	r2, r0, r1, r2
     2f0:	0a0000c6 	beq	610 <cfi_cmdset_0002+0x610>
     2f4:	e3530002 	cmp	r3, #2	; 0x2
     2f8:	1a0000c2 	bne	608 <cfi_cmdset_0002+0x608>
     2fc:	e3500001 	cmp	r0, #1	; 0x1
     300:	0a0000c6 	beq	620 <cfi_cmdset_0002+0x620>
     304:	e59f311c 	ldr	r3, [pc, #11c]	; 428 <cfi_cmdset_0002+0x428>
     308:	e3500002 	cmp	r0, #2	; 0x2
     30c:	ea0000cd 	b	648 <cfi_cmdset_0002+0x648>
     310:	e3530004 	cmp	r3, #4	; 0x4
     314:	1a0000cf 	bne	658 <cfi_cmdset_0002+0x658>
     318:	e3500001 	cmp	r0, #1	; 0x1
     31c:	1a0000c8 	bne	644 <cfi_cmdset_0002+0x644>
     320:	e3a0c0aa 	mov	r12, #170	; 0xaa
     324:	ea0000cf 	b	668 <cfi_cmdset_0002+0x668>
     328:	e3500002 	cmp	r0, #2	; 0x2
     32c:	059fc0f8 	ldreq	r12, [pc, #f8]	; 42c <cfi_cmdset_0002+0x42c>
     330:	0a0000cf 	beq	674 <cfi_cmdset_0002+0x674>
     334:	e59f30f4 	ldr	r3, [pc, #f4]	; 430 <cfi_cmdset_0002+0x430>
     338:	e3500004 	cmp	r0, #4	; 0x4
     33c:	01a0c003 	moveq	r12, r3
     340:	13a0c000 	movne	r12, #0	; 0x0
     344:	e5973008 	ldr	r3, [r7, #8]
     348:	e3530001 	cmp	r3, #1	; 0x1
     34c:	1a0000d7 	bne	6b0 <cfi_cmdset_0002+0x6b0>
     350:	e1a00007 	mov	r0, r7
     354:	e20c10aa 	and	r1, r12, #170	; 0xaa
     358:	e1a0e00f 	mov	lr, pc
     35c:	e597f01c 	ldr	pc, [r7, #28]
     360:	ea0000e5 	b	6fc <cfi_cmdset_0002+0x6fc>
     364:	e3530002 	cmp	r3, #2	; 0x2
     368:	1a0000df 	bne	6ec <cfi_cmdset_0002+0x6ec>
     36c:	e59f10b4 	ldr	r1, [pc, #b4]	; 428 <cfi_cmdset_0002+0x428>
     370:	e1a00007 	mov	r0, r7
     374:	e00c1001 	and	r1, r12, r1
     378:	e1a0e00f 	mov	lr, pc
     37c:	e597f020 	ldr	pc, [r7, #32]
     380:	ea0000e5 	b	71c <cfi_cmdset_0002+0x71c>
     384:	e3530004 	cmp	r3, #4	; 0x4
     388:	1a0000e5 	bne	724 <cfi_cmdset_0002+0x724>
     38c:	e1a00007 	mov	r0, r7
     390:	e1a0100c 	mov	r1, r12
     394:	e1a0e00f 	mov	lr, pc
     398:	e597f024 	ldr	pc, [r7, #36]
     39c:	e59f3090 	ldr	r3, [pc, #90]	; 434 <cfi_cmdset_0002+0x434>
     3a0:	e598200c 	ldr	r2, [r8, #12]
     3a4:	e0010392 	mul	r1, r2, r3
     3a8:	e3a0c000 	mov	r12, #0	; 0x0
     3ac:	e5980008 	ldr	r0, [r8, #8]
     3b0:	e5973008 	ldr	r3, [r7, #8]
     3b4:	e51b202c 	ldr	r2, [r11, -#44]
     3b8:	e3530001 	cmp	r3, #1	; 0x1
     3bc:	e0222190 	mla	r2, r0, r1, r2
     3c0:	0a0000fa 	beq	7b0 <cfi_cmdset_0002+0x7b0>
     3c4:	e3530002 	cmp	r3, #2	; 0x2
     3c8:	1a0000f6 	bne	7a8 <cfi_cmdset_0002+0x7a8>
     3cc:	e3500001 	cmp	r0, #1	; 0x1
     3d0:	0a0000fa 	beq	7c0 <cfi_cmdset_0002+0x7c0>
     3d4:	e59f305c 	ldr	r3, [pc, #5c]	; 438 <cfi_cmdset_0002+0x438>
     3d8:	e3500002 	cmp	r0, #2	; 0x2
     3dc:	ea000110 	b	824 <cfi_cmdset_0002+0x824>
     3e0:	e3530004 	cmp	r3, #4	; 0x4
     3e4:	1a000112 	bne	834 <cfi_cmdset_0002+0x834>
     3e8:	e3500001 	cmp	r0, #1	; 0x1
     3ec:	1a0000fc 	bne	7e4 <cfi_cmdset_0002+0x7e4>
     3f0:	e3a0c055 	mov	r12, #85	; 0x55
     3f4:	ea000112 	b	844 <cfi_cmdset_0002+0x844>
     3f8:	e3500002 	cmp	r0, #2	; 0x2
     3fc:	1a00010e 	bne	83c <cfi_cmdset_0002+0x83c>
     400:	e59fc034 	ldr	r12, [pc, #34]	; 43c <cfi_cmdset_0002+0x43c>
     404:	ea000112 	b	854 <cfi_cmdset_0002+0x854>
     408:	00009898 	muleq	r0, r8, r8
     40c:	00980098 	umulleqs	r0, r8, r8, r0
     410:	98989898 	ldmlsia	r8, {r3, r4, r7, r11, r12, pc}
     414:	00000010 	andeq	r0, r0, r0, lsl r0
     418:	0000f0f0 	streqsh	pc, [r0], -r0
     41c:	00f000f0 	ldreqsh	r0, [r0]
     420:	f0f0f0f0 	ldrnvsh	pc, [r0]
     424:	00000555 	andeq	r0, r0, r5, asr r5
     428:	0000aaaa 	andeq	r10, r0, r10, lsr #21
     42c:	00aa00aa 	adceq	r0, r10, r10, lsr #1
     430:	aaaaaaaa 	bge	feaaaee0 <cfi_amdstd_destroy+0xfeaa6db0>
     434:	000002aa 	andeq	r0, r0, r10, lsr #5
     438:	00005555 	andeq	r5, r0, r5, asr r5
     43c:	00550055 	subeqs	r0, r5, r5, asr r0
     440:	e59f3354 	ldr	r3, [pc, #354]	; 79c <cfi_cmdset_0002+0x79c>
     444:	e3500004 	cmp	r0, #4	; 0x4
     448:	01a0c003 	moveq	r12, r3
     44c:	13a0c000 	movne	r12, #0	; 0x0
     450:	e5973008 	ldr	r3, [r7, #8]
     454:	e3530001 	cmp	r3, #1	; 0x1
     458:	1a00011a 	bne	8c8 <cfi_cmdset_0002+0x8c8>
     45c:	e1a00007 	mov	r0, r7
     460:	e20c1055 	and	r1, r12, #85	; 0x55
     464:	e1a0e00f 	mov	lr, pc
     468:	e597f01c 	ldr	pc, [r7, #28]
     46c:	ea000128 	b	914 <cfi_cmdset_0002+0x914>
     470:	e3530002 	cmp	r3, #2	; 0x2
     474:	1a000122 	bne	904 <cfi_cmdset_0002+0x904>
     478:	e59f1320 	ldr	r1, [pc, #320]	; 7a0 <cfi_cmdset_0002+0x7a0>
     47c:	e1a00007 	mov	r0, r7
     480:	e00c1001 	and	r1, r12, r1
     484:	e1a0e00f 	mov	lr, pc
     488:	e597f020 	ldr	pc, [r7, #32]
     48c:	ea000128 	b	934 <cfi_cmdset_0002+0x934>
     490:	e3530004 	cmp	r3, #4	; 0x4
     494:	1a000128 	bne	93c <cfi_cmdset_0002+0x93c>
     498:	e1a00007 	mov	r0, r7
     49c:	e1a0100c 	mov	r1, r12
     4a0:	e1a0e00f 	mov	lr, pc
     4a4:	e597f024 	ldr	pc, [r7, #36]
     4a8:	e59f32f4 	ldr	r3, [pc, #2f4]	; 7a4 <cfi_cmdset_0002+0x7a4>
     4ac:	e598200c 	ldr	r2, [r8, #12]
     4b0:	e0010392 	mul	r1, r2, r3
     4b4:	e3a0c000 	mov	r12, #0	; 0x0
     4b8:	e5980008 	ldr	r0, [r8, #8]
     4bc:	e5973008 	ldr	r3, [r7, #8]
     4c0:	e51b202c 	ldr	r2, [r11, -#44]
     4c4:	e3530001 	cmp	r3, #1	; 0x1
     4c8:	e0222190 	mla	r2, r0, r1, r2
     4cc:	0a00013d 	beq	9c8 <cfi_cmdset_0002+0x9c8>
     4d0:	e3530002 	cmp	r3, #2	; 0x2
     4d4:	1a000139 	bne	9c0 <cfi_cmdset_0002+0x9c0>
     4d8:	e3500001 	cmp	r0, #1	; 0x1
     4dc:	0a00013d 	beq	9d8 <cfi_cmdset_0002+0x9d8>
     4e0:	e59f32c0 	ldr	r3, [pc, #2c0]	; 7a8 <cfi_cmdset_0002+0x7a8>
     4e4:	e3500002 	cmp	r0, #2	; 0x2
     4e8:	ea000144 	b	a00 <cfi_cmdset_0002+0xa00>
     4ec:	e3530004 	cmp	r3, #4	; 0x4
     4f0:	1a000146 	bne	a10 <cfi_cmdset_0002+0xa10>
     4f4:	e3500001 	cmp	r0, #1	; 0x1
     4f8:	1a00013f 	bne	9fc <cfi_cmdset_0002+0x9fc>
     4fc:	e3a0c090 	mov	r12, #144	; 0x90
     500:	ea000146 	b	a20 <cfi_cmdset_0002+0xa20>
     504:	e3500002 	cmp	r0, #2	; 0x2
     508:	059fc29c 	ldreq	r12, [pc, #29c]	; 7ac <cfi_cmdset_0002+0x7ac>
     50c:	0a000146 	beq	a2c <cfi_cmdset_0002+0xa2c>
     510:	e59f3298 	ldr	r3, [pc, #298]	; 7b0 <cfi_cmdset_0002+0x7b0>
     514:	e3500004 	cmp	r0, #4	; 0x4
     518:	01a0c003 	moveq	r12, r3
     51c:	13a0c000 	movne	r12, #0	; 0x0
     520:	e5973008 	ldr	r3, [r7, #8]
     524:	e3530001 	cmp	r3, #1	; 0x1
     528:	1a00014e 	bne	a68 <cfi_cmdset_0002+0xa68>
     52c:	e1a00007 	mov	r0, r7
     530:	e20c1090 	and	r1, r12, #144	; 0x90
     534:	e1a0e00f 	mov	lr, pc
     538:	e597f01c 	ldr	pc, [r7, #28]
     53c:	ea00015c 	b	ab4 <cfi_amdstd_setup+0xc>
     540:	e3530002 	cmp	r3, #2	; 0x2
     544:	1a000156 	bne	aa4 <cfi_cmdset_0002+0xaa4>
     548:	e59f1258 	ldr	r1, [pc, #258]	; 7a8 <cfi_cmdset_0002+0x7a8>
     54c:	e1a00007 	mov	r0, r7
     550:	e00c1001 	and	r1, r12, r1
     554:	e1a0e00f 	mov	lr, pc
     558:	e597f020 	ldr	pc, [r7, #32]
     55c:	ea00015c 	b	ad4 <cfi_amdstd_setup+0x2c>
     560:	e3530004 	cmp	r3, #4	; 0x4
     564:	1a00015c 	bne	adc <cfi_amdstd_setup+0x34>
     568:	e1a00007 	mov	r0, r7
     56c:	e1a0100c 	mov	r1, r12
     570:	e1a0e00f 	mov	lr, pc
     574:	e597f024 	ldr	pc, [r7, #36]

	val = cfi_build_cmd(cmd, map, cfi);

	if (prev_val)
		*prev_val = cfi_read(map, addr);

	cfi_write(map, val, addr);

	return addr - base;
}

static inline __u8 cfi_read_query(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
     578:	e5973008 	ldr	r3, [r7, #8]
     57c:	e3530001 	cmp	r3, #1	; 0x1
     580:	1a000164 	bne	b18 <cfi_amdstd_setup+0x70>
		return map->read8(map, addr);
     584:	e51b102c 	ldr	r1, [r11, -#44]
     588:	e1a00007 	mov	r0, r7
     58c:	e1a0e00f 	mov	lr, pc
     590:	e597f00c 	ldr	pc, [r7, #12]
     594:	ea000173 	b	b68 <cfi_amdstd_setup+0xc0>
	} else if (cfi_buswidth_is_2()) {
     598:	e3530002 	cmp	r3, #2	; 0x2
     59c:	1a00016b 	bne	b50 <cfi_amdstd_setup+0xa8>
		return cfi16_to_cpu(map->read16(map, addr));
     5a0:	e51b102c 	ldr	r1, [r11, -#44]
     5a4:	e1a00007 	mov	r0, r7
     5a8:	e1a0e00f 	mov	lr, pc
     5ac:	e597f010 	ldr	pc, [r7, #16]
     5b0:	ea000173 	b	b84 <cfi_amdstd_setup+0xdc>
	} else if (cfi_buswidth_is_4()) {
     5b4:	e3530004 	cmp	r3, #4	; 0x4
     5b8:	1a000172 	bne	b88 <cfi_amdstd_setup+0xe0>
		return cfi32_to_cpu(map->read32(map, addr));
     5bc:	e51b102c 	ldr	r1, [r11, -#44]
     5c0:	e1a00007 	mov	r0, r7
     5c4:	e1a0e00f 	mov	lr, pc
     5c8:	e597f014 	ldr	pc, [r7, #20]
     5cc:	ea000173 	b	ba0 <cfi_amdstd_setup+0xf8>
	} else {
		return 0;
     5d0:	e3a00000 	mov	r0, #0	; 0x0
     5d4:	e20030ff 	and	r3, r0, #255	; 0xff
     5d8:	e5883028 	str	r3, [r8, #40]
}

static inline __u8 cfi_read_query(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
     5dc:	e5973008 	ldr	r3, [r7, #8]
     5e0:	e51b202c 	ldr	r2, [r11, -#44]
     5e4:	e3530001 	cmp	r3, #1	; 0x1
     5e8:	e0821005 	add	r1, r2, r5
     5ec:	1a00017e 	bne	bec <cfi_amdstd_setup+0x144>
		return map->read8(map, addr);
     5f0:	e1a00007 	mov	r0, r7
     5f4:	e1a0e00f 	mov	lr, pc
     5f8:	e597f00c 	ldr	pc, [r7, #12]
     5fc:	ea00018b 	b	c30 <cfi_amdstd_setup+0x188>
	} else if (cfi_buswidth_is_2()) {
     600:	e3530002 	cmp	r3, #2	; 0x2
     604:	1a000184 	bne	c1c <cfi_amdstd_setup+0x174>
		return cfi16_to_cpu(map->read16(map, addr));
     608:	e1a00007 	mov	r0, r7
     60c:	e1a0e00f 	mov	lr, pc
     610:	e597f010 	ldr	pc, [r7, #16]
     614:	ea00018b 	b	c48 <cfi_amdstd_setup+0x1a0>
	} else if (cfi_buswidth_is_4()) {
     618:	e3530004 	cmp	r3, #4	; 0x4
     61c:	1a00018a 	bne	c4c <cfi_amdstd_setup+0x1a4>
		return cfi32_to_cpu(map->read32(map, addr));
     620:	e1a00007 	mov	r0, r7
     624:	e1a0e00f 	mov	lr, pc
     628:	e597f014 	ldr	pc, [r7, #20]
     62c:	ea00018b 	b	c60 <cfi_amdstd_setup+0x1b8>
	} else {
		return 0;
     630:	e3a00000 	mov	r0, #0	; 0x0
     634:	e200c0ff 	and	r12, r0, #255	; 0xff
     638:	e59f2174 	ldr	r2, [pc, #174]	; 7b4 <cfi_cmdset_0002+0x7b4>
     63c:	e186340a 	orr	r3, r6, r10, lsl #8
     640:	e588c02c 	str	r12, [r8, #44]
     644:	e1530002 	cmp	r3, r2
     648:	ca00019b 	bgt	cbc <cfi_amdstd_setup+0x214>
     64c:	e3100080 	tst	r0, #128	; 0x80
     650:	0a000199 	beq	cbc <cfi_amdstd_setup+0x214>
     654:	e59f015c 	ldr	r0, [pc, #15c]	; 7b8 <cfi_cmdset_0002+0x7b8>
     658:	e5971000 	ldr	r1, [r7]
     65c:	e1a0200c 	mov	r2, r12
     660:	ebfffffe 	bl	660 <cfi_cmdset_0002+0x660>
     664:	e3a00003 	mov	r0, #3	; 0x3
     668:	ea0001f2 	b	e38 <cfi_amdstd_read+0x60>
     66c:	e3a00002 	mov	r0, #2	; 0x2
     670:	ea0001f2 	b	e40 <cfi_amdstd_read+0x68>
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
     674:	e598300c 	ldr	r3, [r8, #12]
     678:	e3a02055 	mov	r2, #85	; 0x55
     67c:	e0010293 	mul	r1, r3, r2
     680:	e3a0c000 	mov	r12, #0	; 0x0
     684:	e5980008 	ldr	r0, [r8, #8]
     688:	e5973008 	ldr	r3, [r7, #8]
	__u32 val;
	__u32 addr = base + cfi_build_cmd_addr(cmd_addr, CFIDEV_INTERLEAVE, type);
     68c:	e51b202c 	ldr	r2, [r11, -#44]
     690:	e3530001 	cmp	r3, #1	; 0x1
     694:	e0222190 	mla	r2, r0, r1, r2
     698:	0a0001b0 	beq	d60 <cfi_amdstd_setup+0x2b8>
     69c:	e3530002 	cmp	r3, #2	; 0x2
     6a0:	1a0001ac 	bne	d58 <cfi_amdstd_setup+0x2b0>
     6a4:	e3500001 	cmp	r0, #1	; 0x1
     6a8:	0a0001b0 	beq	d70 <cfi_amdstd_setup+0x2c8>
     6ac:	e59f3108 	ldr	r3, [pc, #108]	; 7bc <cfi_cmdset_0002+0x7bc>
     6b0:	e3500002 	cmp	r0, #2	; 0x2
     6b4:	ea0001b7 	b	d98 <cfi_amdstd_setup+0x2f0>
     6b8:	e3530004 	cmp	r3, #4	; 0x4
     6bc:	1a0001b9 	bne	da8 <cfi_amdstd_setup+0x300>
     6c0:	e3500001 	cmp	r0, #1	; 0x1
     6c4:	1a0001b2 	bne	d94 <cfi_amdstd_setup+0x2ec>
     6c8:	e3a0c098 	mov	r12, #152	; 0x98
     6cc:	ea0001b9 	b	db8 <cfi_amdstd_setup+0x310>
     6d0:	e3500002 	cmp	r0, #2	; 0x2
     6d4:	059fc0e4 	ldreq	r12, [pc, #e4]	; 7c0 <cfi_cmdset_0002+0x7c0>
     6d8:	0a0001b9 	beq	dc4 <cfi_amdstd_setup+0x31c>
     6dc:	e59f30e0 	ldr	r3, [pc, #e0]	; 7c4 <cfi_cmdset_0002+0x7c4>
     6e0:	e3500004 	cmp	r0, #4	; 0x4
     6e4:	01a0c003 	moveq	r12, r3
     6e8:	13a0c000 	movne	r12, #0	; 0x0
     6ec:	e5973008 	ldr	r3, [r7, #8]
     6f0:	e3530001 	cmp	r3, #1	; 0x1
     6f4:	1a0001c1 	bne	e00 <cfi_amdstd_read+0x28>
     6f8:	e1a00007 	mov	r0, r7
     6fc:	e20c1098 	and	r1, r12, #152	; 0x98
     700:	e1a0e00f 	mov	lr, pc
     704:	e597f01c 	ldr	pc, [r7, #28]
     708:	ea0001cf 	b	e4c <cfi_amdstd_read+0x74>
     70c:	e3530002 	cmp	r3, #2	; 0x2
     710:	1a0001c9 	bne	e3c <cfi_amdstd_read+0x64>
     714:	e59f10a0 	ldr	r1, [pc, #a0]	; 7bc <cfi_cmdset_0002+0x7bc>
     718:	e1a00007 	mov	r0, r7
     71c:	e00c1001 	and	r1, r12, r1
     720:	e1a0e00f 	mov	lr, pc
     724:	e597f020 	ldr	pc, [r7, #32]
     728:	ea0001cf 	b	e6c <cfi_amdstd_read+0x94>
     72c:	e3530004 	cmp	r3, #4	; 0x4
     730:	1a0001cf 	bne	e74 <cfi_amdstd_read+0x9c>
     734:	e1a00007 	mov	r0, r7
     738:	e1a0100c 	mov	r1, r12
     73c:	e1a0e00f 	mov	lr, pc
     740:	e597f024 	ldr	pc, [r7, #36]
     744:	e284300f 	add	r3, r4, #15	; 0xf
}

static inline __u8 cfi_read_query(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
     748:	e5970008 	ldr	r0, [r7, #8]
     74c:	e51b102c 	ldr	r1, [r11, -#44]
     750:	e3500001 	cmp	r0, #1	; 0x1
     754:	e0211395 	mla	r1, r5, r3, r1
     758:	1a0001d9 	bne	ec4 <cfi_amdstd_read+0xec>
		return map->read8(map, addr);
     75c:	e1a00007 	mov	r0, r7
     760:	e1a0e00f 	mov	lr, pc
     764:	e597f00c 	ldr	pc, [r7, #12]
     768:	ea0001f1 	b	f34 <cfi_amdstd_read+0x15c>
	} else if (cfi_buswidth_is_2()) {
     76c:	e3500002 	cmp	r0, #2	; 0x2
     770:	1a0001df 	bne	ef4 <cfi_amdstd_read+0x11c>
		return cfi16_to_cpu(map->read16(map, addr));
     774:	e1a00007 	mov	r0, r7
     778:	e1a0e00f 	mov	lr, pc
     77c:	e597f010 	ldr	pc, [r7, #16]
     780:	ea0001f1 	b	f4c <cfi_amdstd_read+0x174>
	} else if (cfi_buswidth_is_4()) {
     784:	e3500004 	cmp	r0, #4	; 0x4
     788:	1a0001f0 	bne	f50 <cfi_amdstd_read+0x178>
		return cfi32_to_cpu(map->read32(map, addr));
     78c:	e1a00007 	mov	r0, r7
     790:	e1a0e00f 	mov	lr, pc
     794:	e597f014 	ldr	pc, [r7, #20]
     798:	ea0001f1 	b	f64 <cfi_amdstd_read+0x18c>
     79c:	55555555 	ldrplb	r5, [r5, -#1365]
     7a0:	00005555 	andeq	r5, r0, r5, asr r5
     7a4:	00000555 	andeq	r0, r0, r5, asr r5
     7a8:	00009090 	muleq	r0, r0, r0
     7ac:	00900090 	umulleqs	r0, r0, r0, r0
     7b0:	90909090 	umulllss	r9, r0, r0, r0
     7b4:	00003130 	andeq	r3, r0, r0, lsr r1
     7b8:	00000048 	andeq	r0, r0, r8, asr #32
     7bc:	00009898 	muleq	r0, r8, r8
     7c0:	00980098 	umulleqs	r0, r8, r8, r0
     7c4:	98989898 	ldmlsia	r8, {r3, r4, r7, r11, r12, pc}
	} else {
		return 0;
     7c8:	e3a00000 	mov	r0, #0	; 0x0
     7cc:	e20000ff 	and	r0, r0, #255	; 0xff
     7d0:	e3500003 	cmp	r0, #3	; 0x3
     7d4:	1a00022b 	bne	1088 <do_write_oneword+0x84>
     7d8:	e5983024 	ldr	r3, [r8, #36]
     7dc:	e5d3201c 	ldrb	r2, [r3, #28]
     7e0:	e3520001 	cmp	r2, #1	; 0x1
     7e4:	9a00022b 	bls	1098 <do_write_oneword+0x94>
     7e8:	e59f0268 	ldr	r0, [pc, #268]	; a58 <cfi_cmdset_0002+0xa58>
     7ec:	e5971000 	ldr	r1, [r7]
     7f0:	ebfffffe 	bl	7f0 <cfi_cmdset_0002+0x7f0>
     7f4:	e5982024 	ldr	r2, [r8, #36]
     7f8:	e5d2301c 	ldrb	r3, [r2, #28]
     7fc:	e3a00000 	mov	r0, #0	; 0x0
     800:	e15000a3 	cmp	r0, r3, lsr #1
     804:	aa00022b 	bge	10b8 <do_write_oneword+0xb4>
     808:	e3a0901f 	mov	r9, #31	; 0x1f
     80c:	e3a0a020 	mov	r10, #32	; 0x20
     810:	e2806001 	add	r6, r0, #1	; 0x1
     814:	e5d2e01c 	ldrb	lr, [r2, #28]
     818:	e082c100 	add	r12, r2, r0, lsl #2
     81c:	e066e00e 	rsb	lr, r6, lr
     820:	e1a0e10e 	mov	lr, lr, lsl #2
     824:	e082300e 	add	r3, r2, lr
     828:	e5d3201d 	ldrb	r2, [r3, #29]
     82c:	e5d3101e 	ldrb	r1, [r3, #30]
     830:	e7d30009 	ldrb	r0, [r3, r9]
     834:	e1822401 	orr	r2, r2, r1, lsl #8
     838:	e1822800 	orr	r2, r2, r0, lsl #16
     83c:	e7d3100a 	ldrb	r1, [r3, r10]
     840:	e5dc001d 	ldrb	r0, [r12, #29]
     844:	e1822c01 	orr	r2, r2, r1, lsl #24
     848:	e5dc101e 	ldrb	r1, [r12, #30]
     84c:	e1a03422 	mov	r3, r2, lsr #8
     850:	e5cc201d 	strb	r2, [r12, #29]
     854:	e5cc301e 	strb	r3, [r12, #30]
     858:	e7dc5009 	ldrb	r5, [r12, r9]
     85c:	e1a03822 	mov	r3, r2, lsr #16
     860:	e7cc3009 	strb	r3, [r12, r9]
     864:	e7dc400a 	ldrb	r4, [r12, r10]
     868:	e1a02c22 	mov	r2, r2, lsr #24
     86c:	e7cc200a 	strb	r2, [r12, r10]
     870:	e1800401 	orr	r0, r0, r1, lsl #8
     874:	e1800805 	orr	r0, r0, r5, lsl #16
     878:	e1800c04 	orr	r0, r0, r4, lsl #24
     87c:	e1a03420 	mov	r3, r0, lsr #8
     880:	e5981024 	ldr	r1, [r8, #36]
     884:	e1a02820 	mov	r2, r0, lsr #16
     888:	e081100e 	add	r1, r1, lr
     88c:	e5c1001d 	strb	r0, [r1, #29]
     890:	e1a00c20 	mov	r0, r0, lsr #24
     894:	e5c1301e 	strb	r3, [r1, #30]
     898:	e7c12009 	strb	r2, [r1, r9]
     89c:	e7c1000a 	strb	r0, [r1, r10]
     8a0:	e5982024 	ldr	r2, [r8, #36]
     8a4:	e5d2301c 	ldrb	r3, [r2, #28]
     8a8:	e1a00006 	mov	r0, r6
     8ac:	e15000a3 	cmp	r0, r3, lsr #1
     8b0:	ba000202 	blt	10c0 <do_write_oneword+0xbc>
     8b4:	e598300c 	ldr	r3, [r8, #12]
     8b8:	e3530002 	cmp	r3, #2	; 0x2
     8bc:	e1a01003 	mov	r1, r3
     8c0:	0a000239 	beq	11ac <do_write_oneword+0x1a8>
     8c4:	ca000233 	bgt	1198 <do_write_oneword+0x194>
     8c8:	e3510001 	cmp	r1, #1	; 0x1
     8cc:	0a000236 	beq	11ac <do_write_oneword+0x1a8>
     8d0:	ea000249 	b	11fc <do_write_oneword+0x1f8>
     8d4:	e3510004 	cmp	r1, #4	; 0x4
     8d8:	0a000244 	beq	11f0 <do_write_oneword+0x1ec>
     8dc:	ea000249 	b	1208 <do_write_oneword+0x204>
     8e0:	e59f3174 	ldr	r3, [pc, #174]	; a5c <cfi_cmdset_0002+0xa5c>
     8e4:	e59f2174 	ldr	r2, [pc, #174]	; a60 <cfi_cmdset_0002+0xa60>
     8e8:	ea000246 	b	1208 <do_write_oneword+0x204>
     8ec:	e59f3170 	ldr	r3, [pc, #170]	; a64 <cfi_cmdset_0002+0xa64>
     8f0:	e5883014 	str	r3, [r8, #20]
     8f4:	e5972008 	ldr	r2, [r7, #8]
     8f8:	e5983008 	ldr	r3, [r8, #8]
     8fc:	e1520003 	cmp	r2, r3
     900:	059f3154 	ldreq	r3, [pc, #154]	; a5c <cfi_cmdset_0002+0xa5c>
     904:	05883018 	streq	r3, [r8, #24]
     908:	0a00024d 	beq	1244 <do_write_oneword+0x240>
     90c:	e59f3154 	ldr	r3, [pc, #154]	; a68 <cfi_cmdset_0002+0xa68>
     910:	e5883018 	str	r3, [r8, #24]
     914:	ea00024d 	b	1250 <do_write_oneword+0x24c>
     918:	e59f314c 	ldr	r3, [pc, #14c]	; a6c <cfi_cmdset_0002+0xa6c>
     91c:	e59f2140 	ldr	r2, [pc, #140]	; a64 <cfi_cmdset_0002+0xa64>
     920:	e5883014 	str	r3, [r8, #20]
     924:	e5882018 	str	r2, [r8, #24]
     928:	ea00024d 	b	1264 <do_write_oneword+0x260>
     92c:	e59f013c 	ldr	r0, [pc, #13c]	; a70 <cfi_cmdset_0002+0xa70>
     930:	ebfffffe 	bl	930 <cfi_cmdset_0002+0x930>
     934:	e3a00000 	mov	r0, #0	; 0x0
     938:	ea0002a7 	b	13dc <do_write_oneword+0x3d8>
     93c:	e5983030 	ldr	r3, [r8, #48]
     940:	e3a00000 	mov	r0, #0	; 0x0
     944:	e1500003 	cmp	r0, r3
     948:	aa000264 	bge	12e0 <do_write_oneword+0x2dc>
     94c:	e3a0c001 	mov	r12, #1	; 0x1
     950:	e2881064 	add	r1, r8, #100	; 0x64
     954:	e5982024 	ldr	r2, [r8, #36]
     958:	e5d2300f 	ldrb	r3, [r2, #15]
     95c:	e1a0331c 	mov	r3, r12, lsl r3
     960:	e5013008 	str	r3, [r1, -#8]
     964:	e5982024 	ldr	r2, [r8, #36]
     968:	e5d23010 	ldrb	r3, [r2, #16]
     96c:	e1a0331c 	mov	r3, r12, lsl r3
     970:	e5013004 	str	r3, [r1, -#4]
     974:	e5982024 	ldr	r2, [r8, #36]
     978:	e5d23011 	ldrb	r3, [r2, #17]
     97c:	e2800001 	add	r0, r0, #1	; 0x1
     980:	e1a0331c 	mov	r3, r12, lsl r3
     984:	e5813000 	str	r3, [r1]
     988:	e5982030 	ldr	r2, [r8, #48]
     98c:	e281102c 	add	r1, r1, #44	; 0x2c
     990:	e1500002 	cmp	r0, r2
     994:	ba000253 	blt	12e8 <do_write_oneword+0x2e4>
     998:	e59f30d4 	ldr	r3, [pc, #d4]	; a74 <cfi_cmdset_0002+0xa74>
     99c:	e587303c 	str	r3, [r7, #60]
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
     9a0:	e3a02055 	mov	r2, #85	; 0x55
     9a4:	e598300c 	ldr	r3, [r8, #12]
     9a8:	e0010293 	mul	r1, r3, r2
     9ac:	e3a0c000 	mov	r12, #0	; 0x0
     9b0:	e5980008 	ldr	r0, [r8, #8]
     9b4:	e5973008 	ldr	r3, [r7, #8]
	__u32 val;
	__u32 addr = base + cfi_build_cmd_addr(cmd_addr, CFIDEV_INTERLEAVE, type);
     9b8:	e51b202c 	ldr	r2, [r11, -#44]
     9bc:	e3530001 	cmp	r3, #1	; 0x1
     9c0:	e0222190 	mla	r2, r0, r1, r2
     9c4:	0a00027b 	beq	13b8 <do_write_oneword+0x3b4>
     9c8:	e3530002 	cmp	r3, #2	; 0x2
     9cc:	1a000277 	bne	13b0 <do_write_oneword+0x3ac>
     9d0:	e3500001 	cmp	r0, #1	; 0x1
     9d4:	0a00027b 	beq	13c8 <do_write_oneword+0x3c4>
     9d8:	e59f3098 	ldr	r3, [pc, #98]	; a78 <cfi_cmdset_0002+0xa78>
     9dc:	e3500002 	cmp	r0, #2	; 0x2
     9e0:	ea000282 	b	13f0 <do_write_oneword+0x3ec>
     9e4:	e3530004 	cmp	r3, #4	; 0x4
     9e8:	1a000284 	bne	1400 <do_write_oneword+0x3fc>
     9ec:	e3500001 	cmp	r0, #1	; 0x1
     9f0:	1a00027d 	bne	13ec <do_write_oneword+0x3e8>
     9f4:	e3a0c0f0 	mov	r12, #240	; 0xf0
     9f8:	ea000284 	b	1410 <do_write_oneword+0x40c>
     9fc:	e3500002 	cmp	r0, #2	; 0x2
     a00:	059fc074 	ldreq	r12, [pc, #74]	; a7c <cfi_cmdset_0002+0xa7c>
     a04:	0a000284 	beq	141c <do_write_oneword+0x418>
     a08:	e59f3070 	ldr	r3, [pc, #70]	; a80 <cfi_cmdset_0002+0xa80>
     a0c:	e3500004 	cmp	r0, #4	; 0x4
     a10:	01a0c003 	moveq	r12, r3
     a14:	13a0c000 	movne	r12, #0	; 0x0
     a18:	e5973008 	ldr	r3, [r7, #8]
     a1c:	e3530001 	cmp	r3, #1	; 0x1
     a20:	1a00028c 	bne	1458 <do_write_oneword+0x454>
     a24:	e1a00007 	mov	r0, r7
     a28:	e20c10f0 	and	r1, r12, #240	; 0xf0
     a2c:	e1a0e00f 	mov	lr, pc
     a30:	e597f01c 	ldr	pc, [r7, #28]
     a34:	ea0002a5 	b	14d0 <do_write_oneword+0x4cc>
     a38:	e3530002 	cmp	r3, #2	; 0x2
     a3c:	1a00029f 	bne	14c0 <do_write_oneword+0x4bc>
     a40:	e59f1030 	ldr	r1, [pc, #30]	; a78 <cfi_cmdset_0002+0xa78>
     a44:	e1a00007 	mov	r0, r7
     a48:	e00c1001 	and	r1, r12, r1
     a4c:	e1a0e00f 	mov	lr, pc
     a50:	e597f020 	ldr	pc, [r7, #32]
     a54:	ea0002a5 	b	14f0 <do_write_oneword+0x4ec>
     a58:	00000088 	andeq	r0, r0, r8, lsl #1
     a5c:	00000555 	andeq	r0, r0, r5, asr r5
     a60:	000002aa 	andeq	r0, r0, r10, lsr #5
     a64:	00000aaa 	andeq	r0, r0, r10, lsr #21
     a68:	00000554 	andeq	r0, r0, r4, asr r5
     a6c:	00001555 	andeq	r1, r0, r5, asr r5
     a70:	000000c0 	andeq	r0, r0, r0, asr #1
     a74:	00000000 	andeq	r0, r0, r0
     a78:	0000f0f0 	streqsh	pc, [r0], -r0
     a7c:	00f000f0 	ldreqsh	r0, [r0]
     a80:	f0f0f0f0 	ldrnvsh	pc, [r0]
     a84:	e3530004 	cmp	r3, #4	; 0x4
     a88:	1a0002a5 	bne	1524 <do_write_oneword+0x520>
     a8c:	e1a00007 	mov	r0, r7
     a90:	e1a0100c 	mov	r1, r12
     a94:	e1a0e00f 	mov	lr, pc
     a98:	e597f024 	ldr	pc, [r7, #36]
     a9c:	e1a00007 	mov	r0, r7
     aa0:	eb0002a8 	bl	1548 <do_write_oneword+0x544>
     aa4:	e91baff0 	ldmdb	r11, {r4, r5, r6, r7, r8, r9, r10, r11, sp, pc}

00000aa8 <cfi_amdstd_setup>:
     aa8:	e1a0c00d 	mov	r12, sp
     aac:	e92ddff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
     ab0:	e24cb004 	sub	r11, r12, #4	; 0x4
     ab4:	e24dd00c 	sub	sp, sp, #12	; 0xc
     ab8:	e50b002c 	str	r0, [r11, -#44]
     abc:	e5905038 	ldr	r5, [r0, #56]
     ac0:	e3a01e1f 	mov	r1, #496	; 0x1f0
     ac4:	e5953024 	ldr	r3, [r5, #36]
     ac8:	e5952008 	ldr	r2, [r5, #8]
     acc:	e5d3c017 	ldrb	r12, [r3, #23]
     ad0:	e3a0007c 	mov	r0, #124	; 0x7c
     ad4:	e1a02c12 	mov	r2, r2, lsl r12
     ad8:	e50b2030 	str	r2, [r11, -#48]
     adc:	ebfffffe 	bl	adc <cfi_amdstd_setup+0x34>
     ae0:	e1a04000 	mov	r4, r0
     ae4:	e59fc26c 	ldr	r12, [pc, #26c]	; d58 <cfi_amdstd_setup+0x2b0>
     ae8:	e59f026c 	ldr	r0, [pc, #26c]	; d5c <cfi_amdstd_setup+0x2b4>
     aec:	e5953010 	ldr	r3, [r5, #16]
     af0:	e59f1268 	ldr	r1, [pc, #268]	; d60 <cfi_amdstd_setup+0x2b8>
     af4:	e5952030 	ldr	r2, [r5, #48]
     af8:	e3530000 	cmp	r3, #0	; 0x0
     afc:	01a0100c 	moveq	r1, r12
     b00:	ebfffffe 	bl	b00 <cfi_amdstd_setup+0x58>
     b04:	e3540000 	cmp	r4, #0	; 0x0
     b08:	1a0002c6 	bne	1628 <do_write_oneword+0x624>
     b0c:	e59f0250 	ldr	r0, [pc, #250]	; d64 <cfi_amdstd_setup+0x2bc>
     b10:	ebfffffe 	bl	b10 <cfi_amdstd_setup+0x68>
     b14:	e5950004 	ldr	r0, [r5, #4]
     b18:	ebfffffe 	bl	b18 <cfi_amdstd_setup+0x70>
     b1c:	ea00036d 	b	18d8 <do_write_oneword+0x8d4>
     b20:	e1a00004 	mov	r0, r4
     b24:	e3a0107c 	mov	r1, #124	; 0x7c
     b28:	ebfffffe 	bl	b28 <cfi_amdstd_setup+0x80>
     b2c:	e51b102c 	ldr	r1, [r11, -#44]
     b30:	e3a03003 	mov	r3, #3	; 0x3
     b34:	e5c43000 	strb	r3, [r4]
     b38:	e5841078 	str	r1, [r4, #120]
     b3c:	e5952030 	ldr	r2, [r5, #48]
     b40:	e51b3030 	ldr	r3, [r11, -#48]
     b44:	e0030392 	mul	r3, r2, r3
     b48:	e5843008 	str	r3, [r4, #8]
     b4c:	e5950024 	ldr	r0, [r5, #36]
     b50:	e5d0301c 	ldrb	r3, [r0, #28]
     b54:	e3530001 	cmp	r3, #1	; 0x1
     b58:	1a0002e2 	bne	16e8 <do_write_oneword+0x6e4>
     b5c:	e5d0301d 	ldrb	r3, [r0, #29]
     b60:	e5d0201e 	ldrb	r2, [r0, #30]
     b64:	e5d0101f 	ldrb	r1, [r0, #31]
     b68:	e1833402 	orr	r3, r3, r2, lsl #8
     b6c:	e1833801 	orr	r3, r3, r1, lsl #16
     b70:	e5d02020 	ldrb	r2, [r0, #32]
     b74:	e5951008 	ldr	r1, [r5, #8]
     b78:	e1833c02 	orr	r3, r3, r2, lsl #24
     b7c:	e1a03423 	mov	r3, r3, lsr #8
     b80:	e3c330ff 	bic	r3, r3, #255	; 0xff
     b84:	e0020391 	mul	r2, r1, r3
     b88:	e584200c 	str	r2, [r4, #12]
     b8c:	ea00033a 	b	187c <do_write_oneword+0x878>
     b90:	e5d0101c 	ldrb	r1, [r0, #28]
     b94:	e5953030 	ldr	r3, [r5, #48]
     b98:	e0020193 	mul	r2, r3, r1
     b9c:	e3a03000 	mov	r3, #0	; 0x0
     ba0:	e3a01e1f 	mov	r1, #496	; 0x1f0
     ba4:	e50b3034 	str	r3, [r11, -#52]
     ba8:	e0820082 	add	r0, r2, r2, lsl #1
     bac:	e1a00100 	mov	r0, r0, lsl #2
     bb0:	e5842028 	str	r2, [r4, #40]
     bb4:	ebfffffe 	bl	bb4 <cfi_amdstd_setup+0x10c>
     bb8:	e3500000 	cmp	r0, #0	; 0x0
     bbc:	e584002c 	str	r0, [r4, #44]
     bc0:	1a0002f2 	bne	1790 <do_write_oneword+0x78c>
     bc4:	e59f019c 	ldr	r0, [pc, #19c]	; d68 <cfi_amdstd_setup+0x2c0>
     bc8:	ebfffffe 	bl	bc8 <cfi_amdstd_setup+0x120>
     bcc:	ea000350 	b	1914 <do_write_oneword+0x910>
     bd0:	e5952024 	ldr	r2, [r5, #36]
     bd4:	e51b7034 	ldr	r7, [r11, -#52]
     bd8:	e5d2301c 	ldrb	r3, [r2, #28]
     bdc:	e1570003 	cmp	r7, r3
     be0:	aa000332 	bge	18b0 <do_write_oneword+0x8ac>
     be4:	e0822107 	add	r2, r2, r7, lsl #2
     be8:	e5d2101d 	ldrb	r1, [r2, #29]
     bec:	e5d2301e 	ldrb	r3, [r2, #30]
     bf0:	e5d2001f 	ldrb	r0, [r2, #31]
     bf4:	e5d2c020 	ldrb	r12, [r2, #32]
     bf8:	e5952008 	ldr	r2, [r5, #8]
     bfc:	e1811403 	orr	r1, r1, r3, lsl #8
     c00:	e1811800 	orr	r1, r1, r0, lsl #16
     c04:	e1811c0c 	orr	r1, r1, r12, lsl #24
     c08:	e1a03421 	mov	r3, r1, lsr #8
     c0c:	e3c330ff 	bic	r3, r3, #255	; 0xff
     c10:	e0060392 	mul	r6, r2, r3
     c14:	e59f3150 	ldr	r3, [pc, #150]	; d6c <cfi_amdstd_setup+0x2c4>
     c18:	e594000c 	ldr	r0, [r4, #12]
     c1c:	e0011003 	and	r1, r1, r3
     c20:	e2818001 	add	r8, r1, #1	; 0x1
     c24:	e1500006 	cmp	r0, r6
     c28:	3584600c 	strcc	r6, [r4, #12]
     c2c:	e3a0c000 	mov	r12, #0	; 0x0
     c30:	e2879001 	add	r9, r7, #1	; 0x1
     c34:	e5953030 	ldr	r3, [r5, #48]
     c38:	e00a0698 	mul	r10, r8, r6
     c3c:	e15c0003 	cmp	r12, r3
     c40:	aa00032a 	bge	18f0 <do_write_oneword+0x8ec>
     c44:	e51be034 	ldr	lr, [r11, -#52]
     c48:	e5952024 	ldr	r2, [r5, #36]
     c4c:	e5d2101c 	ldrb	r1, [r2, #28]
     c50:	e0237c91 	mla	r3, r1, r12, r7
     c54:	e594002c 	ldr	r0, [r4, #44]
     c58:	e0833083 	add	r3, r3, r3, lsl #1
     c5c:	e780e103 	str	lr, [r0, r3, lsl #2]
     c60:	e5952024 	ldr	r2, [r5, #36]
     c64:	e5d2101c 	ldrb	r1, [r2, #28]
     c68:	e0237c91 	mla	r3, r1, r12, r7
     c6c:	e594202c 	ldr	r2, [r4, #44]
     c70:	e0833083 	add	r3, r3, r3, lsl #1
     c74:	e0822103 	add	r2, r2, r3, lsl #2
     c78:	e5826004 	str	r6, [r2, #4]
     c7c:	e5953024 	ldr	r3, [r5, #36]
     c80:	e5d3201c 	ldrb	r2, [r3, #28]
     c84:	e0217c92 	mla	r1, r2, r12, r7
     c88:	e51b2030 	ldr	r2, [r11, -#48]
     c8c:	e594302c 	ldr	r3, [r4, #44]
     c90:	e08ee002 	add	lr, lr, r2
     c94:	e0811081 	add	r1, r1, r1, lsl #1
     c98:	e0833101 	add	r3, r3, r1, lsl #2
     c9c:	e5838008 	str	r8, [r3, #8]
     ca0:	e5952030 	ldr	r2, [r5, #48]
     ca4:	e28cc001 	add	r12, r12, #1	; 0x1
     ca8:	e15c0002 	cmp	r12, r2
     cac:	ba000310 	blt	18f4 <do_write_oneword+0x8f0>
     cb0:	e51b3034 	ldr	r3, [r11, -#52]
     cb4:	e5952024 	ldr	r2, [r5, #36]
     cb8:	e083300a 	add	r3, r3, r10
     cbc:	e50b3034 	str	r3, [r11, -#52]
     cc0:	e5d2301c 	ldrb	r3, [r2, #28]
     cc4:	e1a07009 	mov	r7, r9
     cc8:	e1570003 	cmp	r7, r3
     ccc:	ba0002f7 	blt	18b0 <do_write_oneword+0x8ac>
     cd0:	e51b1034 	ldr	r1, [r11, -#52]
     cd4:	e51b2030 	ldr	r2, [r11, -#48]
     cd8:	e1510002 	cmp	r1, r2
     cdc:	0a00033a 	beq	19cc <cfi_amdstd_write+0x6c>
     ce0:	e59f0088 	ldr	r0, [pc, #88]	; d70 <cfi_amdstd_setup+0x2c8>
     ce4:	ebfffffe 	bl	ce4 <cfi_amdstd_setup+0x23c>
     ce8:	e594002c 	ldr	r0, [r4, #44]
     cec:	ea00034f 	b	1a30 <cfi_amdstd_write+0xd0>
     cf0:	e51b102c 	ldr	r1, [r11, -#44]
     cf4:	e5913008 	ldr	r3, [r1, #8]
     cf8:	e3530001 	cmp	r3, #1	; 0x1
     cfc:	ba00034c 	blt	1a34 <cfi_amdstd_write+0xd4>
     d00:	e3530002 	cmp	r3, #2	; 0x2
     d04:	da000342 	ble	1a14 <cfi_amdstd_write+0xb4>
     d08:	e3530004 	cmp	r3, #4	; 0x4
     d0c:	1a00034c 	bne	1a44 <cfi_amdstd_write+0xe4>
     d10:	e5943028 	ldr	r3, [r4, #40]
     d14:	e3530001 	cmp	r3, #1	; 0x1
     d18:	e59f3054 	ldr	r3, [pc, #54]	; d74 <cfi_amdstd_setup+0x2cc>
     d1c:	c59f3054 	ldrgt	r3, [pc, #54]	; d78 <cfi_amdstd_setup+0x2d0>
     d20:	e5843038 	str	r3, [r4, #56]
     d24:	e59f3050 	ldr	r3, [pc, #50]	; d7c <cfi_amdstd_setup+0x2d4>
     d28:	e59f2050 	ldr	r2, [pc, #50]	; d80 <cfi_amdstd_setup+0x2d8>
     d2c:	e5843044 	str	r3, [r4, #68]
     d30:	e5842048 	str	r2, [r4, #72]
     d34:	ea000360 	b	1abc <cfi_amdstd_write+0x15c>
     d38:	e59f0044 	ldr	r0, [pc, #44]	; d84 <cfi_amdstd_setup+0x2dc>
     d3c:	ebfffffe 	bl	d3c <cfi_amdstd_setup+0x294>
     d40:	e1a00004 	mov	r0, r4
     d44:	ebfffffe 	bl	d44 <cfi_amdstd_setup+0x29c>
     d48:	e5950004 	ldr	r0, [r5, #4]
     d4c:	ebfffffe 	bl	d4c <cfi_amdstd_setup+0x2a4>
     d50:	e3a00000 	mov	r0, #0	; 0x0
     d54:	ea00036e 	b	1b14 <cfi_amdstd_write+0x1b4>
     d58:	00000110 	andeq	r0, r0, r0, lsl r1
     d5c:	000000f0 	streqsh	r0, [r0], -r0
     d60:	0000010c 	andeq	r0, r0, r12, lsl #2
     d64:	00000118 	andeq	r0, r0, r8, lsl r1
     d68:	00000148 	andeq	r0, r0, r8, asr #2
     d6c:	0000ffff 	streqsh	pc, [r0], -pc
     d70:	00000180 	andeq	r0, r0, r0, lsl #3
     d74:	0000325c 	andeq	r3, r0, r12, asr r2
     d78:	000026b4 	streqh	r2, [r0], -r4
     d7c:	00000dd8 	streqsb	r0, [r0], -r8
     d80:	00001960 	andeq	r1, r0, r0, ror #18
     d84:	000001cc 	andeq	r0, r0, r12, asr #3
     d88:	e59f2034 	ldr	r2, [pc, #34]	; dc4 <cfi_amdstd_setup+0x31c>
     d8c:	e59f1034 	ldr	r1, [pc, #34]	; dc8 <cfi_amdstd_setup+0x320>
     d90:	e59f0034 	ldr	r0, [pc, #34]	; dcc <cfi_amdstd_setup+0x324>
     d94:	e3a03005 	mov	r3, #5	; 0x5
     d98:	e5843004 	str	r3, [r4, #4]
     d9c:	e5842064 	str	r2, [r4, #100]
     da0:	e5841070 	str	r1, [r4, #112]
     da4:	e5840074 	str	r0, [r4, #116]
     da8:	e51b102c 	ldr	r1, [r11, -#44]
     dac:	e59f301c 	ldr	r3, [pc, #1c]	; dd0 <cfi_amdstd_setup+0x328>
     db0:	e5912000 	ldr	r2, [r1]
     db4:	e581303c 	str	r3, [r1, #60]
     db8:	e5842020 	str	r2, [r4, #32]
     dbc:	e1a00004 	mov	r0, r4
     dc0:	ea000373 	b	1b94 <cfi_amdstd_write+0x234>
     dc4:	00003c90 	muleq	r0, r0, r12
     dc8:	00003e64 	andeq	r3, r0, r4, ror #28
     dcc:	00003fac 	andeq	r3, r0, r12, lsr #31
     dd0:	00000000 	andeq	r0, r0, r0
     dd4:	e91baff0 	ldmdb	r11, {r4, r5, r6, r7, r8, r9, r10, r11, sp, pc}

00000dd8 <cfi_amdstd_read>:
     dd8:	e1a0c00d 	mov	r12, sp
     ddc:	e92ddff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
     de0:	e24cb004 	sub	r11, r12, #4	; 0x4
     de4:	e24dd038 	sub	sp, sp, #56	; 0x38
     de8:	e5900078 	ldr	r0, [r0, #120]
     dec:	e1a05002 	mov	r5, r2
     df0:	e1a04001 	mov	r4, r1
     df4:	e50b004c 	str	r0, [r11, -#76]
     df8:	e51b204c 	ldr	r2, [r11, -#76]
     dfc:	e5922038 	ldr	r2, [r2, #56]
     e00:	e1a07003 	mov	r7, r3
     e04:	e50b2050 	str	r2, [r11, -#80]
     e08:	e5922034 	ldr	r2, [r2, #52]
     e0c:	e1a01005 	mov	r1, r5
     e10:	e1a00004 	mov	r0, r4
     e14:	ebfffffe 	bl	e14 <cfi_amdstd_read+0x3c>
     e18:	e1a06000 	mov	r6, r0
     e1c:	e3570000 	cmp	r7, #0	; 0x0
     e20:	e51b3050 	ldr	r3, [r11, -#80]
     e24:	e59bc004 	ldr	r12, [r11, #4]
     e28:	e5932034 	ldr	r2, [r3, #52]
     e2c:	e3a03000 	mov	r3, #0	; 0x0
     e30:	e58c3000 	str	r3, [r12]
     e34:	e0442216 	sub	r2, r4, r6, lsl r2
     e38:	0a0003fd 	beq	1e34 <cfi_amdstd_write+0x4d4>
     e3c:	e51b0050 	ldr	r0, [r11, -#80]
     e40:	e5903030 	ldr	r3, [r0, #48]
     e44:	e1560003 	cmp	r6, r3
     e48:	aa0003fd 	bge	1e44 <cfi_amdstd_write+0x4e4>
     e4c:	e59f8104 	ldr	r8, [pc, #104]	; f58 <cfi_amdstd_read+0x180>
     e50:	e51bc050 	ldr	r12, [r11, -#80]
     e54:	e0873002 	add	r3, r7, r2
     e58:	e59c1034 	ldr	r1, [r12, #52]
     e5c:	e2433001 	sub	r3, r3, #1	; 0x1
     e60:	e1b03133 	movs	r3, r3, lsr r1
     e64:	13a03001 	movne	r3, #1	; 0x1
     e68:	10625113 	rsbne	r5, r2, r3, lsl r1
     e6c:	01a05007 	moveq	r5, r7
     e70:	e0863106 	add	r3, r6, r6, lsl #2
     e74:	e0863083 	add	r3, r6, r3, lsl #1
     e78:	e1a09002 	mov	r9, r2
     e7c:	e3a0a000 	mov	r10, #0	; 0x0
     e80:	e3a01000 	mov	r1, #0	; 0x0
     e84:	e51b0050 	ldr	r0, [r11, -#80]
     e88:	e3a02010 	mov	r2, #16	; 0x10
     e8c:	e0804103 	add	r4, r0, r3, lsl #2
     e90:	e24b0048 	sub	r0, r11, #72	; 0x48
     e94:	ebfffffe 	bl	e94 <cfi_amdstd_read+0xbc>

static inline struct task_struct *get_current(void)
{
	register unsigned long sp asm ("sp");
	return (struct task_struct *)(sp & ~0x1fff);
     e98:	e3cd3d7f 	bic	r3, sp, #8128	; 0x1fc0
     e9c:	e3c3303f 	bic	r3, r3, #63	; 0x3f
     ea0:	e24bc048 	sub	r12, r11, #72	; 0x48
     ea4:	e50b305c 	str	r3, [r11, -#92]
     ea8:	e50b3044 	str	r3, [r11, -#68]
     eac:	e89c000f 	ldmia	r12, {r0, r1, r2, r3}
     eb0:	e24be038 	sub	lr, r11, #56	; 0x38
     eb4:	e88e000f 	stmia	lr, {r0, r1, r2, r3}
     eb8:	e284403c 	add	r4, r4, #60	; 0x3c
     ebc:	e0657007 	rsb	r7, r5, r7
     ec0:	e59b1008 	ldr	r1, [r11, #8]
     ec4:	e2866001 	add	r6, r6, #1	; 0x1
     ec8:	e50b7054 	str	r7, [r11, -#84]
     ecc:	e50b6060 	str	r6, [r11, -#96]
     ed0:	e59f2084 	ldr	r2, [pc, #84]	; f5c <cfi_amdstd_read+0x184>
     ed4:	e59f6084 	ldr	r6, [pc, #84]	; f60 <cfi_amdstd_read+0x188>
     ed8:	e0811005 	add	r1, r1, r5
     edc:	e2867008 	add	r7, r6, #8	; 0x8
     ee0:	e50b1058 	str	r1, [r11, -#88]
     ee4:	e5923000 	ldr	r3, [r2]
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
     ee8:	e5963008 	ldr	r3, [r6, #8]
     eec:	e2833001 	add	r3, r3, #1	; 0x1
     ef0:	e5863008 	str	r3, [r6, #8]
     ef4:	e594c004 	ldr	r12, [r4, #4]
     ef8:	e35c0000 	cmp	r12, #0	; 0x0
     efc:	0a0003d7 	beq	1e60 <cfi_amdstd_write+0x500>
     f00:	e51b205c 	ldr	r2, [r11, -#92]
     f04:	e3a03002 	mov	r3, #2	; 0x2
     f08:	e5823000 	str	r3, [r2]
     f0c:	e2840014 	add	r0, r4, #20	; 0x14
     f10:	e24b1038 	sub	r1, r11, #56	; 0x38
     f14:	ebfffffe 	bl	f14 <cfi_amdstd_read+0x13c>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
     f18:	e5983000 	ldr	r3, [r8]
     f1c:	e2433001 	sub	r3, r3, #1	; 0x1
     f20:	e3530000 	cmp	r3, #0	; 0x0
     f24:	e5883000 	str	r3, [r8]
     f28:	1a0003cd 	bne	1e64 <cfi_amdstd_write+0x504>
     f2c:	e5173008 	ldr	r3, [r7, -#8]
     f30:	e3530000 	cmp	r3, #0	; 0x0
     f34:	0a0003cd 	beq	1e70 <cfi_amdstd_write+0x510>
     f38:	ebfffffe 	bl	f38 <cfi_amdstd_read+0x160>
     f3c:	ebfffffe 	bl	f3c <cfi_amdstd_read+0x164>
     f40:	e2840014 	add	r0, r4, #20	; 0x14
     f44:	e24b1038 	sub	r1, r11, #56	; 0x38
     f48:	ebfffffe 	bl	f48 <cfi_amdstd_read+0x170>
     f4c:	e59fc008 	ldr	r12, [pc, #8]	; f5c <cfi_amdstd_read+0x184>
     f50:	e59c3000 	ldr	r3, [r12]
     f54:	ea0003b8 	b	1e3c <cfi_amdstd_write+0x4dc>
     f58:	00000008 	andeq	r0, r0, r8
	...
     f64:	e51b004c 	ldr	r0, [r11, -#76]
     f68:	e59b1008 	ldr	r1, [r11, #8]
     f6c:	e5942000 	ldr	r2, [r4]
     f70:	e1a03005 	mov	r3, r5
     f74:	e584c004 	str	r12, [r4, #4]
     f78:	e51bc04c 	ldr	r12, [r11, -#76]
     f7c:	e0892002 	add	r2, r9, r2
     f80:	e1a0e00f 	mov	lr, pc
     f84:	e59cf018 	ldr	pc, [r12, #24]
     f88:	e2840014 	add	r0, r4, #20	; 0x14
     f8c:	e3a01003 	mov	r1, #3	; 0x3
     f90:	e3a02001 	mov	r2, #1	; 0x1
     f94:	ebfffffe 	bl	f94 <cfi_amdstd_read+0x1bc>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
     f98:	e5983000 	ldr	r3, [r8]
     f9c:	e2433001 	sub	r3, r3, #1	; 0x1
     fa0:	e3530000 	cmp	r3, #0	; 0x0
     fa4:	e5883000 	str	r3, [r8]
     fa8:	1a0003ed 	bne	1f64 <cfi_amdstd_write+0x604>
     fac:	e5173008 	ldr	r3, [r7, -#8]
     fb0:	e3530000 	cmp	r3, #0	; 0x0
     fb4:	0a0003ed 	beq	1f70 <cfi_amdstd_write+0x610>
     fb8:	ebfffffe 	bl	fb8 <cfi_amdstd_read+0x1e0>
     fbc:	e51b0058 	ldr	r0, [r11, -#88]
     fc0:	e51b6060 	ldr	r6, [r11, -#96]
     fc4:	e59b1004 	ldr	r1, [r11, #4]
     fc8:	e51b7054 	ldr	r7, [r11, -#84]
     fcc:	e3a02000 	mov	r2, #0	; 0x0
     fd0:	e58b0008 	str	r0, [r11, #8]
     fd4:	e5913000 	ldr	r3, [r1]
     fd8:	e3570000 	cmp	r7, #0	; 0x0
     fdc:	e0833005 	add	r3, r3, r5
     fe0:	e5813000 	str	r3, [r1]
     fe4:	0a0003fd 	beq	1fe0 <cfi_amdstd_write+0x680>
     fe8:	e51bc050 	ldr	r12, [r11, -#80]
     fec:	e51b0060 	ldr	r0, [r11, -#96]
     ff0:	e59c3030 	ldr	r3, [r12, #48]
     ff4:	e1500003 	cmp	r0, r3
     ff8:	ba000392 	blt	1e48 <cfi_amdstd_write+0x4e8>
     ffc:	e3a00000 	mov	r0, #0	; 0x0
    1000:	e91baff0 	ldmdb	r11, {r4, r5, r6, r7, r8, r9, r10, r11, sp, pc}

00001004 <do_write_oneword>:
    1004:	e1a0c00d 	mov	r12, sp
    1008:	e92ddff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    100c:	e24cb004 	sub	r11, r12, #4	; 0x4
    1010:	e1a08002 	mov	r8, r2
    1014:	e3a07000 	mov	r7, #0	; 0x0
    1018:	e1a06000 	mov	r6, r0
    101c:	e24b4058 	sub	r4, r11, #88	; 0x58
    1020:	e1a00004 	mov	r0, r4
    1024:	e1a09001 	mov	r9, r1
    1028:	e59f5394 	ldr	r5, [pc, #394]	; 13c4 <do_write_oneword+0x3c0>
    102c:	e24dd044 	sub	sp, sp, #68	; 0x44
    1030:	e50b7064 	str	r7, [r11, -#100]
    1034:	e595c000 	ldr	r12, [r5]
    1038:	e1a01007 	mov	r1, r7
    103c:	e50b305c 	str	r3, [r11, -#92]
    1040:	e5963038 	ldr	r3, [r6, #56]
    1044:	e3a02010 	mov	r2, #16	; 0x10
    1048:	e50b3060 	str	r3, [r11, -#96]
    104c:	ebfffffe 	bl	104c <do_write_oneword+0x48>

static inline struct task_struct *get_current(void)
{
	register unsigned long sp asm ("sp");
	return (struct task_struct *)(sp & ~0x1fff);
    1050:	e3cd3d7f 	bic	r3, sp, #8128	; 0x1fc0
    1054:	e3c3303f 	bic	r3, r3, #63	; 0x3f
    1058:	e24bc048 	sub	r12, r11, #72	; 0x48
    105c:	e1a0500c 	mov	r5, r12
    1060:	e50b306c 	str	r3, [r11, -#108]
    1064:	e50b3054 	str	r3, [r11, -#84]
    1068:	e59fa358 	ldr	r10, [pc, #358]	; 13c8 <do_write_oneword+0x3c4>
    106c:	e894000f 	ldmia	r4, {r0, r1, r2, r3}
    1070:	e28a4008 	add	r4, r10, #8	; 0x8
    1074:	e88c000f 	stmia	r12, {r0, r1, r2, r3}
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    1078:	e59a3008 	ldr	r3, [r10, #8]
    107c:	e2833001 	add	r3, r3, #1	; 0x1
    1080:	e58a3008 	str	r3, [r10, #8]
    1084:	e5997004 	ldr	r7, [r9, #4]
    1088:	e3570000 	cmp	r7, #0	; 0x0
    108c:	0a000438 	beq	2174 <cfi_amdstd_write+0x814>
    1090:	e51be06c 	ldr	lr, [r11, -#108]
    1094:	e3a03002 	mov	r3, #2	; 0x2
    1098:	e58e3000 	str	r3, [lr]
    109c:	e2890014 	add	r0, r9, #20	; 0x14
    10a0:	e1a01005 	mov	r1, r5
    10a4:	ebfffffe 	bl	10a4 <do_write_oneword+0xa0>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    10a8:	e5943000 	ldr	r3, [r4]
    10ac:	e2433001 	sub	r3, r3, #1	; 0x1
    10b0:	e3530000 	cmp	r3, #0	; 0x0
    10b4:	e5843000 	str	r3, [r4]
    10b8:	1a000431 	bne	2184 <cfi_amdstd_write+0x824>
    10bc:	e5143008 	ldr	r3, [r4, -#8]
    10c0:	e3530000 	cmp	r3, #0	; 0x0
    10c4:	0a000431 	beq	2190 <cfi_amdstd_write+0x830>
    10c8:	ebfffffe 	bl	10c8 <do_write_oneword+0xc4>
    10cc:	ebfffffe 	bl	10cc <do_write_oneword+0xc8>
    10d0:	e2890014 	add	r0, r9, #20	; 0x14
    10d4:	e1a01005 	mov	r1, r5
    10d8:	ebfffffe 	bl	10d8 <do_write_oneword+0xd4>
    10dc:	e59f12e0 	ldr	r1, [pc, #2e0]	; 13c4 <do_write_oneword+0x3c0>
    10e0:	e5913000 	ldr	r3, [r1]
    10e4:	ea00041c 	b	215c <cfi_amdstd_write+0x7fc>
    10e8:	e5992000 	ldr	r2, [r9]
    10ec:	e3a03007 	mov	r3, #7	; 0x7
    10f0:	e5893004 	str	r3, [r9, #4]
    10f4:	e0888002 	add	r8, r8, r2
    10f8:	e596302c 	ldr	r3, [r6, #44]
    10fc:	e3530000 	cmp	r3, #0	; 0x0
    1100:	0a000443 	beq	2214 <cfi_amdstd_write+0x8b4>
    1104:	e1a00006 	mov	r0, r6
    1108:	e3a01001 	mov	r1, #1	; 0x1
    110c:	e1a0e00f 	mov	lr, pc
    1110:	e1a0f003 	mov	pc, r3
    1114:	e59b2004 	ldr	r2, [r11, #4]
    1118:	e3520000 	cmp	r2, #0	; 0x0
    111c:	0a000478 	beq	2304 <cfi_amdstd_write+0x9a4>
 * Transforms the CFI command for the given geometry (bus width & interleave.
 */
static inline __u32 cfi_build_cmd(u_char cmd, struct map_info *map, struct cfi_private *cfi)
{
	__u32 val = 0;
    1120:	e1a01007 	mov	r1, r7

	if (cfi_buswidth_is_1()) {
    1124:	e5963008 	ldr	r3, [r6, #8]
		/* 1 x8 device */
		val = cmd;
	} else if (cfi_buswidth_is_2()) {
		if (cfi_interleave_is_1()) {
			/* 1 x16 device in x16 mode */
			val = cpu_to_cfi16(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 (x8, x16 or x32) devices in x8 mode */
			val = cpu_to_cfi16((cmd << 8) | cmd);
		}
	} else if (cfi_buswidth_is_4()) {
		if (cfi_interleave_is_1()) {
			/* 1 x32 device in x32 mode */
			val = cpu_to_cfi32(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 x16 device in x16 mode */
			val = cpu_to_cfi32((cmd << 16) | cmd);
		} else if (cfi_interleave_is_4()) {
			/* 4 (x8, x16 or x32) devices in x8 mode */
			val = (cmd << 16) | cmd;
			val = cpu_to_cfi32((val << 8) | val);
		}
	}
	return val;
}
#define CMD(x)  cfi_build_cmd((x), map, cfi)

/*
 * Read a value according to the bus width.
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return map->read16(map, addr);
	} else if (cfi_buswidth_is_4()) {
		return map->read32(map, addr);
	} else {
		return 0;
	}
}

/*
 * Write a value according to the bus width.
 */

static inline void cfi_write(struct map_info *map, __u32 val, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		map->write8(map, val, addr);
	} else if (cfi_buswidth_is_2()) {
		map->write16(map, val, addr);
	} else if (cfi_buswidth_is_4()) {
		map->write32(map, val, addr);
	}
}

/*
 * Sends a CFI command to a bank of flash for the given geometry.
 *
 * Returns the offset in flash where the command was written.
 * If prev_val is non-null, it will be set to the value at the command address,
 * before the command was written.
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    1128:	e5992000 	ldr	r2, [r9]
    112c:	e3530001 	cmp	r3, #1	; 0x1
    1130:	0a00045a 	beq	22a0 <cfi_amdstd_write+0x940>
    1134:	e3530002 	cmp	r3, #2	; 0x2
    1138:	1a000454 	bne	2290 <cfi_amdstd_write+0x930>
    113c:	e51b3060 	ldr	r3, [r11, -#96]
    1140:	e5930008 	ldr	r0, [r3, #8]
    1144:	e3500001 	cmp	r0, #1	; 0x1
    1148:	0a00045a 	beq	22b8 <cfi_amdstd_write+0x958>
    114c:	e59f3278 	ldr	r3, [pc, #278]	; 13cc <do_write_oneword+0x3c8>
    1150:	e3500002 	cmp	r0, #2	; 0x2
    1154:	ea000461 	b	22e0 <cfi_amdstd_write+0x980>
    1158:	e3530004 	cmp	r3, #4	; 0x4
    115c:	1a000462 	bne	22ec <cfi_amdstd_write+0x98c>
    1160:	e51be060 	ldr	lr, [r11, -#96]
    1164:	e59e0008 	ldr	r0, [lr, #8]
    1168:	e3500001 	cmp	r0, #1	; 0x1
    116c:	1a00045c 	bne	22e4 <cfi_amdstd_write+0x984>
    1170:	e3a010a0 	mov	r1, #160	; 0xa0
    1174:	ea000462 	b	2304 <cfi_amdstd_write+0x9a4>
    1178:	e3500002 	cmp	r0, #2	; 0x2
    117c:	059f124c 	ldreq	r1, [pc, #24c]	; 13d0 <do_write_oneword+0x3cc>
    1180:	0a000462 	beq	2310 <cfi_amdstd_write+0x9b0>
    1184:	e59f3248 	ldr	r3, [pc, #248]	; 13d4 <do_write_oneword+0x3d0>
    1188:	e3500004 	cmp	r0, #4	; 0x4
    118c:	01a01003 	moveq	r1, r3
    1190:	e5963008 	ldr	r3, [r6, #8]
    1194:	e3530001 	cmp	r3, #1	; 0x1
    1198:	1a00046a 	bne	2348 <cfi_amdstd_write+0x9e8>
    119c:	e1a00006 	mov	r0, r6
    11a0:	e20110ff 	and	r1, r1, #255	; 0xff
    11a4:	e1a0e00f 	mov	lr, pc
    11a8:	e596f01c 	ldr	pc, [r6, #28]
    11ac:	ea00051d 	b	2628 <cfi_amdstd_write+0xcc8>
    11b0:	e3530002 	cmp	r3, #2	; 0x2
    11b4:	1a000472 	bne	2384 <cfi_amdstd_write+0xa24>
    11b8:	e1a00006 	mov	r0, r6
    11bc:	e1a01801 	mov	r1, r1, lsl #16
    11c0:	e1a01821 	mov	r1, r1, lsr #16
    11c4:	e1a0e00f 	mov	lr, pc
    11c8:	e596f020 	ldr	pc, [r6, #32]
    11cc:	ea00051d 	b	2648 <cfi_amdstd_write+0xce8>
    11d0:	e3530004 	cmp	r3, #4	; 0x4
    11d4:	1a00051d 	bne	2650 <cfi_amdstd_write+0xcf0>
    11d8:	e1a00006 	mov	r0, r6
    11dc:	e1a0e00f 	mov	lr, pc
    11e0:	e596f024 	ldr	pc, [r6, #36]
    11e4:	ea00051d 	b	2660 <cfi_amdstd_write+0xd00>
 * Transforms the CFI command for the given geometry (bus width & interleave.
 */
static inline __u32 cfi_build_cmd(u_char cmd, struct map_info *map, struct cfi_private *cfi)
{
	__u32 val = 0;
    11e8:	e59b1004 	ldr	r1, [r11, #4]

	if (cfi_buswidth_is_1()) {
		/* 1 x8 device */
		val = cmd;
	} else if (cfi_buswidth_is_2()) {
		if (cfi_interleave_is_1()) {
			/* 1 x16 device in x16 mode */
			val = cpu_to_cfi16(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 (x8, x16 or x32) devices in x8 mode */
			val = cpu_to_cfi16((cmd << 8) | cmd);
		}
	} else if (cfi_buswidth_is_4()) {
		if (cfi_interleave_is_1()) {
			/* 1 x32 device in x32 mode */
			val = cpu_to_cfi32(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 x16 device in x16 mode */
			val = cpu_to_cfi32((cmd << 16) | cmd);
		} else if (cfi_interleave_is_4()) {
			/* 4 (x8, x16 or x32) devices in x8 mode */
			val = (cmd << 16) | cmd;
			val = cpu_to_cfi32((val << 8) | val);
		}
	}
	return val;
}
#define CMD(x)  cfi_build_cmd((x), map, cfi)

/*
 * Read a value according to the bus width.
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return map->read16(map, addr);
	} else if (cfi_buswidth_is_4()) {
		return map->read32(map, addr);
	} else {
		return 0;
	}
}

/*
 * Write a value according to the bus width.
 */

static inline void cfi_write(struct map_info *map, __u32 val, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		map->write8(map, val, addr);
	} else if (cfi_buswidth_is_2()) {
		map->write16(map, val, addr);
	} else if (cfi_buswidth_is_4()) {
		map->write32(map, val, addr);
	}
}

/*
 * Sends a CFI command to a bank of flash for the given geometry.
 *
 * Returns the offset in flash where the command was written.
 * If prev_val is non-null, it will be set to the value at the command address,
 * before the command was written.
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    11ec:	e51b3060 	ldr	r3, [r11, -#96]
    11f0:	e5960008 	ldr	r0, [r6, #8]
    11f4:	e51be060 	ldr	lr, [r11, -#96]
    11f8:	e5932014 	ldr	r2, [r3, #20]
    11fc:	e5993000 	ldr	r3, [r9]
    1200:	e59ec008 	ldr	r12, [lr, #8]
    1204:	e3500001 	cmp	r0, #1	; 0x1
	__u32 val;
	__u32 addr = base + cfi_build_cmd_addr(cmd_addr, CFIDEV_INTERLEAVE, type);
    1208:	e022329c 	mla	r2, r12, r2, r3
    120c:	0a00048d 	beq	2448 <cfi_amdstd_write+0xae8>
    1210:	e3500002 	cmp	r0, #2	; 0x2
    1214:	1a000489 	bne	2440 <cfi_amdstd_write+0xae0>
    1218:	e35c0001 	cmp	r12, #1	; 0x1
    121c:	0a00048d 	beq	2458 <cfi_amdstd_write+0xaf8>
    1220:	e59f31b0 	ldr	r3, [pc, #1b0]	; 13d8 <do_write_oneword+0x3d4>
    1224:	e35c0002 	cmp	r12, #2	; 0x2
    1228:	ea000494 	b	2480 <cfi_amdstd_write+0xb20>
    122c:	e3500004 	cmp	r0, #4	; 0x4
    1230:	1a000495 	bne	248c <cfi_amdstd_write+0xb2c>
    1234:	e35c0001 	cmp	r12, #1	; 0x1
    1238:	1a00048f 	bne	247c <cfi_amdstd_write+0xb1c>
    123c:	e3a010aa 	mov	r1, #170	; 0xaa
    1240:	ea000495 	b	249c <cfi_amdstd_write+0xb3c>
    1244:	e35c0002 	cmp	r12, #2	; 0x2
    1248:	059f118c 	ldreq	r1, [pc, #18c]	; 13dc <do_write_oneword+0x3d8>
    124c:	0a000495 	beq	24a8 <cfi_amdstd_write+0xb48>
    1250:	e59f3188 	ldr	r3, [pc, #188]	; 13e0 <do_write_oneword+0x3dc>
    1254:	e35c0004 	cmp	r12, #4	; 0x4
    1258:	01a01003 	moveq	r1, r3
    125c:	e5963008 	ldr	r3, [r6, #8]
    1260:	e3530001 	cmp	r3, #1	; 0x1
    1264:	1a00049d 	bne	24e0 <cfi_amdstd_write+0xb80>
    1268:	e1a00006 	mov	r0, r6
    126c:	e20110ff 	and	r1, r1, #255	; 0xff
    1270:	e1a0e00f 	mov	lr, pc
    1274:	e596f01c 	ldr	pc, [r6, #28]
    1278:	ea0004aa 	b	2528 <cfi_amdstd_write+0xbc8>
    127c:	e3530002 	cmp	r3, #2	; 0x2
    1280:	1a0004a5 	bne	251c <cfi_amdstd_write+0xbbc>
    1284:	e1a00006 	mov	r0, r6
    1288:	e1a01801 	mov	r1, r1, lsl #16
    128c:	e1a01821 	mov	r1, r1, lsr #16
    1290:	e1a0e00f 	mov	lr, pc
    1294:	e596f020 	ldr	pc, [r6, #32]
    1298:	ea0004aa 	b	2548 <cfi_amdstd_write+0xbe8>
    129c:	e3530004 	cmp	r3, #4	; 0x4
    12a0:	1a0004aa 	bne	2550 <cfi_amdstd_write+0xbf0>
    12a4:	e1a00006 	mov	r0, r6
    12a8:	e1a0e00f 	mov	lr, pc
    12ac:	e596f024 	ldr	pc, [r6, #36]
    12b0:	e3a0c000 	mov	r12, #0	; 0x0
    12b4:	e51b1060 	ldr	r1, [r11, -#96]
    12b8:	e5993000 	ldr	r3, [r9]
    12bc:	e51be060 	ldr	lr, [r11, -#96]
    12c0:	e5912018 	ldr	r2, [r1, #24]
    12c4:	e5961008 	ldr	r1, [r6, #8]
    12c8:	e59e0008 	ldr	r0, [lr, #8]
    12cc:	e3510001 	cmp	r1, #1	; 0x1
    12d0:	e0223290 	mla	r2, r0, r2, r3
    12d4:	0a0004bf 	beq	25d8 <cfi_amdstd_write+0xc78>
    12d8:	e3510002 	cmp	r1, #2	; 0x2
    12dc:	1a0004bb 	bne	25d0 <cfi_amdstd_write+0xc70>
    12e0:	e3500001 	cmp	r0, #1	; 0x1
    12e4:	0a0004bf 	beq	25e8 <cfi_amdstd_write+0xc88>
    12e8:	e59f30f4 	ldr	r3, [pc, #f4]	; 13e4 <do_write_oneword+0x3e0>
    12ec:	e3500002 	cmp	r0, #2	; 0x2
    12f0:	ea0004c6 	b	2610 <cfi_amdstd_write+0xcb0>
    12f4:	e3510004 	cmp	r1, #4	; 0x4
    12f8:	1a0004c8 	bne	2620 <cfi_amdstd_write+0xcc0>
    12fc:	e3500001 	cmp	r0, #1	; 0x1
    1300:	1a0004c1 	bne	260c <cfi_amdstd_write+0xcac>
    1304:	e3a0c055 	mov	r12, #85	; 0x55
    1308:	ea0004c8 	b	2630 <cfi_amdstd_write+0xcd0>
    130c:	e3500002 	cmp	r0, #2	; 0x2
    1310:	059fc0d0 	ldreq	r12, [pc, #d0]	; 13e8 <do_write_oneword+0x3e4>
    1314:	0a0004c8 	beq	263c <cfi_amdstd_write+0xcdc>
    1318:	e59f30cc 	ldr	r3, [pc, #cc]	; 13ec <do_write_oneword+0x3e8>
    131c:	e3500004 	cmp	r0, #4	; 0x4
    1320:	01a0c003 	moveq	r12, r3
    1324:	13a0c000 	movne	r12, #0	; 0x0
    1328:	e5963008 	ldr	r3, [r6, #8]
    132c:	e3530001 	cmp	r3, #1	; 0x1
    1330:	1a0004d0 	bne	2678 <cfi_amdstd_write+0xd18>
    1334:	e1a00006 	mov	r0, r6
    1338:	e20c1055 	and	r1, r12, #85	; 0x55
    133c:	e1a0e00f 	mov	lr, pc
    1340:	e596f01c 	ldr	pc, [r6, #28]
    1344:	ea0004de 	b	26c4 <cfi_amdstd_erase_varsize+0x10>
    1348:	e3530002 	cmp	r3, #2	; 0x2
    134c:	1a0004d8 	bne	26b4 <cfi_amdstd_erase_varsize>
    1350:	e59f108c 	ldr	r1, [pc, #8c]	; 13e4 <do_write_oneword+0x3e0>
    1354:	e1a00006 	mov	r0, r6
    1358:	e00c1001 	and	r1, r12, r1
    135c:	e1a0e00f 	mov	lr, pc
    1360:	e596f020 	ldr	pc, [r6, #32]
    1364:	ea0004de 	b	26e4 <cfi_amdstd_erase_varsize+0x30>
    1368:	e3530004 	cmp	r3, #4	; 0x4
    136c:	1a0004de 	bne	26ec <cfi_amdstd_erase_varsize+0x38>
    1370:	e1a00006 	mov	r0, r6
    1374:	e1a0100c 	mov	r1, r12
    1378:	e1a0e00f 	mov	lr, pc
    137c:	e596f024 	ldr	pc, [r6, #36]
    1380:	e3a0c000 	mov	r12, #0	; 0x0
    1384:	e51b1060 	ldr	r1, [r11, -#96]
    1388:	e5993000 	ldr	r3, [r9]
    138c:	e51be060 	ldr	lr, [r11, -#96]
    1390:	e5912014 	ldr	r2, [r1, #20]
    1394:	e5961008 	ldr	r1, [r6, #8]
    1398:	e59e0008 	ldr	r0, [lr, #8]
    139c:	e3510001 	cmp	r1, #1	; 0x1
    13a0:	e0223290 	mla	r2, r0, r2, r3
    13a4:	0a0004fe 	beq	27a4 <cfi_amdstd_erase_varsize+0xf0>
    13a8:	e3510002 	cmp	r1, #2	; 0x2
    13ac:	1a0004fa 	bne	279c <cfi_amdstd_erase_varsize+0xe8>
    13b0:	e3500001 	cmp	r0, #1	; 0x1
    13b4:	0a0004fe 	beq	27b4 <cfi_amdstd_erase_varsize+0x100>
    13b8:	e59f300c 	ldr	r3, [pc, #c]	; 13cc <do_write_oneword+0x3c8>
    13bc:	e3500002 	cmp	r0, #2	; 0x2
    13c0:	ea000505 	b	27dc <cfi_amdstd_erase_varsize+0x128>
	...
    13cc:	0000a0a0 	andeq	r10, r0, r0, lsr #1
    13d0:	00a000a0 	adceq	r0, r0, r0, lsr #1
    13d4:	a0a0a0a0 	adcge	r10, r0, r0, lsr #1
    13d8:	0000aaaa 	andeq	r10, r0, r10, lsr #21
    13dc:	00aa00aa 	adceq	r0, r10, r10, lsr #1
    13e0:	aaaaaaaa 	bge	feaabe90 <cfi_amdstd_destroy+0xfeaa7d60>
    13e4:	00005555 	andeq	r5, r0, r5, asr r5
    13e8:	00550055 	subeqs	r0, r5, r5, asr r0
    13ec:	55555555 	ldrplb	r5, [r5, -#1365]
    13f0:	e3510004 	cmp	r1, #4	; 0x4
    13f4:	1a000507 	bne	2818 <cfi_amdstd_erase_varsize+0x164>
    13f8:	e3500001 	cmp	r0, #1	; 0x1
    13fc:	1a000500 	bne	2804 <cfi_amdstd_erase_varsize+0x150>
    1400:	e3a0c0a0 	mov	r12, #160	; 0xa0
    1404:	ea000507 	b	2828 <cfi_amdstd_erase_varsize+0x174>
    1408:	e3500002 	cmp	r0, #2	; 0x2
    140c:	059fc360 	ldreq	r12, [pc, #360]	; 1774 <do_write_oneword+0x770>
    1410:	0a000507 	beq	2834 <cfi_amdstd_erase_varsize+0x180>
    1414:	e59f335c 	ldr	r3, [pc, #35c]	; 1778 <do_write_oneword+0x774>
    1418:	e3500004 	cmp	r0, #4	; 0x4
    141c:	01a0c003 	moveq	r12, r3
    1420:	13a0c000 	movne	r12, #0	; 0x0
    1424:	e5963008 	ldr	r3, [r6, #8]
    1428:	e3530001 	cmp	r3, #1	; 0x1
    142c:	1a00050f 	bne	2870 <cfi_amdstd_erase_varsize+0x1bc>
    1430:	e1a00006 	mov	r0, r6
    1434:	e20c10a0 	and	r1, r12, #160	; 0xa0
    1438:	e1a0e00f 	mov	lr, pc
    143c:	e596f01c 	ldr	pc, [r6, #28]
    1440:	ea00051d 	b	28bc <cfi_amdstd_erase_varsize+0x208>
    1444:	e3530002 	cmp	r3, #2	; 0x2
    1448:	1a000517 	bne	28ac <cfi_amdstd_erase_varsize+0x1f8>
    144c:	e59f1328 	ldr	r1, [pc, #328]	; 177c <do_write_oneword+0x778>
    1450:	e1a00006 	mov	r0, r6
    1454:	e00c1001 	and	r1, r12, r1
    1458:	e1a0e00f 	mov	lr, pc
    145c:	e596f020 	ldr	pc, [r6, #32]
    1460:	ea00051d 	b	28dc <cfi_amdstd_erase_varsize+0x228>
    1464:	e3530004 	cmp	r3, #4	; 0x4
    1468:	1a00051d 	bne	28e4 <cfi_amdstd_erase_varsize+0x230>
    146c:	e1a00006 	mov	r0, r6
    1470:	e1a0100c 	mov	r1, r12
    1474:	e1a0e00f 	mov	lr, pc
    1478:	e596f024 	ldr	pc, [r6, #36]
    147c:	e5963008 	ldr	r3, [r6, #8]
    1480:	e3530001 	cmp	r3, #1	; 0x1
    1484:	1a000527 	bne	2928 <cfi_amdstd_erase_varsize+0x274>
    1488:	e51b205c 	ldr	r2, [r11, -#92]
    148c:	e1a00006 	mov	r0, r6
    1490:	e20210ff 	and	r1, r2, #255	; 0xff
    1494:	e1a02008 	mov	r2, r8
    1498:	e1a0e00f 	mov	lr, pc
    149c:	e596f01c 	ldr	pc, [r6, #28]
    14a0:	ea000538 	b	2988 <cfi_amdstd_erase_varsize+0x2d4>
    14a4:	e3530002 	cmp	r3, #2	; 0x2
    14a8:	1a000531 	bne	2974 <cfi_amdstd_erase_varsize+0x2c0>
    14ac:	e1a00006 	mov	r0, r6
    14b0:	e51b305c 	ldr	r3, [r11, -#92]
    14b4:	e1a02008 	mov	r2, r8
    14b8:	e1a01803 	mov	r1, r3, lsl #16
    14bc:	e1a01821 	mov	r1, r1, lsr #16
    14c0:	e1a0e00f 	mov	lr, pc
    14c4:	e596f020 	ldr	pc, [r6, #32]
    14c8:	ea000538 	b	29b0 <cfi_amdstd_erase_varsize+0x2fc>
    14cc:	e3530004 	cmp	r3, #4	; 0x4
    14d0:	1a000538 	bne	29b8 <cfi_amdstd_erase_varsize+0x304>
    14d4:	e1a00006 	mov	r0, r6
    14d8:	e51b105c 	ldr	r1, [r11, -#92]
    14dc:	e1a02008 	mov	r2, r8
    14e0:	e1a0e00f 	mov	lr, pc
    14e4:	e596f024 	ldr	pc, [r6, #36]

	val = cfi_build_cmd(cmd, map, cfi);

	if (prev_val)
		*prev_val = cfi_read(map, addr);

	cfi_write(map, val, addr);

	return addr - base;
}

static inline __u8 cfi_read_query(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return cfi16_to_cpu(map->read16(map, addr));
	} else if (cfi_buswidth_is_4()) {
		return cfi32_to_cpu(map->read32(map, addr));
	} else {
		return 0;
	}
}

static inline void cfi_udelay(int us)
{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
	if (current->need_resched) {
		unsigned long t = us * HZ / 1000000;
		if (t < 1)
			t = 1;
		set_current_state(TASK_UNINTERRUPTIBLE);
		schedule_timeout(t);
	}
	else
#endif
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    14e8:	e5943000 	ldr	r3, [r4]
    14ec:	e2433001 	sub	r3, r3, #1	; 0x1
    14f0:	e3530000 	cmp	r3, #0	; 0x0
    14f4:	e5843000 	str	r3, [r4]
    14f8:	1a000541 	bne	2a04 <cfi_amdstd_erase_varsize+0x350>
    14fc:	e5143008 	ldr	r3, [r4, -#8]
    1500:	e3530000 	cmp	r3, #0	; 0x0
    1504:	0a000541 	beq	2a10 <cfi_amdstd_erase_varsize+0x35c>
    1508:	ebfffffe 	bl	1508 <do_write_oneword+0x504>
    150c:	e51be06c 	ldr	lr, [r11, -#108]
    1510:	e59e3014 	ldr	r3, [lr, #20]
    1514:	e5990020 	ldr	r0, [r9, #32]
    1518:	e3530000 	cmp	r3, #0	; 0x0
    151c:	0a00054f 	beq	2a60 <cfi_amdstd_erase_varsize+0x3ac>
    1520:	e59f3258 	ldr	r3, [pc, #258]	; 1780 <do_write_oneword+0x77c>
    1524:	e0c21093 	smull	r1, r2, r3, r0
    1528:	e1a00fc0 	mov	r0, r0, asr #31
    152c:	e0700642 	rsbs	r0, r0, r2, asr #12
    1530:	e3a03002 	mov	r3, #2	; 0x2
    1534:	e58e3000 	str	r3, [lr]
    1538:	03a00001 	moveq	r0, #1	; 0x1
    153c:	ebfffffe 	bl	153c <do_write_oneword+0x538>
    1540:	ea000550 	b	2a88 <cfi_amdstd_erase_varsize+0x3d4>
    1544:	ebfffffe 	bl	1544 <do_write_oneword+0x540>
    1548:	e59a3008 	ldr	r3, [r10, #8]
    154c:	e2833001 	add	r3, r3, #1	; 0x1
    1550:	e58a3008 	str	r3, [r10, #8]
    1554:	e5963008 	ldr	r3, [r6, #8]
    1558:	e3530001 	cmp	r3, #1	; 0x1
    155c:	1a00055c 	bne	2ad4 <cfi_amdstd_erase_varsize+0x420>
    1560:	e1a00006 	mov	r0, r6
    1564:	e1a01008 	mov	r1, r8
    1568:	e1a0e00f 	mov	lr, pc
    156c:	e596f00c 	ldr	pc, [r6, #12]
    1570:	e20000ff 	and	r0, r0, #255	; 0xff
    1574:	ea00056d 	b	2b30 <cfi_amdstd_erase_varsize+0x47c>
    1578:	e3530002 	cmp	r3, #2	; 0x2
    157c:	1a000565 	bne	2b18 <cfi_amdstd_erase_varsize+0x464>
    1580:	e1a00006 	mov	r0, r6
    1584:	e1a01008 	mov	r1, r8
    1588:	e1a0e00f 	mov	lr, pc
    158c:	e596f010 	ldr	pc, [r6, #16]
    1590:	e1a00800 	mov	r0, r0, lsl #16
    1594:	e1a00820 	mov	r0, r0, lsr #16
    1598:	ea00056d 	b	2b54 <cfi_amdstd_erase_varsize+0x4a0>
    159c:	e3530004 	cmp	r3, #4	; 0x4
    15a0:	1a00056c 	bne	2b58 <cfi_amdstd_erase_varsize+0x4a4>
    15a4:	e1a00006 	mov	r0, r6
    15a8:	e1a01008 	mov	r1, r8
    15ac:	e1a0e00f 	mov	lr, pc
    15b0:	e596f014 	ldr	pc, [r6, #20]
    15b4:	ea00056d 	b	2b70 <cfi_amdstd_erase_varsize+0x4bc>
    15b8:	e3a00000 	mov	r0, #0	; 0x0
    15bc:	e5963008 	ldr	r3, [r6, #8]
    15c0:	e50b0038 	str	r0, [r11, -#56]
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
    15c4:	e3530001 	cmp	r3, #1	; 0x1
    15c8:	1a000577 	bne	2bac <cfi_amdstd_erase_varsize+0x4f8>
		return map->read8(map, addr);
    15cc:	e1a00006 	mov	r0, r6
    15d0:	e1a01008 	mov	r1, r8
    15d4:	e1a0e00f 	mov	lr, pc
    15d8:	e596f00c 	ldr	pc, [r6, #12]
    15dc:	e20000ff 	and	r0, r0, #255	; 0xff
    15e0:	ea000588 	b	2c08 <cfi_amdstd_erase_varsize+0x554>
	} else if (cfi_buswidth_is_2()) {
    15e4:	e3530002 	cmp	r3, #2	; 0x2
    15e8:	1a000580 	bne	2bf0 <cfi_amdstd_erase_varsize+0x53c>
		return map->read16(map, addr);
    15ec:	e1a00006 	mov	r0, r6
    15f0:	e1a01008 	mov	r1, r8
    15f4:	e1a0e00f 	mov	lr, pc
    15f8:	e596f010 	ldr	pc, [r6, #16]
    15fc:	e1a00800 	mov	r0, r0, lsl #16
    1600:	e1a00820 	mov	r0, r0, lsr #16
    1604:	ea000588 	b	2c2c <cfi_amdstd_erase_varsize+0x578>
	} else if (cfi_buswidth_is_4()) {
    1608:	e3530004 	cmp	r3, #4	; 0x4
    160c:	1a000587 	bne	2c30 <cfi_amdstd_erase_varsize+0x57c>
		return map->read32(map, addr);
    1610:	e1a00006 	mov	r0, r6
    1614:	e1a01008 	mov	r1, r8
    1618:	e1a0e00f 	mov	lr, pc
    161c:	e596f014 	ldr	pc, [r6, #20]
    1620:	ea000588 	b	2c48 <cfi_amdstd_erase_varsize+0x594>
	} else {
		return 0;
    1624:	e3a00000 	mov	r0, #0	; 0x0
    1628:	e5963008 	ldr	r3, [r6, #8]
    162c:	e50b0034 	str	r0, [r11, -#52]
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
    1630:	e3530001 	cmp	r3, #1	; 0x1
    1634:	1a000592 	bne	2c84 <cfi_amdstd_erase_varsize+0x5d0>
		return map->read8(map, addr);
    1638:	e1a00006 	mov	r0, r6
    163c:	e1a01008 	mov	r1, r8
    1640:	e1a0e00f 	mov	lr, pc
    1644:	e596f00c 	ldr	pc, [r6, #12]
    1648:	e20000ff 	and	r0, r0, #255	; 0xff
    164c:	ea0005a3 	b	2ce0 <cfi_amdstd_erase_varsize+0x62c>
	} else if (cfi_buswidth_is_2()) {
    1650:	e3530002 	cmp	r3, #2	; 0x2
    1654:	1a00059b 	bne	2cc8 <cfi_amdstd_erase_varsize+0x614>
		return map->read16(map, addr);
    1658:	e1a00006 	mov	r0, r6
    165c:	e1a01008 	mov	r1, r8
    1660:	e1a0e00f 	mov	lr, pc
    1664:	e596f010 	ldr	pc, [r6, #16]
    1668:	e1a00800 	mov	r0, r0, lsl #16
    166c:	e1a00820 	mov	r0, r0, lsr #16
    1670:	ea0005a3 	b	2d04 <cfi_amdstd_erase_varsize+0x650>
	} else if (cfi_buswidth_is_4()) {
    1674:	e3530004 	cmp	r3, #4	; 0x4
    1678:	1a0005a2 	bne	2d08 <cfi_amdstd_erase_varsize+0x654>
		return map->read32(map, addr);
    167c:	e1a00006 	mov	r0, r6
    1680:	e1a01008 	mov	r1, r8
    1684:	e1a0e00f 	mov	lr, pc
    1688:	e596f014 	ldr	pc, [r6, #20]
    168c:	ea0005a3 	b	2d20 <cfi_amdstd_erase_varsize+0x66c>
	} else {
		return 0;
    1690:	e3a00000 	mov	r0, #0	; 0x0
    1694:	e3a07003 	mov	r7, #3	; 0x3
    1698:	e51b205c 	ldr	r2, [r11, -#92]
    169c:	e2893014 	add	r3, r9, #20	; 0x14
    16a0:	e50b0030 	str	r0, [r11, -#48]
    16a4:	e50b3068 	str	r3, [r11, -#104]
    16a8:	e1500002 	cmp	r0, r2
    16ac:	0a0005ef 	beq	2e70 <cfi_amdstd_erase_varsize+0x7bc>
    16b0:	e24b5038 	sub	r5, r11, #56	; 0x38
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    16b4:	e5943000 	ldr	r3, [r4]
    16b8:	e2433001 	sub	r3, r3, #1	; 0x1
    16bc:	e3530000 	cmp	r3, #0	; 0x0
    16c0:	e5843000 	str	r3, [r4]
    16c4:	1a0005b4 	bne	2d9c <cfi_amdstd_erase_varsize+0x6e8>
    16c8:	e5143008 	ldr	r3, [r4, -#8]
    16cc:	e3530000 	cmp	r3, #0	; 0x0
    16d0:	0a0005b4 	beq	2da8 <cfi_amdstd_erase_varsize+0x6f4>
    16d4:	ebfffffe 	bl	16d4 <do_write_oneword+0x6d0>
    16d8:	e51be06c 	ldr	lr, [r11, -#108]
    16dc:	e59e3014 	ldr	r3, [lr, #20]
    16e0:	e3530000 	cmp	r3, #0	; 0x0
    16e4:	0a0005bd 	beq	2de0 <cfi_amdstd_erase_varsize+0x72c>
    16e8:	e3a03002 	mov	r3, #2	; 0x2
    16ec:	e58e3000 	str	r3, [lr]
    16f0:	e3a00001 	mov	r0, #1	; 0x1
    16f4:	ebfffffe 	bl	16f4 <do_write_oneword+0x6f0>
    16f8:	ea0005bf 	b	2dfc <cfi_amdstd_erase_varsize+0x748>
    16fc:	e3a0000a 	mov	r0, #10	; 0xa
    1700:	ebfffffe 	bl	1700 <do_write_oneword+0x6fc>
    1704:	e59a3008 	ldr	r3, [r10, #8]
    1708:	e2833001 	add	r3, r3, #1	; 0x1
    170c:	e58a3008 	str	r3, [r10, #8]
    1710:	e5963008 	ldr	r3, [r6, #8]
    1714:	e3530001 	cmp	r3, #1	; 0x1
    1718:	1a0005cb 	bne	2e4c <cfi_amdstd_erase_varsize+0x798>
    171c:	e1a00006 	mov	r0, r6
    1720:	e1a01008 	mov	r1, r8
    1724:	e1a0e00f 	mov	lr, pc
    1728:	e596f00c 	ldr	pc, [r6, #12]
    172c:	e20000ff 	and	r0, r0, #255	; 0xff
    1730:	ea0005e0 	b	2eb8 <cfi_amdstd_erase_varsize+0x804>
    1734:	e3530002 	cmp	r3, #2	; 0x2
    1738:	1a0005d4 	bne	2e90 <cfi_amdstd_erase_varsize+0x7dc>
    173c:	e1a00006 	mov	r0, r6
    1740:	e1a01008 	mov	r1, r8
    1744:	e1a0e00f 	mov	lr, pc
    1748:	e596f010 	ldr	pc, [r6, #16]
    174c:	e1a00800 	mov	r0, r0, lsl #16
    1750:	e1a00820 	mov	r0, r0, lsr #16
    1754:	ea0005e0 	b	2edc <cfi_amdstd_erase_varsize+0x828>
    1758:	e3530004 	cmp	r3, #4	; 0x4
    175c:	1a0005df 	bne	2ee0 <cfi_amdstd_erase_varsize+0x82c>
    1760:	e1a00006 	mov	r0, r6
    1764:	e1a01008 	mov	r1, r8
    1768:	e1a0e00f 	mov	lr, pc
    176c:	e596f014 	ldr	pc, [r6, #20]
    1770:	ea0005e0 	b	2ef8 <cfi_amdstd_erase_varsize+0x844>
    1774:	00a000a0 	adceq	r0, r0, r0, lsr #1
    1778:	a0a0a0a0 	adcge	r10, r0, r0, lsr #1
    177c:	0000a0a0 	andeq	r10, r0, r0, lsr #1
    1780:	68db8bad 	ldmvsia	r11, {r0, r2, r3, r5, r7, r8, r9, r11, pc}^
    1784:	e3a00000 	mov	r0, #0	; 0x0
    1788:	e2073003 	and	r3, r7, #3	; 0x3
    178c:	e2877001 	add	r7, r7, #1	; 0x1
    1790:	e2472001 	sub	r2, r7, #1	; 0x1
    1794:	e2022003 	and	r2, r2, #3	; 0x3
    1798:	e7850103 	str	r0, [r5, r3, lsl #2]
    179c:	e59f3108 	ldr	r3, [pc, #108]	; 18ac <do_write_oneword+0x8a8>
    17a0:	e7951102 	ldr	r1, [r5, r2, lsl #2]
    17a4:	e51b205c 	ldr	r2, [r11, -#92]
    17a8:	e1570003 	cmp	r7, r3
    17ac:	83a03000 	movhi	r3, #0	; 0x0
    17b0:	93a03001 	movls	r3, #1	; 0x1
    17b4:	e1510002 	cmp	r1, r2
    17b8:	03a03000 	moveq	r3, #0	; 0x0
    17bc:	e3530000 	cmp	r3, #0	; 0x0
    17c0:	1a0005ab 	bne	2e74 <cfi_amdstd_erase_varsize+0x7c0>
    17c4:	e59f30e0 	ldr	r3, [pc, #e0]	; 18ac <do_write_oneword+0x8a8>
    17c8:	e1570003 	cmp	r7, r3
    17cc:	9a00063e 	bls	30cc <cfi_amdstd_erase_varsize+0xa18>
    17d0:	e59f00d8 	ldr	r0, [pc, #d8]	; 18b0 <do_write_oneword+0x8ac>
    17d4:	e1a01007 	mov	r1, r7
    17d8:	ebfffffe 	bl	17d8 <do_write_oneword+0x7d4>
    17dc:	e2471001 	sub	r1, r7, #1	; 0x1
    17e0:	e2011003 	and	r1, r1, #3	; 0x3
    17e4:	e24b3038 	sub	r3, r11, #56	; 0x38
    17e8:	e59f00c4 	ldr	r0, [pc, #c4]	; 18b4 <do_write_oneword+0x8b0>
    17ec:	e7932101 	ldr	r2, [r3, r1, lsl #2]
    17f0:	e51b305c 	ldr	r3, [r11, -#92]
    17f4:	ebfffffe 	bl	17f4 <do_write_oneword+0x7f0>
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    17f8:	e3a0c000 	mov	r12, #0	; 0x0
    17fc:	e5963008 	ldr	r3, [r6, #8]
    1800:	e5992000 	ldr	r2, [r9]
    1804:	e3530001 	cmp	r3, #1	; 0x1
    1808:	0a000610 	beq	3050 <cfi_amdstd_erase_varsize+0x99c>
    180c:	e3530002 	cmp	r3, #2	; 0x2
    1810:	1a00060a 	bne	3040 <cfi_amdstd_erase_varsize+0x98c>
    1814:	e51b3060 	ldr	r3, [r11, -#96]
    1818:	e5931008 	ldr	r1, [r3, #8]
    181c:	e3510001 	cmp	r1, #1	; 0x1
    1820:	0a000610 	beq	3068 <cfi_amdstd_erase_varsize+0x9b4>
    1824:	e59f308c 	ldr	r3, [pc, #8c]	; 18b8 <do_write_oneword+0x8b4>
    1828:	e3510002 	cmp	r1, #2	; 0x2
    182c:	ea000617 	b	3090 <cfi_amdstd_erase_varsize+0x9dc>
    1830:	e3530004 	cmp	r3, #4	; 0x4
    1834:	1a000619 	bne	30a0 <cfi_amdstd_erase_varsize+0x9ec>
    1838:	e51be060 	ldr	lr, [r11, -#96]
    183c:	e59e1008 	ldr	r1, [lr, #8]
    1840:	e3510001 	cmp	r1, #1	; 0x1
    1844:	1a000612 	bne	3094 <cfi_amdstd_erase_varsize+0x9e0>
    1848:	e3a0c0f0 	mov	r12, #240	; 0xf0
    184c:	ea000619 	b	30b8 <cfi_amdstd_erase_varsize+0xa04>
    1850:	e3510002 	cmp	r1, #2	; 0x2
    1854:	059fc060 	ldreq	r12, [pc, #60]	; 18bc <do_write_oneword+0x8b8>
    1858:	0a000619 	beq	30c4 <cfi_amdstd_erase_varsize+0xa10>
    185c:	e59f305c 	ldr	r3, [pc, #5c]	; 18c0 <do_write_oneword+0x8bc>
    1860:	e3510004 	cmp	r1, #4	; 0x4
    1864:	01a0c003 	moveq	r12, r3
    1868:	13a0c000 	movne	r12, #0	; 0x0
    186c:	e5963008 	ldr	r3, [r6, #8]
    1870:	e3530001 	cmp	r3, #1	; 0x1
    1874:	1a000621 	bne	3100 <cfi_amdstd_erase_varsize+0xa4c>
    1878:	e1a00006 	mov	r0, r6
    187c:	e20c10f0 	and	r1, r12, #240	; 0xf0
    1880:	e1a0e00f 	mov	lr, pc
    1884:	e596f01c 	ldr	pc, [r6, #28]
    1888:	ea000635 	b	3164 <cfi_amdstd_erase_varsize+0xab0>
    188c:	e3530002 	cmp	r3, #2	; 0x2
    1890:	1a00062f 	bne	3154 <cfi_amdstd_erase_varsize+0xaa0>
    1894:	e59f101c 	ldr	r1, [pc, #1c]	; 18b8 <do_write_oneword+0x8b4>
    1898:	e1a00006 	mov	r0, r6
    189c:	e00c1001 	and	r1, r12, r1
    18a0:	e1a0e00f 	mov	lr, pc
    18a4:	e596f020 	ldr	pc, [r6, #32]
    18a8:	ea000635 	b	3184 <cfi_amdstd_erase_varsize+0xad0>
    18ac:	0007a11f 	andeq	r10, r7, pc, lsl r1
    18b0:	000001e8 	andeq	r0, r0, r8, ror #3
    18b4:	000001f4 	streqsh	r0, [r0], -r4
    18b8:	0000f0f0 	streqsh	pc, [r0], -r0
    18bc:	00f000f0 	ldreqsh	r0, [r0]
    18c0:	f0f0f0f0 	ldrnvsh	pc, [r0]
    18c4:	e3530004 	cmp	r3, #4	; 0x4
    18c8:	1a000635 	bne	31a4 <cfi_amdstd_erase_varsize+0xaf0>
    18cc:	e1a00006 	mov	r0, r6
    18d0:	e1a0100c 	mov	r1, r12
    18d4:	e1a0e00f 	mov	lr, pc
    18d8:	e596f024 	ldr	pc, [r6, #36]
    18dc:	e596302c 	ldr	r3, [r6, #44]
    18e0:	e3530000 	cmp	r3, #0	; 0x0
    18e4:	0a00063c 	beq	31dc <cfi_amdstd_erase_varsize+0xb28>
    18e8:	e1a00006 	mov	r0, r6
    18ec:	e3a01000 	mov	r1, #0	; 0x0
    18f0:	e1a0e00f 	mov	lr, pc
    18f4:	e1a0f003 	mov	pc, r3
    18f8:	e3e01004 	mvn	r1, #4	; 0x4
    18fc:	e50b1064 	str	r1, [r11, -#100]
    1900:	e596302c 	ldr	r3, [r6, #44]
    1904:	e3530000 	cmp	r3, #0	; 0x0
    1908:	0a000645 	beq	3224 <cfi_amdstd_erase_varsize+0xb70>
    190c:	e1a00006 	mov	r0, r6
    1910:	e3a01000 	mov	r1, #0	; 0x0
    1914:	e1a0e00f 	mov	lr, pc
    1918:	e1a0f003 	mov	pc, r3
    191c:	e3a01003 	mov	r1, #3	; 0x3
    1920:	e3a02001 	mov	r2, #1	; 0x1
    1924:	e51b0068 	ldr	r0, [r11, -#104]
    1928:	e3a03000 	mov	r3, #0	; 0x0
    192c:	e5893004 	str	r3, [r9, #4]
    1930:	ebfffffe 	bl	1930 <do_write_oneword+0x92c>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    1934:	e5943000 	ldr	r3, [r4]
    1938:	e2433001 	sub	r3, r3, #1	; 0x1
    193c:	e3530000 	cmp	r3, #0	; 0x0
    1940:	e5843000 	str	r3, [r4]
    1944:	1a000654 	bne	329c <cfi_amdstd_erase_onesize+0x40>
    1948:	e5143008 	ldr	r3, [r4, -#8]
    194c:	e3530000 	cmp	r3, #0	; 0x0
    1950:	0a000654 	beq	32a8 <cfi_amdstd_erase_onesize+0x4c>
    1954:	ebfffffe 	bl	1954 <do_write_oneword+0x950>
    1958:	e51b0064 	ldr	r0, [r11, -#100]
    195c:	e91baff0 	ldmdb	r11, {r4, r5, r6, r7, r8, r9, r10, r11, sp, pc}

00001960 <cfi_amdstd_write>:
    1960:	e1a0c00d 	mov	r12, sp
    1964:	e92ddff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1968:	e24cb004 	sub	r11, r12, #4	; 0x4
    196c:	e3a0c000 	mov	r12, #0	; 0x0
    1970:	e3530000 	cmp	r3, #0	; 0x0
    1974:	e24dd020 	sub	sp, sp, #32	; 0x20
    1978:	e50bc038 	str	r12, [r11, -#56]
    197c:	e5905078 	ldr	r5, [r0, #120]
    1980:	e59be004 	ldr	lr, [r11, #4]
    1984:	e5958038 	ldr	r8, [r5, #56]
    1988:	e1a07002 	mov	r7, r2
    198c:	e1a06001 	mov	r6, r1
    1990:	e50b3034 	str	r3, [r11, -#52]
    1994:	e58ec000 	str	r12, [lr]
    1998:	0a0009a9 	beq	4044 <cfi_amdstd_resume+0x98>
    199c:	e5984034 	ldr	r4, [r8, #52]
    19a0:	e1a01007 	mov	r1, r7
    19a4:	e1a00006 	mov	r0, r6
    19a8:	e1a02004 	mov	r2, r4
    19ac:	ebfffffe 	bl	19ac <cfi_amdstd_write+0x4c>
    19b0:	e50b003c 	str	r0, [r11, -#60]
    19b4:	e0466410 	sub	r6, r6, r0, lsl r4
    19b8:	e0803100 	add	r3, r0, r0, lsl #2
    19bc:	e0803083 	add	r3, r0, r3, lsl #1
    19c0:	e288203c 	add	r2, r8, #60	; 0x3c
    19c4:	e50b6040 	str	r6, [r11, -#64]
    19c8:	e595c008 	ldr	r12, [r5, #8]
    19cc:	e792a103 	ldr	r10, [r2, r3, lsl #2]
    19d0:	e50b2044 	str	r2, [r11, -#68]
    19d4:	e24c3001 	sub	r3, r12, #1	; 0x1
    19d8:	e1160003 	tst	r6, r3
    19dc:	0a0006ba 	beq	34cc <cfi_amdstd_erase_onesize+0x270>
    19e0:	e1c69003 	bic	r9, r6, r3
    19e4:	e0694006 	rsb	r4, r9, r6
    19e8:	e1a00005 	mov	r0, r5
    19ec:	e24b702c 	sub	r7, r11, #44	; 0x2c
    19f0:	e1a01007 	mov	r1, r7
    19f4:	e089200a 	add	r2, r9, r10
    19f8:	e1a0300c 	mov	r3, r12
    19fc:	e1a0e00f 	mov	lr, pc
    1a00:	e595f018 	ldr	pc, [r5, #24]
    1a04:	e5953008 	ldr	r3, [r5, #8]
    1a08:	e51b6038 	ldr	r6, [r11, -#56]
    1a0c:	e1540003 	cmp	r4, r3
    1a10:	aa000690 	bge	3458 <cfi_amdstd_erase_onesize+0x1fc>
    1a14:	e1a01007 	mov	r1, r7
    1a18:	e59b0008 	ldr	r0, [r11, #8]
    1a1c:	e51b2034 	ldr	r2, [r11, -#52]
    1a20:	e7d03006 	ldrb	r3, [r0, r6]
    1a24:	e2866001 	add	r6, r6, #1	; 0x1
    1a28:	e2522001 	subs	r2, r2, #1	; 0x1
    1a2c:	e50b2034 	str	r2, [r11, -#52]
    1a30:	e7c13004 	strb	r3, [r1, r4]
    1a34:	e2844001 	add	r4, r4, #1	; 0x1
    1a38:	0a000690 	beq	3480 <cfi_amdstd_erase_onesize+0x224>
    1a3c:	e5953008 	ldr	r3, [r5, #8]
    1a40:	e1540003 	cmp	r4, r3
    1a44:	ba000684 	blt	345c <cfi_amdstd_erase_onesize+0x200>
    1a48:	e5953008 	ldr	r3, [r5, #8]
    1a4c:	e3530002 	cmp	r3, #2	; 0x2
    1a50:	015b32bc 	ldreqh	r3, [r11, -#44]
    1a54:	0a000697 	beq	34b8 <cfi_amdstd_erase_onesize+0x25c>
    1a58:	e3530004 	cmp	r3, #4	; 0x4
    1a5c:	1a00099e 	bne	40dc <cfi_amdstd_resume+0x130>
    1a60:	e51b302c 	ldr	r3, [r11, -#44]
    1a64:	e1a00005 	mov	r0, r5
    1a68:	e51bc03c 	ldr	r12, [r11, -#60]
    1a6c:	e1a02009 	mov	r2, r9
    1a70:	e08c110c 	add	r1, r12, r12, lsl #2
    1a74:	e08c1081 	add	r1, r12, r1, lsl #1
    1a78:	e1a01101 	mov	r1, r1, lsl #2
    1a7c:	e281103c 	add	r1, r1, #60	; 0x3c
    1a80:	e0881001 	add	r1, r8, r1
    1a84:	e3a0c000 	mov	r12, #0	; 0x0
    1a88:	e58dc000 	str	r12, [sp]
    1a8c:	eb0003ff 	bl	2a90 <cfi_amdstd_erase_varsize+0x3dc>
    1a90:	e3500000 	cmp	r0, #0	; 0x0
    1a94:	e50b0038 	str	r0, [r11, -#56]
    1a98:	1a0009aa 	bne	4148 <cfi_amdstd_destroy+0x18>
    1a9c:	e59be004 	ldr	lr, [r11, #4]
    1aa0:	e51b0040 	ldr	r0, [r11, -#64]
    1aa4:	e59e3000 	ldr	r3, [lr]
    1aa8:	e0800006 	add	r0, r0, r6
    1aac:	e50b0040 	str	r0, [r11, -#64]
    1ab0:	e0833006 	add	r3, r3, r6
    1ab4:	e58e3000 	str	r3, [lr]
    1ab8:	e59b1008 	ldr	r1, [r11, #8]
    1abc:	e5982034 	ldr	r2, [r8, #52]
    1ac0:	e0811006 	add	r1, r1, r6
    1ac4:	e1b00230 	movs	r0, r0, lsr r2
    1ac8:	e58b1008 	str	r1, [r11, #8]
    1acc:	0a0006ba 	beq	35bc <cfi_amdstd_erase_onesize+0x360>
    1ad0:	e51b203c 	ldr	r2, [r11, -#60]
    1ad4:	e51bc038 	ldr	r12, [r11, -#56]
    1ad8:	e2822001 	add	r2, r2, #1	; 0x1
    1adc:	e50b203c 	str	r2, [r11, -#60]
    1ae0:	e5983030 	ldr	r3, [r8, #48]
    1ae4:	e50bc040 	str	r12, [r11, -#64]
    1ae8:	e1520003 	cmp	r2, r3
    1aec:	0a0009a9 	beq	4198 <cfi_amdstd_destroy+0x68>
    1af0:	e598301c 	ldr	r3, [r8, #28]
    1af4:	e3530000 	cmp	r3, #0	; 0x0
    1af8:	0a000750 	beq	3840 <cfi_amdstd_erase_onesize+0x5e4>
 * Transforms the CFI command for the given geometry (bus width & interleave.
 */
static inline __u32 cfi_build_cmd(u_char cmd, struct map_info *map, struct cfi_private *cfi)
{
	__u32 val = 0;
    1afc:	e3a0c000 	mov	r12, #0	; 0x0

	if (cfi_buswidth_is_1()) {
		/* 1 x8 device */
		val = cmd;
	} else if (cfi_buswidth_is_2()) {
		if (cfi_interleave_is_1()) {
			/* 1 x16 device in x16 mode */
			val = cpu_to_cfi16(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 (x8, x16 or x32) devices in x8 mode */
			val = cpu_to_cfi16((cmd << 8) | cmd);
		}
	} else if (cfi_buswidth_is_4()) {
		if (cfi_interleave_is_1()) {
			/* 1 x32 device in x32 mode */
			val = cpu_to_cfi32(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 x16 device in x16 mode */
			val = cpu_to_cfi32((cmd << 16) | cmd);
		} else if (cfi_interleave_is_4()) {
			/* 4 (x8, x16 or x32) devices in x8 mode */
			val = (cmd << 16) | cmd;
			val = cpu_to_cfi32((val << 8) | val);
		}
	}
	return val;
}
#define CMD(x)  cfi_build_cmd((x), map, cfi)

/*
 * Read a value according to the bus width.
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return map->read16(map, addr);
	} else if (cfi_buswidth_is_4()) {
		return map->read32(map, addr);
	} else {
		return 0;
	}
}

/*
 * Write a value according to the bus width.
 */

static inline void cfi_write(struct map_info *map, __u32 val, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		map->write8(map, val, addr);
	} else if (cfi_buswidth_is_2()) {
		map->write16(map, val, addr);
	} else if (cfi_buswidth_is_4()) {
		map->write32(map, val, addr);
	}
}

/*
 * Sends a CFI command to a bank of flash for the given geometry.
 *
 * Returns the offset in flash where the command was written.
 * If prev_val is non-null, it will be set to the value at the command address,
 * before the command was written.
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    1b00:	e5983014 	ldr	r3, [r8, #20]
    1b04:	e5951008 	ldr	r1, [r5, #8]
    1b08:	e5980008 	ldr	r0, [r8, #8]
    1b0c:	e3510001 	cmp	r1, #1	; 0x1
	__u32 val;
	__u32 addr = base + cfi_build_cmd_addr(cmd_addr, CFIDEV_INTERLEAVE, type);
    1b10:	e022a390 	mla	r2, r0, r3, r10
    1b14:	0a0006cf 	beq	3658 <cfi_amdstd_erase_onesize+0x3fc>
    1b18:	e3510002 	cmp	r1, #2	; 0x2
    1b1c:	1a0006cb 	bne	3650 <cfi_amdstd_erase_onesize+0x3f4>
    1b20:	e3500001 	cmp	r0, #1	; 0x1
    1b24:	0a0006cf 	beq	3668 <cfi_amdstd_erase_onesize+0x40c>
    1b28:	e59f3354 	ldr	r3, [pc, #354]	; 1e84 <cfi_amdstd_write+0x524>
    1b2c:	e3500002 	cmp	r0, #2	; 0x2
    1b30:	ea0006d6 	b	3690 <cfi_amdstd_erase_onesize+0x434>
    1b34:	e3510004 	cmp	r1, #4	; 0x4
    1b38:	1a0006d8 	bne	36a0 <cfi_amdstd_erase_onesize+0x444>
    1b3c:	e3500001 	cmp	r0, #1	; 0x1
    1b40:	1a0006d1 	bne	368c <cfi_amdstd_erase_onesize+0x430>
    1b44:	e3a0c0aa 	mov	r12, #170	; 0xaa
    1b48:	ea0006d8 	b	36b0 <cfi_amdstd_erase_onesize+0x454>
    1b4c:	e3500002 	cmp	r0, #2	; 0x2
    1b50:	059fc330 	ldreq	r12, [pc, #330]	; 1e88 <cfi_amdstd_write+0x528>
    1b54:	0a0006d8 	beq	36bc <cfi_amdstd_erase_onesize+0x460>
    1b58:	e59f332c 	ldr	r3, [pc, #32c]	; 1e8c <cfi_amdstd_write+0x52c>
    1b5c:	e3500004 	cmp	r0, #4	; 0x4
    1b60:	01a0c003 	moveq	r12, r3
    1b64:	13a0c000 	movne	r12, #0	; 0x0
    1b68:	e5953008 	ldr	r3, [r5, #8]
    1b6c:	e3530001 	cmp	r3, #1	; 0x1
    1b70:	1a0006e0 	bne	36f8 <cfi_amdstd_erase_onesize+0x49c>
    1b74:	e1a00005 	mov	r0, r5
    1b78:	e20c10aa 	and	r1, r12, #170	; 0xaa
    1b7c:	e1a0e00f 	mov	lr, pc
    1b80:	e595f01c 	ldr	pc, [r5, #28]
    1b84:	ea0006ee 	b	3744 <cfi_amdstd_erase_onesize+0x4e8>
    1b88:	e3530002 	cmp	r3, #2	; 0x2
    1b8c:	1a0006e8 	bne	3734 <cfi_amdstd_erase_onesize+0x4d8>
    1b90:	e59f12ec 	ldr	r1, [pc, #2ec]	; 1e84 <cfi_amdstd_write+0x524>
    1b94:	e1a00005 	mov	r0, r5
    1b98:	e00c1001 	and	r1, r12, r1
    1b9c:	e1a0e00f 	mov	lr, pc
    1ba0:	e595f020 	ldr	pc, [r5, #32]
    1ba4:	ea0006ee 	b	3764 <cfi_amdstd_erase_onesize+0x508>
    1ba8:	e3530004 	cmp	r3, #4	; 0x4
    1bac:	1a0006ee 	bne	376c <cfi_amdstd_erase_onesize+0x510>
    1bb0:	e1a00005 	mov	r0, r5
    1bb4:	e1a0100c 	mov	r1, r12
    1bb8:	e1a0e00f 	mov	lr, pc
    1bbc:	e595f024 	ldr	pc, [r5, #36]
    1bc0:	e3a0c000 	mov	r12, #0	; 0x0
    1bc4:	e5983018 	ldr	r3, [r8, #24]
    1bc8:	e5951008 	ldr	r1, [r5, #8]
    1bcc:	e5980008 	ldr	r0, [r8, #8]
    1bd0:	e3510001 	cmp	r1, #1	; 0x1
    1bd4:	e022a390 	mla	r2, r0, r3, r10
    1bd8:	0a000700 	beq	37e0 <cfi_amdstd_erase_onesize+0x584>
    1bdc:	e3510002 	cmp	r1, #2	; 0x2
    1be0:	1a0006fc 	bne	37d8 <cfi_amdstd_erase_onesize+0x57c>
    1be4:	e3500001 	cmp	r0, #1	; 0x1
    1be8:	0a000700 	beq	37f0 <cfi_amdstd_erase_onesize+0x594>
    1bec:	e59f329c 	ldr	r3, [pc, #29c]	; 1e90 <cfi_amdstd_write+0x530>
    1bf0:	e3500002 	cmp	r0, #2	; 0x2
    1bf4:	ea000707 	b	3818 <cfi_amdstd_erase_onesize+0x5bc>
    1bf8:	e3510004 	cmp	r1, #4	; 0x4
    1bfc:	1a000709 	bne	3828 <cfi_amdstd_erase_onesize+0x5cc>
    1c00:	e3500001 	cmp	r0, #1	; 0x1
    1c04:	1a000702 	bne	3814 <cfi_amdstd_erase_onesize+0x5b8>
    1c08:	e3a0c055 	mov	r12, #85	; 0x55
    1c0c:	ea000709 	b	3838 <cfi_amdstd_erase_onesize+0x5dc>
    1c10:	e3500002 	cmp	r0, #2	; 0x2
    1c14:	059fc278 	ldreq	r12, [pc, #278]	; 1e94 <cfi_amdstd_write+0x534>
    1c18:	0a000709 	beq	3844 <cfi_amdstd_erase_onesize+0x5e8>
    1c1c:	e59f3274 	ldr	r3, [pc, #274]	; 1e98 <cfi_amdstd_write+0x538>
    1c20:	e3500004 	cmp	r0, #4	; 0x4
    1c24:	01a0c003 	moveq	r12, r3
    1c28:	13a0c000 	movne	r12, #0	; 0x0
    1c2c:	e5953008 	ldr	r3, [r5, #8]
    1c30:	e3530001 	cmp	r3, #1	; 0x1
    1c34:	1a000711 	bne	3880 <cfi_amdstd_erase_onesize+0x624>
    1c38:	e1a00005 	mov	r0, r5
    1c3c:	e20c1055 	and	r1, r12, #85	; 0x55
    1c40:	e1a0e00f 	mov	lr, pc
    1c44:	e595f01c 	ldr	pc, [r5, #28]
    1c48:	ea00071f 	b	38cc <cfi_amdstd_erase_onesize+0x670>
    1c4c:	e3530002 	cmp	r3, #2	; 0x2
    1c50:	1a000719 	bne	38bc <cfi_amdstd_erase_onesize+0x660>
    1c54:	e59f1234 	ldr	r1, [pc, #234]	; 1e90 <cfi_amdstd_write+0x530>
    1c58:	e1a00005 	mov	r0, r5
    1c5c:	e00c1001 	and	r1, r12, r1
    1c60:	e1a0e00f 	mov	lr, pc
    1c64:	e595f020 	ldr	pc, [r5, #32]
    1c68:	ea00071f 	b	38ec <cfi_amdstd_erase_onesize+0x690>
    1c6c:	e3530004 	cmp	r3, #4	; 0x4
    1c70:	1a00071f 	bne	38f4 <cfi_amdstd_erase_onesize+0x698>
    1c74:	e1a00005 	mov	r0, r5
    1c78:	e1a0100c 	mov	r1, r12
    1c7c:	e1a0e00f 	mov	lr, pc
    1c80:	e595f024 	ldr	pc, [r5, #36]
    1c84:	e3a0c000 	mov	r12, #0	; 0x0
    1c88:	e5983014 	ldr	r3, [r8, #20]
    1c8c:	e5951008 	ldr	r1, [r5, #8]
    1c90:	e5980008 	ldr	r0, [r8, #8]
    1c94:	e3510001 	cmp	r1, #1	; 0x1
    1c98:	e022a390 	mla	r2, r0, r3, r10
    1c9c:	0a000731 	beq	3968 <cfi_amdstd_erase_onesize+0x70c>
    1ca0:	e3510002 	cmp	r1, #2	; 0x2
    1ca4:	1a00072d 	bne	3960 <cfi_amdstd_erase_onesize+0x704>
    1ca8:	e3500001 	cmp	r0, #1	; 0x1
    1cac:	0a000731 	beq	3978 <cfi_amdstd_erase_onesize+0x71c>
    1cb0:	e59f31e4 	ldr	r3, [pc, #1e4]	; 1e9c <cfi_amdstd_write+0x53c>
    1cb4:	e3500002 	cmp	r0, #2	; 0x2
    1cb8:	ea000738 	b	39a0 <cfi_amdstd_erase_onesize+0x744>
    1cbc:	e3510004 	cmp	r1, #4	; 0x4
    1cc0:	1a00073a 	bne	39b0 <cfi_amdstd_erase_onesize+0x754>
    1cc4:	e3500001 	cmp	r0, #1	; 0x1
    1cc8:	1a000733 	bne	399c <cfi_amdstd_erase_onesize+0x740>
    1ccc:	e3a0c020 	mov	r12, #32	; 0x20
    1cd0:	ea00073a 	b	39c0 <cfi_amdstd_erase_onesize+0x764>
    1cd4:	e3500002 	cmp	r0, #2	; 0x2
    1cd8:	059fc1c0 	ldreq	r12, [pc, #1c0]	; 1ea0 <cfi_amdstd_write+0x540>
    1cdc:	0a00073a 	beq	39cc <cfi_amdstd_erase_onesize+0x770>
    1ce0:	e59f31bc 	ldr	r3, [pc, #1bc]	; 1ea4 <cfi_amdstd_write+0x544>
    1ce4:	e3500004 	cmp	r0, #4	; 0x4
    1ce8:	01a0c003 	moveq	r12, r3
    1cec:	13a0c000 	movne	r12, #0	; 0x0
    1cf0:	e5953008 	ldr	r3, [r5, #8]
    1cf4:	e3530001 	cmp	r3, #1	; 0x1
    1cf8:	1a000742 	bne	3a08 <cfi_amdstd_erase_onesize+0x7ac>
    1cfc:	e1a00005 	mov	r0, r5
    1d00:	e20c1020 	and	r1, r12, #32	; 0x20
    1d04:	e1a0e00f 	mov	lr, pc
    1d08:	e595f01c 	ldr	pc, [r5, #28]
    1d0c:	ea000750 	b	3a54 <cfi_amdstd_erase_onesize+0x7f8>
    1d10:	e3530002 	cmp	r3, #2	; 0x2
    1d14:	1a00074a 	bne	3a44 <cfi_amdstd_erase_onesize+0x7e8>
    1d18:	e59f117c 	ldr	r1, [pc, #17c]	; 1e9c <cfi_amdstd_write+0x53c>
    1d1c:	e1a00005 	mov	r0, r5
    1d20:	e00c1001 	and	r1, r12, r1
    1d24:	e1a0e00f 	mov	lr, pc
    1d28:	e595f020 	ldr	pc, [r5, #32]
    1d2c:	ea000750 	b	3a74 <cfi_amdstd_erase_onesize+0x818>
    1d30:	e3530004 	cmp	r3, #4	; 0x4
    1d34:	1a000750 	bne	3a7c <cfi_amdstd_erase_onesize+0x820>
    1d38:	e1a00005 	mov	r0, r5
    1d3c:	e1a0100c 	mov	r1, r12
    1d40:	e1a0e00f 	mov	lr, pc
    1d44:	e595f024 	ldr	pc, [r5, #36]
    1d48:	e5952008 	ldr	r2, [r5, #8]
    1d4c:	e51be034 	ldr	lr, [r11, -#52]
    1d50:	e15e0002 	cmp	lr, r2
    1d54:	e1a00002 	mov	r0, r2
    1d58:	3a000904 	bcc	4170 <cfi_amdstd_destroy+0x40>
    1d5c:	e51b003c 	ldr	r0, [r11, -#60]
    1d60:	e0803100 	add	r3, r0, r0, lsl #2
    1d64:	e0803083 	add	r3, r0, r3, lsl #1
    1d68:	e1a03103 	mov	r3, r3, lsl #2
    1d6c:	e283303c 	add	r3, r3, #60	; 0x3c
    1d70:	e0834008 	add	r4, r3, r8
    1d74:	e3520001 	cmp	r2, #1	; 0x1
    1d78:	059b1008 	ldreq	r1, [r11, #8]
    1d7c:	05d13000 	ldreqb	r3, [r1]
    1d80:	0a000767 	beq	3b24 <cfi_amdstd_erase_onesize+0x8c8>
    1d84:	e3520002 	cmp	r2, #2	; 0x2
    1d88:	059b2008 	ldreq	r2, [r11, #8]
    1d8c:	01d230b0 	ldreqh	r3, [r2]
    1d90:	0a000767 	beq	3b34 <cfi_amdstd_erase_onesize+0x8d8>
    1d94:	e3520004 	cmp	r2, #4	; 0x4
    1d98:	1a00099e 	bne	4418 <cfi_amdstd_destroy+0x2e8>
    1d9c:	e59bc008 	ldr	r12, [r11, #8]
    1da0:	e59c3000 	ldr	r3, [r12]
    1da4:	e1a00005 	mov	r0, r5
    1da8:	e51b2040 	ldr	r2, [r11, -#64]
    1dac:	e598c01c 	ldr	r12, [r8, #28]
    1db0:	e1a01004 	mov	r1, r4
    1db4:	e58dc000 	str	r12, [sp]
    1db8:	eb0003ff 	bl	2dbc <cfi_amdstd_erase_varsize+0x708>
    1dbc:	e3500000 	cmp	r0, #0	; 0x0
    1dc0:	e50b0038 	str	r0, [r11, -#56]
    1dc4:	0a0007de 	beq	3d44 <cfi_amdstd_sync+0xb4>
    1dc8:	e598301c 	ldr	r3, [r8, #28]
    1dcc:	e3530000 	cmp	r3, #0	; 0x0
    1dd0:	0a0007dc 	beq	3d48 <cfi_amdstd_sync+0xb8>
static inline __u32 cfi_build_cmd(u_char cmd, struct map_info *map, struct cfi_private *cfi)
{
	__u32 val = 0;

	if (cfi_buswidth_is_1()) {
    1dd4:	e5953008 	ldr	r3, [r5, #8]
		/* 1 x8 device */
		val = cmd;
	} else if (cfi_buswidth_is_2()) {
		if (cfi_interleave_is_1()) {
			/* 1 x16 device in x16 mode */
			val = cpu_to_cfi16(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 (x8, x16 or x32) devices in x8 mode */
			val = cpu_to_cfi16((cmd << 8) | cmd);
		}
	} else if (cfi_buswidth_is_4()) {
		if (cfi_interleave_is_1()) {
			/* 1 x32 device in x32 mode */
			val = cpu_to_cfi32(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 x16 device in x16 mode */
			val = cpu_to_cfi32((cmd << 16) | cmd);
		} else if (cfi_interleave_is_4()) {
			/* 4 (x8, x16 or x32) devices in x8 mode */
			val = (cmd << 16) | cmd;
			val = cpu_to_cfi32((val << 8) | val);
		}
	}
	return val;
}
#define CMD(x)  cfi_build_cmd((x), map, cfi)

/*
 * Read a value according to the bus width.
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return map->read16(map, addr);
	} else if (cfi_buswidth_is_4()) {
		return map->read32(map, addr);
	} else {
		return 0;
	}
}

/*
 * Write a value according to the bus width.
 */

static inline void cfi_write(struct map_info *map, __u32 val, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		map->write8(map, val, addr);
	} else if (cfi_buswidth_is_2()) {
		map->write16(map, val, addr);
	} else if (cfi_buswidth_is_4()) {
		map->write32(map, val, addr);
	}
}

/*
 * Sends a CFI command to a bank of flash for the given geometry.
 *
 * Returns the offset in flash where the command was written.
 * If prev_val is non-null, it will be set to the value at the command address,
 * before the command was written.
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    1dd8:	e3a0c000 	mov	r12, #0	; 0x0
    1ddc:	e3530001 	cmp	r3, #1	; 0x1
    1de0:	0a000784 	beq	3bf8 <cfi_amdstd_erase_onesize+0x99c>
    1de4:	e3530002 	cmp	r3, #2	; 0x2
    1de8:	1a00077f 	bne	3bec <cfi_amdstd_erase_onesize+0x990>
    1dec:	e5981008 	ldr	r1, [r8, #8]
    1df0:	e3510001 	cmp	r1, #1	; 0x1
    1df4:	0a000784 	beq	3c0c <cfi_amdstd_erase_onesize+0x9b0>
    1df8:	e59f30a8 	ldr	r3, [pc, #a8]	; 1ea8 <cfi_amdstd_write+0x548>
    1dfc:	e3510002 	cmp	r1, #2	; 0x2
    1e00:	ea00078b 	b	3c34 <cfi_amdstd_erase_onesize+0x9d8>
    1e04:	e3530004 	cmp	r3, #4	; 0x4
    1e08:	1a00078d 	bne	3c44 <cfi_amdstd_erase_onesize+0x9e8>
    1e0c:	e5981008 	ldr	r1, [r8, #8]
    1e10:	e3510001 	cmp	r1, #1	; 0x1
    1e14:	1a000786 	bne	3c34 <cfi_amdstd_erase_onesize+0x9d8>
    1e18:	e3a0c090 	mov	r12, #144	; 0x90
    1e1c:	ea00078d 	b	3c58 <cfi_amdstd_erase_onesize+0x9fc>
    1e20:	e3510002 	cmp	r1, #2	; 0x2
    1e24:	059fc080 	ldreq	r12, [pc, #80]	; 1eac <cfi_amdstd_write+0x54c>
    1e28:	0a00078d 	beq	3c64 <cfi_amdstd_erase_onesize+0xa08>
    1e2c:	e59f307c 	ldr	r3, [pc, #7c]	; 1eb0 <cfi_amdstd_write+0x550>
    1e30:	e3510004 	cmp	r1, #4	; 0x4
    1e34:	01a0c003 	moveq	r12, r3
    1e38:	13a0c000 	movne	r12, #0	; 0x0
    1e3c:	e5953008 	ldr	r3, [r5, #8]
    1e40:	e3530001 	cmp	r3, #1	; 0x1
    1e44:	1a000796 	bne	3ca4 <cfi_amdstd_sync+0x14>
    1e48:	e1a00005 	mov	r0, r5
    1e4c:	e20c1090 	and	r1, r12, #144	; 0x90
    1e50:	e1a0200a 	mov	r2, r10
    1e54:	e1a0e00f 	mov	lr, pc
    1e58:	e595f01c 	ldr	pc, [r5, #28]
    1e5c:	ea0007b2 	b	3d2c <cfi_amdstd_sync+0x9c>
    1e60:	e3530002 	cmp	r3, #2	; 0x2
    1e64:	1a0007ab 	bne	3d18 <cfi_amdstd_sync+0x88>
    1e68:	e1a00005 	mov	r0, r5
    1e6c:	e59f1034 	ldr	r1, [pc, #34]	; 1ea8 <cfi_amdstd_write+0x548>
    1e70:	e1a0200a 	mov	r2, r10
    1e74:	e00c1001 	and	r1, r12, r1
    1e78:	e1a0e00f 	mov	lr, pc
    1e7c:	e595f020 	ldr	pc, [r5, #32]
    1e80:	ea0007b2 	b	3d50 <cfi_amdstd_sync+0xc0>
    1e84:	0000aaaa 	andeq	r10, r0, r10, lsr #21
    1e88:	00aa00aa 	adceq	r0, r10, r10, lsr #1
    1e8c:	aaaaaaaa 	bge	feaac93c <cfi_amdstd_destroy+0xfeaa880c>
    1e90:	00005555 	andeq	r5, r0, r5, asr r5
    1e94:	00550055 	subeqs	r0, r5, r5, asr r0
    1e98:	55555555 	ldrplb	r5, [r5, -#1365]
    1e9c:	00002020 	andeq	r2, r0, r0, lsr #32
    1ea0:	00200020 	eoreq	r0, r0, r0, lsr #32
    1ea4:	20202020 	eorcs	r2, r0, r0, lsr #32
    1ea8:	00009090 	muleq	r0, r0, r0
    1eac:	00900090 	umulleqs	r0, r0, r0, r0
    1eb0:	90909090 	umulllss	r9, r0, r0, r0
    1eb4:	e3530004 	cmp	r3, #4	; 0x4
    1eb8:	1a0007b2 	bne	3d88 <cfi_amdstd_sync+0xf8>
    1ebc:	e1a00005 	mov	r0, r5
    1ec0:	e1a0100c 	mov	r1, r12
    1ec4:	e1a0200a 	mov	r2, r10
    1ec8:	e1a0e00f 	mov	lr, pc
    1ecc:	e595f024 	ldr	pc, [r5, #36]
    1ed0:	e5953008 	ldr	r3, [r5, #8]
    1ed4:	e3a02000 	mov	r2, #0	; 0x0
    1ed8:	e3530001 	cmp	r3, #1	; 0x1
    1edc:	e1a00003 	mov	r0, r3
    1ee0:	0a0007c4 	beq	3df8 <cfi_amdstd_sync+0x168>
    1ee4:	e3500002 	cmp	r0, #2	; 0x2
    1ee8:	1a0007bc 	bne	3de0 <cfi_amdstd_sync+0x150>
    1eec:	e5981008 	ldr	r1, [r8, #8]
    1ef0:	e3510001 	cmp	r1, #1	; 0x1
    1ef4:	ea0007c2 	b	3e04 <cfi_amdstd_sync+0x174>
    1ef8:	e3500004 	cmp	r0, #4	; 0x4
    1efc:	1a0007c4 	bne	3e14 <cfi_amdstd_sync+0x184>
    1f00:	e5981008 	ldr	r1, [r8, #8]
    1f04:	e3510001 	cmp	r1, #1	; 0x1
    1f08:	0a0007c4 	beq	3e20 <cfi_amdstd_sync+0x190>
    1f0c:	e3510002 	cmp	r1, #2	; 0x2
    1f10:	0a0007c4 	beq	3e28 <cfi_amdstd_sync+0x198>
    1f14:	e3a02000 	mov	r2, #0	; 0x0
    1f18:	e3500001 	cmp	r0, #1	; 0x1
    1f1c:	1a0007cc 	bne	3e54 <cfi_amdstd_sync+0x1c4>
    1f20:	e1a00005 	mov	r0, r5
    1f24:	e20210ff 	and	r1, r2, #255	; 0xff
    1f28:	e1a0200a 	mov	r2, r10
    1f2c:	e1a0e00f 	mov	lr, pc
    1f30:	e595f01c 	ldr	pc, [r5, #28]
    1f34:	ea0007dc 	b	3eac <cfi_amdstd_suspend+0x48>
    1f38:	e3500002 	cmp	r0, #2	; 0x2
    1f3c:	1a0007d5 	bne	3e98 <cfi_amdstd_suspend+0x34>
    1f40:	e1a00005 	mov	r0, r5
    1f44:	e1a01802 	mov	r1, r2, lsl #16
    1f48:	e1a01821 	mov	r1, r1, lsr #16
    1f4c:	e1a0200a 	mov	r2, r10
    1f50:	e1a0e00f 	mov	lr, pc
    1f54:	e595f020 	ldr	pc, [r5, #32]
    1f58:	ea0007dc 	b	3ed0 <cfi_amdstd_suspend+0x6c>
    1f5c:	e3500004 	cmp	r0, #4	; 0x4
    1f60:	1a0007dc 	bne	3ed8 <cfi_amdstd_suspend+0x74>
    1f64:	e1a00005 	mov	r0, r5
    1f68:	e1a01002 	mov	r1, r2
    1f6c:	e1a0200a 	mov	r2, r10
    1f70:	e1a0e00f 	mov	lr, pc
    1f74:	e595f024 	ldr	pc, [r5, #36]
    1f78:	e51b0038 	ldr	r0, [r11, -#56]
    1f7c:	ea0009aa 	b	462c <cfi_amdstd_destroy+0x4fc>
    1f80:	e5953008 	ldr	r3, [r5, #8]
    1f84:	e51be040 	ldr	lr, [r11, -#64]
    1f88:	e99b0003 	ldmib	r11, {r0, r1}
    1f8c:	e08ee003 	add	lr, lr, r3
    1f90:	e50be040 	str	lr, [r11, -#64]
    1f94:	e5902000 	ldr	r2, [r0]
    1f98:	e0811003 	add	r1, r1, r3
    1f9c:	e58b1008 	str	r1, [r11, #8]
    1fa0:	e0822003 	add	r2, r2, r3
    1fa4:	e5802000 	str	r2, [r0]
    1fa8:	e5952008 	ldr	r2, [r5, #8]
    1fac:	e51bc034 	ldr	r12, [r11, -#52]
    1fb0:	e5983034 	ldr	r3, [r8, #52]
    1fb4:	e062c00c 	rsb	r12, r2, r12
    1fb8:	e1b0e33e 	movs	lr, lr, lsr r3
    1fbc:	e50bc034 	str	r12, [r11, -#52]
    1fc0:	0a0008ff 	beq	43c4 <cfi_amdstd_destroy+0x294>
    1fc4:	e598301c 	ldr	r3, [r8, #28]
    1fc8:	e3530000 	cmp	r3, #0	; 0x0
    1fcc:	0a000850 	beq	4114 <cfi_amdstd_resume+0x168>
static inline __u32 cfi_build_cmd(u_char cmd, struct map_info *map, struct cfi_private *cfi)
{
	__u32 val = 0;

	if (cfi_buswidth_is_1()) {
    1fd0:	e3520001 	cmp	r2, #1	; 0x1
    1fd4:	e51b1038 	ldr	r1, [r11, -#56]
    1fd8:	0a000805 	beq	3ff4 <cfi_amdstd_resume+0x48>
		/* 1 x8 device */
		val = cmd;
	} else if (cfi_buswidth_is_2()) {
    1fdc:	e3520002 	cmp	r2, #2	; 0x2
    1fe0:	1a000800 	bne	3fe8 <cfi_amdstd_resume+0x3c>
		if (cfi_interleave_is_1()) {
    1fe4:	e5981008 	ldr	r1, [r8, #8]
    1fe8:	e3510001 	cmp	r1, #1	; 0x1
    1fec:	0a000805 	beq	4008 <cfi_amdstd_resume+0x5c>
			/* 1 x16 device in x16 mode */
			val = cpu_to_cfi16(cmd);
		} else if (cfi_interleave_is_2()) {
    1ff0:	e59f3378 	ldr	r3, [pc, #378]	; 2370 <cfi_amdstd_write+0xa10>
    1ff4:	e51be038 	ldr	lr, [r11, -#56]
    1ff8:	e3510002 	cmp	r1, #2	; 0x2
    1ffc:	01a0e003 	moveq	lr, r3
    2000:	e1a0100e 	mov	r1, lr
			/* 2 (x8, x16 or x32) devices in x8 mode */
			val = cpu_to_cfi16((cmd << 8) | cmd);
		}
	} else if (cfi_buswidth_is_4()) {
    2004:	ea00080f 	b	4048 <cfi_amdstd_resume+0x9c>
    2008:	e3520004 	cmp	r2, #4	; 0x4
    200c:	1a00080f 	bne	4050 <cfi_amdstd_resume+0xa4>
		if (cfi_interleave_is_1()) {
    2010:	e5981008 	ldr	r1, [r8, #8]
    2014:	e3510001 	cmp	r1, #1	; 0x1
    2018:	1a000807 	bne	403c <cfi_amdstd_resume+0x90>
			/* 1 x32 device in x32 mode */
			val = cpu_to_cfi32(cmd);
    201c:	e3a01090 	mov	r1, #144	; 0x90
		} else if (cfi_interleave_is_2()) {
    2020:	ea00080f 	b	4064 <cfi_amdstd_resume+0xb8>
    2024:	e3510002 	cmp	r1, #2	; 0x2
			/* 2 x16 device in x16 mode */
			val = cpu_to_cfi32((cmd << 16) | cmd);
    2028:	059f1344 	ldreq	r1, [pc, #344]	; 2374 <cfi_amdstd_write+0xa14>
		} else if (cfi_interleave_is_4()) {
    202c:	0a00080f 	beq	4070 <cfi_amdstd_resume+0xc4>
			/* 4 (x8, x16 or x32) devices in x8 mode */
			val = (cmd << 16) | cmd;
			val = cpu_to_cfi32((val << 8) | val);
    2030:	e59f3340 	ldr	r3, [pc, #340]	; 2378 <cfi_amdstd_write+0xa18>
    2034:	e51b0038 	ldr	r0, [r11, -#56]
    2038:	e3510004 	cmp	r1, #4	; 0x4
    203c:	01a00003 	moveq	r0, r3
    2040:	e1a01000 	mov	r1, r0
		}
	}
	return val;
}
#define CMD(x)  cfi_build_cmd((x), map, cfi)

/*
 * Read a value according to the bus width.
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return map->read16(map, addr);
	} else if (cfi_buswidth_is_4()) {
		return map->read32(map, addr);
	} else {
		return 0;
	}
}

/*
 * Write a value according to the bus width.
 */

static inline void cfi_write(struct map_info *map, __u32 val, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
    2044:	e5953008 	ldr	r3, [r5, #8]
    2048:	e3530001 	cmp	r3, #1	; 0x1
    204c:	1a000818 	bne	40b4 <cfi_amdstd_resume+0x108>
		map->write8(map, val, addr);
    2050:	e1a00005 	mov	r0, r5
    2054:	e20110ff 	and	r1, r1, #255	; 0xff
    2058:	e1a0200a 	mov	r2, r10
    205c:	e1a0e00f 	mov	lr, pc
    2060:	e595f01c 	ldr	pc, [r5, #28]
	} else if (cfi_buswidth_is_2()) {
    2064:	ea000827 	b	4108 <cfi_amdstd_resume+0x15c>
    2068:	e3530002 	cmp	r3, #2	; 0x2
    206c:	1a000821 	bne	40f8 <cfi_amdstd_resume+0x14c>
		map->write16(map, val, addr);
    2070:	e1a00005 	mov	r0, r5
    2074:	e1a01801 	mov	r1, r1, lsl #16
    2078:	e1a01821 	mov	r1, r1, lsr #16
    207c:	e1a0200a 	mov	r2, r10
    2080:	e1a0e00f 	mov	lr, pc
    2084:	e595f020 	ldr	pc, [r5, #32]
	} else if (cfi_buswidth_is_4()) {
    2088:	ea000827 	b	412c <cfi_amdstd_resume+0x180>
    208c:	e3530004 	cmp	r3, #4	; 0x4
    2090:	1a000827 	bne	4134 <cfi_amdstd_destroy+0x4>
		map->write32(map, val, addr);
    2094:	e1a00005 	mov	r0, r5
    2098:	e1a0200a 	mov	r2, r10
    209c:	e1a0e00f 	mov	lr, pc
    20a0:	e595f024 	ldr	pc, [r5, #36]
    20a4:	e5953008 	ldr	r3, [r5, #8]
	}
}

/*
 * Sends a CFI command to a bank of flash for the given geometry.
 *
 * Returns the offset in flash where the command was written.
 * If prev_val is non-null, it will be set to the value at the command address,
 * before the command was written.
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    20a8:	e3a01000 	mov	r1, #0	; 0x0
    20ac:	e3530001 	cmp	r3, #1	; 0x1
    20b0:	e1a00003 	mov	r0, r3
    20b4:	0a000839 	beq	41a0 <cfi_amdstd_destroy+0x70>
    20b8:	e3500002 	cmp	r0, #2	; 0x2
    20bc:	1a000831 	bne	4188 <cfi_amdstd_destroy+0x58>
    20c0:	e5983008 	ldr	r3, [r8, #8]
    20c4:	e3530001 	cmp	r3, #1	; 0x1
    20c8:	ea000837 	b	41ac <cfi_amdstd_destroy+0x7c>
    20cc:	e3500004 	cmp	r0, #4	; 0x4
    20d0:	1a000839 	bne	41bc <cfi_amdstd_destroy+0x8c>
    20d4:	e5983008 	ldr	r3, [r8, #8]
    20d8:	e3530001 	cmp	r3, #1	; 0x1
    20dc:	0a000839 	beq	41c8 <cfi_amdstd_destroy+0x98>
    20e0:	e3530002 	cmp	r3, #2	; 0x2
    20e4:	0a000839 	beq	41d0 <cfi_amdstd_destroy+0xa0>
    20e8:	e3a01000 	mov	r1, #0	; 0x0
    20ec:	e3500001 	cmp	r0, #1	; 0x1
    20f0:	1a000841 	bne	41fc <cfi_amdstd_destroy+0xcc>
    20f4:	e1a00005 	mov	r0, r5
    20f8:	e20110ff 	and	r1, r1, #255	; 0xff
    20fc:	e1a0200a 	mov	r2, r10
    2100:	e1a0e00f 	mov	lr, pc
    2104:	e595f01c 	ldr	pc, [r5, #28]
    2108:	ea000850 	b	4250 <cfi_amdstd_destroy+0x120>
    210c:	e3500002 	cmp	r0, #2	; 0x2
    2110:	1a00084a 	bne	4240 <cfi_amdstd_destroy+0x110>
    2114:	e1a00005 	mov	r0, r5
    2118:	e1a01801 	mov	r1, r1, lsl #16
    211c:	e1a01821 	mov	r1, r1, lsr #16
    2120:	e1a0200a 	mov	r2, r10
    2124:	e1a0e00f 	mov	lr, pc
    2128:	e595f020 	ldr	pc, [r5, #32]
    212c:	ea000850 	b	4274 <cfi_amdstd_destroy+0x144>
    2130:	e3500004 	cmp	r0, #4	; 0x4
    2134:	1a000850 	bne	427c <cfi_amdstd_destroy+0x14c>
    2138:	e1a00005 	mov	r0, r5
    213c:	e1a0200a 	mov	r2, r10
    2140:	e1a0e00f 	mov	lr, pc
    2144:	e595f024 	ldr	pc, [r5, #36]
    2148:	e51b103c 	ldr	r1, [r11, -#60]
    214c:	e284402c 	add	r4, r4, #44	; 0x2c
    2150:	e2811001 	add	r1, r1, #1	; 0x1
    2154:	e50b103c 	str	r1, [r11, -#60]
    2158:	e5983030 	ldr	r3, [r8, #48]
    215c:	e3a02000 	mov	r2, #0	; 0x0
    2160:	e50b2040 	str	r2, [r11, -#64]
    2164:	e1510003 	cmp	r1, r3
    2168:	0a0009a9 	beq	4814 <cfi_amdstd_destroy+0x6e4>
    216c:	e0813101 	add	r3, r1, r1, lsl #2
    2170:	e0813083 	add	r3, r1, r3, lsl #1
    2174:	e598201c 	ldr	r2, [r8, #28]
    2178:	e51bc044 	ldr	r12, [r11, -#68]
    217c:	e3520000 	cmp	r2, #0	; 0x0
    2180:	e79ca103 	ldr	r10, [r12, r3, lsl #2]
    2184:	0a0008ff 	beq	4588 <cfi_amdstd_destroy+0x458>
 * Transforms the CFI command for the given geometry (bus width & interleave.
 */
static inline __u32 cfi_build_cmd(u_char cmd, struct map_info *map, struct cfi_private *cfi)
{
	__u32 val = 0;
    2188:	e51bc040 	ldr	r12, [r11, -#64]

	if (cfi_buswidth_is_1()) {
		/* 1 x8 device */
		val = cmd;
	} else if (cfi_buswidth_is_2()) {
		if (cfi_interleave_is_1()) {
			/* 1 x16 device in x16 mode */
			val = cpu_to_cfi16(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 (x8, x16 or x32) devices in x8 mode */
			val = cpu_to_cfi16((cmd << 8) | cmd);
		}
	} else if (cfi_buswidth_is_4()) {
		if (cfi_interleave_is_1()) {
			/* 1 x32 device in x32 mode */
			val = cpu_to_cfi32(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 x16 device in x16 mode */
			val = cpu_to_cfi32((cmd << 16) | cmd);
		} else if (cfi_interleave_is_4()) {
			/* 4 (x8, x16 or x32) devices in x8 mode */
			val = (cmd << 16) | cmd;
			val = cpu_to_cfi32((val << 8) | val);
		}
	}
	return val;
}
#define CMD(x)  cfi_build_cmd((x), map, cfi)

/*
 * Read a value according to the bus width.
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return map->read16(map, addr);
	} else if (cfi_buswidth_is_4()) {
		return map->read32(map, addr);
	} else {
		return 0;
	}
}

/*
 * Write a value according to the bus width.
 */

static inline void cfi_write(struct map_info *map, __u32 val, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		map->write8(map, val, addr);
	} else if (cfi_buswidth_is_2()) {
		map->write16(map, val, addr);
	} else if (cfi_buswidth_is_4()) {
		map->write32(map, val, addr);
	}
}

/*
 * Sends a CFI command to a bank of flash for the given geometry.
 *
 * Returns the offset in flash where the command was written.
 * If prev_val is non-null, it will be set to the value at the command address,
 * before the command was written.
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    218c:	e5983014 	ldr	r3, [r8, #20]
    2190:	e5951008 	ldr	r1, [r5, #8]
    2194:	e5980008 	ldr	r0, [r8, #8]
    2198:	e3510001 	cmp	r1, #1	; 0x1
	__u32 val;
	__u32 addr = base + cfi_build_cmd_addr(cmd_addr, CFIDEV_INTERLEAVE, type);
    219c:	e022a390 	mla	r2, r0, r3, r10
    21a0:	0a000872 	beq	4370 <cfi_amdstd_destroy+0x240>
    21a4:	e3510002 	cmp	r1, #2	; 0x2
    21a8:	1a00086e 	bne	4368 <cfi_amdstd_destroy+0x238>
    21ac:	e3500001 	cmp	r0, #1	; 0x1
    21b0:	0a000872 	beq	4380 <cfi_amdstd_destroy+0x250>
    21b4:	e59f31c0 	ldr	r3, [pc, #1c0]	; 237c <cfi_amdstd_write+0xa1c>
    21b8:	e3500002 	cmp	r0, #2	; 0x2
    21bc:	ea000879 	b	43a8 <cfi_amdstd_destroy+0x278>
    21c0:	e3510004 	cmp	r1, #4	; 0x4
    21c4:	1a00087b 	bne	43b8 <cfi_amdstd_destroy+0x288>
    21c8:	e3500001 	cmp	r0, #1	; 0x1
    21cc:	1a000874 	bne	43a4 <cfi_amdstd_destroy+0x274>
    21d0:	e3a0c0aa 	mov	r12, #170	; 0xaa
    21d4:	ea00087b 	b	43c8 <cfi_amdstd_destroy+0x298>
    21d8:	e3500002 	cmp	r0, #2	; 0x2
    21dc:	059fc19c 	ldreq	r12, [pc, #19c]	; 2380 <cfi_amdstd_write+0xa20>
    21e0:	0a00087b 	beq	43d4 <cfi_amdstd_destroy+0x2a4>
    21e4:	e59f3198 	ldr	r3, [pc, #198]	; 2384 <cfi_amdstd_write+0xa24>
    21e8:	e3500004 	cmp	r0, #4	; 0x4
    21ec:	01a0c003 	moveq	r12, r3
    21f0:	13a0c000 	movne	r12, #0	; 0x0
    21f4:	e5953008 	ldr	r3, [r5, #8]
    21f8:	e3530001 	cmp	r3, #1	; 0x1
    21fc:	1a000883 	bne	4410 <cfi_amdstd_destroy+0x2e0>
    2200:	e1a00005 	mov	r0, r5
    2204:	e20c10aa 	and	r1, r12, #170	; 0xaa
    2208:	e1a0e00f 	mov	lr, pc
    220c:	e595f01c 	ldr	pc, [r5, #28]
    2210:	ea000891 	b	445c <cfi_amdstd_destroy+0x32c>
    2214:	e3530002 	cmp	r3, #2	; 0x2
    2218:	1a00088b 	bne	444c <cfi_amdstd_destroy+0x31c>
    221c:	e59f1158 	ldr	r1, [pc, #158]	; 237c <cfi_amdstd_write+0xa1c>
    2220:	e1a00005 	mov	r0, r5
    2224:	e00c1001 	and	r1, r12, r1
    2228:	e1a0e00f 	mov	lr, pc
    222c:	e595f020 	ldr	pc, [r5, #32]
    2230:	ea000891 	b	447c <cfi_amdstd_destroy+0x34c>
    2234:	e3530004 	cmp	r3, #4	; 0x4
    2238:	1a000891 	bne	4484 <cfi_amdstd_destroy+0x354>
    223c:	e1a00005 	mov	r0, r5
    2240:	e1a0100c 	mov	r1, r12
    2244:	e1a0e00f 	mov	lr, pc
    2248:	e595f024 	ldr	pc, [r5, #36]
    224c:	e3a0c000 	mov	r12, #0	; 0x0
    2250:	e5983018 	ldr	r3, [r8, #24]
    2254:	e5951008 	ldr	r1, [r5, #8]
    2258:	e5980008 	ldr	r0, [r8, #8]
    225c:	e3510001 	cmp	r1, #1	; 0x1
    2260:	e022a390 	mla	r2, r0, r3, r10
    2264:	0a0008a3 	beq	44f8 <cfi_amdstd_destroy+0x3c8>
    2268:	e3510002 	cmp	r1, #2	; 0x2
    226c:	1a00089f 	bne	44f0 <cfi_amdstd_destroy+0x3c0>
    2270:	e3500001 	cmp	r0, #1	; 0x1
    2274:	0a0008a3 	beq	4508 <cfi_amdstd_destroy+0x3d8>
    2278:	e59f3108 	ldr	r3, [pc, #108]	; 2388 <cfi_amdstd_write+0xa28>
    227c:	e3500002 	cmp	r0, #2	; 0x2
    2280:	ea0008aa 	b	4530 <cfi_amdstd_destroy+0x400>
    2284:	e3510004 	cmp	r1, #4	; 0x4
    2288:	1a0008ac 	bne	4540 <cfi_amdstd_destroy+0x410>
    228c:	e3500001 	cmp	r0, #1	; 0x1
    2290:	1a0008a5 	bne	452c <cfi_amdstd_destroy+0x3fc>
    2294:	e3a0c055 	mov	r12, #85	; 0x55
    2298:	ea0008ac 	b	4550 <cfi_amdstd_destroy+0x420>
    229c:	e3500002 	cmp	r0, #2	; 0x2
    22a0:	059fc0e4 	ldreq	r12, [pc, #e4]	; 238c <cfi_amdstd_write+0xa2c>
    22a4:	0a0008ac 	beq	455c <cfi_amdstd_destroy+0x42c>
    22a8:	e59f30e0 	ldr	r3, [pc, #e0]	; 2390 <cfi_amdstd_write+0xa30>
    22ac:	e3500004 	cmp	r0, #4	; 0x4
    22b0:	01a0c003 	moveq	r12, r3
    22b4:	13a0c000 	movne	r12, #0	; 0x0
    22b8:	e5953008 	ldr	r3, [r5, #8]
    22bc:	e3530001 	cmp	r3, #1	; 0x1
    22c0:	1a0008b4 	bne	4598 <cfi_amdstd_destroy+0x468>
    22c4:	e1a00005 	mov	r0, r5
    22c8:	e20c1055 	and	r1, r12, #85	; 0x55
    22cc:	e1a0e00f 	mov	lr, pc
    22d0:	e595f01c 	ldr	pc, [r5, #28]
    22d4:	ea0008c2 	b	45e4 <cfi_amdstd_destroy+0x4b4>
    22d8:	e3530002 	cmp	r3, #2	; 0x2
    22dc:	1a0008bc 	bne	45d4 <cfi_amdstd_destroy+0x4a4>
    22e0:	e59f10a0 	ldr	r1, [pc, #a0]	; 2388 <cfi_amdstd_write+0xa28>
    22e4:	e1a00005 	mov	r0, r5
    22e8:	e00c1001 	and	r1, r12, r1
    22ec:	e1a0e00f 	mov	lr, pc
    22f0:	e595f020 	ldr	pc, [r5, #32]
    22f4:	ea0008c2 	b	4604 <cfi_amdstd_destroy+0x4d4>
    22f8:	e3530004 	cmp	r3, #4	; 0x4
    22fc:	1a0008c2 	bne	460c <cfi_amdstd_destroy+0x4dc>
    2300:	e1a00005 	mov	r0, r5
    2304:	e1a0100c 	mov	r1, r12
    2308:	e1a0e00f 	mov	lr, pc
    230c:	e595f024 	ldr	pc, [r5, #36]
    2310:	e3a0c000 	mov	r12, #0	; 0x0
    2314:	e5983014 	ldr	r3, [r8, #20]
    2318:	e5951008 	ldr	r1, [r5, #8]
    231c:	e5980008 	ldr	r0, [r8, #8]
    2320:	e3510001 	cmp	r1, #1	; 0x1
    2324:	e022a390 	mla	r2, r0, r3, r10
    2328:	0a0008d4 	beq	4680 <cfi_amdstd_destroy+0x550>
    232c:	e3510002 	cmp	r1, #2	; 0x2
    2330:	1a0008d0 	bne	4678 <cfi_amdstd_destroy+0x548>
    2334:	e3500001 	cmp	r0, #1	; 0x1
    2338:	0a0008d4 	beq	4690 <cfi_amdstd_destroy+0x560>
    233c:	e59f3050 	ldr	r3, [pc, #50]	; 2394 <cfi_amdstd_write+0xa34>
    2340:	e3500002 	cmp	r0, #2	; 0x2
    2344:	ea0008e7 	b	46e8 <cfi_amdstd_destroy+0x5b8>
    2348:	e3510004 	cmp	r1, #4	; 0x4
    234c:	1a0008e9 	bne	46f8 <cfi_amdstd_destroy+0x5c8>
    2350:	e3500001 	cmp	r0, #1	; 0x1
    2354:	1a0008d6 	bne	46b4 <cfi_amdstd_destroy+0x584>
    2358:	e3a0c020 	mov	r12, #32	; 0x20
    235c:	ea0008e9 	b	4708 <cfi_amdstd_destroy+0x5d8>
    2360:	e3500002 	cmp	r0, #2	; 0x2
    2364:	1a0008e5 	bne	4700 <cfi_amdstd_destroy+0x5d0>
    2368:	e59fc028 	ldr	r12, [pc, #28]	; 2398 <cfi_amdstd_write+0xa38>
    236c:	ea0008e9 	b	4718 <cfi_amdstd_destroy+0x5e8>
    2370:	00009090 	muleq	r0, r0, r0
    2374:	00900090 	umulleqs	r0, r0, r0, r0
    2378:	90909090 	umulllss	r9, r0, r0, r0
    237c:	0000aaaa 	andeq	r10, r0, r10, lsr #21
    2380:	00aa00aa 	adceq	r0, r10, r10, lsr #1
    2384:	aaaaaaaa 	bge	feaace34 <cfi_amdstd_destroy+0xfeaa8d04>
    2388:	00005555 	andeq	r5, r0, r5, asr r5
    238c:	00550055 	subeqs	r0, r5, r5, asr r0
    2390:	55555555 	ldrplb	r5, [r5, -#1365]
    2394:	00002020 	andeq	r2, r0, r0, lsr #32
    2398:	00200020 	eoreq	r0, r0, r0, lsr #32
    239c:	e59f32e4 	ldr	r3, [pc, #2e4]	; 2688 <cfi_amdstd_write+0xd28>
    23a0:	e3500004 	cmp	r0, #4	; 0x4
    23a4:	01a0c003 	moveq	r12, r3
    23a8:	13a0c000 	movne	r12, #0	; 0x0
    23ac:	e5953008 	ldr	r3, [r5, #8]
    23b0:	e3530001 	cmp	r3, #1	; 0x1
    23b4:	1a0008f1 	bne	4780 <cfi_amdstd_destroy+0x650>
    23b8:	e1a00005 	mov	r0, r5
    23bc:	e20c1020 	and	r1, r12, #32	; 0x20
    23c0:	e1a0e00f 	mov	lr, pc
    23c4:	e595f01c 	ldr	pc, [r5, #28]
    23c8:	ea0008ff 	b	47cc <cfi_amdstd_destroy+0x69c>
    23cc:	e3530002 	cmp	r3, #2	; 0x2
    23d0:	1a0008f9 	bne	47bc <cfi_amdstd_destroy+0x68c>
    23d4:	e59f12b0 	ldr	r1, [pc, #2b0]	; 268c <cfi_amdstd_write+0xd2c>
    23d8:	e1a00005 	mov	r0, r5
    23dc:	e00c1001 	and	r1, r12, r1
    23e0:	e1a0e00f 	mov	lr, pc
    23e4:	e595f020 	ldr	pc, [r5, #32]
    23e8:	ea0008ff 	b	47ec <cfi_amdstd_destroy+0x6bc>
    23ec:	e3530004 	cmp	r3, #4	; 0x4
    23f0:	1a0008ff 	bne	47f4 <cfi_amdstd_destroy+0x6c4>
    23f4:	e1a00005 	mov	r0, r5
    23f8:	e1a0100c 	mov	r1, r12
    23fc:	e1a0e00f 	mov	lr, pc
    2400:	e595f024 	ldr	pc, [r5, #36]
    2404:	e5952008 	ldr	r2, [r5, #8]
    2408:	e51be034 	ldr	lr, [r11, -#52]
    240c:	e15e0002 	cmp	lr, r2
    2410:	e1a00002 	mov	r0, r2
    2414:	2a00075b 	bcs	4188 <cfi_amdstd_destroy+0x58>
    2418:	e598301c 	ldr	r3, [r8, #28]
    241c:	e3530000 	cmp	r3, #0	; 0x0
    2420:	0a000962 	beq	49b0 <cfi_amdstd_destroy+0x880>
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    2424:	e3a0c000 	mov	r12, #0	; 0x0
    2428:	e3500001 	cmp	r0, #1	; 0x1
    242c:	0a000917 	beq	4890 <cfi_amdstd_destroy+0x760>
    2430:	e3500002 	cmp	r0, #2	; 0x2
    2434:	1a000912 	bne	4884 <cfi_amdstd_destroy+0x754>
    2438:	e5981008 	ldr	r1, [r8, #8]
    243c:	e3510001 	cmp	r1, #1	; 0x1
    2440:	0a000917 	beq	48a4 <cfi_amdstd_destroy+0x774>
    2444:	e59f3244 	ldr	r3, [pc, #244]	; 2690 <cfi_amdstd_write+0xd30>
    2448:	e3510002 	cmp	r1, #2	; 0x2
    244c:	ea00091e 	b	48cc <cfi_amdstd_destroy+0x79c>
    2450:	e3500004 	cmp	r0, #4	; 0x4
    2454:	1a000920 	bne	48dc <cfi_amdstd_destroy+0x7ac>
    2458:	e5981008 	ldr	r1, [r8, #8]
    245c:	e3510001 	cmp	r1, #1	; 0x1
    2460:	1a000919 	bne	48cc <cfi_amdstd_destroy+0x79c>
    2464:	e3a0c090 	mov	r12, #144	; 0x90
    2468:	ea000920 	b	48f0 <cfi_amdstd_destroy+0x7c0>
    246c:	e3510002 	cmp	r1, #2	; 0x2
    2470:	059fc21c 	ldreq	r12, [pc, #21c]	; 2694 <cfi_amdstd_write+0xd34>
    2474:	0a000920 	beq	48fc <cfi_amdstd_destroy+0x7cc>
    2478:	e59f3218 	ldr	r3, [pc, #218]	; 2698 <cfi_amdstd_write+0xd38>
    247c:	e3510004 	cmp	r1, #4	; 0x4
    2480:	01a0c003 	moveq	r12, r3
    2484:	13a0c000 	movne	r12, #0	; 0x0
    2488:	e5953008 	ldr	r3, [r5, #8]
    248c:	e3530001 	cmp	r3, #1	; 0x1
    2490:	1a000929 	bne	493c <cfi_amdstd_destroy+0x80c>
    2494:	e1a00005 	mov	r0, r5
    2498:	e20c1090 	and	r1, r12, #144	; 0x90
    249c:	e1a0200a 	mov	r2, r10
    24a0:	e1a0e00f 	mov	lr, pc
    24a4:	e595f01c 	ldr	pc, [r5, #28]
    24a8:	ea000939 	b	4994 <cfi_amdstd_destroy+0x864>
    24ac:	e3530002 	cmp	r3, #2	; 0x2
    24b0:	1a000932 	bne	4980 <cfi_amdstd_destroy+0x850>
    24b4:	e1a00005 	mov	r0, r5
    24b8:	e59f11d0 	ldr	r1, [pc, #1d0]	; 2690 <cfi_amdstd_write+0xd30>
    24bc:	e1a0200a 	mov	r2, r10
    24c0:	e00c1001 	and	r1, r12, r1
    24c4:	e1a0e00f 	mov	lr, pc
    24c8:	e595f020 	ldr	pc, [r5, #32]
    24cc:	ea000939 	b	49b8 <cfi_amdstd_destroy+0x888>
    24d0:	e3530004 	cmp	r3, #4	; 0x4
    24d4:	1a000939 	bne	49c0 <cfi_amdstd_destroy+0x890>
    24d8:	e1a00005 	mov	r0, r5
    24dc:	e1a0100c 	mov	r1, r12
    24e0:	e1a0200a 	mov	r2, r10
    24e4:	e1a0e00f 	mov	lr, pc
    24e8:	e595f024 	ldr	pc, [r5, #36]
    24ec:	e5953008 	ldr	r3, [r5, #8]
    24f0:	e3a01000 	mov	r1, #0	; 0x0
    24f4:	e3530001 	cmp	r3, #1	; 0x1
    24f8:	0a00094a 	beq	4a28 <cfi_amdstd_destroy+0x8f8>
    24fc:	e3530002 	cmp	r3, #2	; 0x2
    2500:	1a000942 	bne	4a10 <cfi_amdstd_destroy+0x8e0>
    2504:	e5983008 	ldr	r3, [r8, #8]
    2508:	e3530001 	cmp	r3, #1	; 0x1
    250c:	ea000948 	b	4a34 <cfi_amdstd_destroy+0x904>
    2510:	e3530004 	cmp	r3, #4	; 0x4
    2514:	1a00094a 	bne	4a44 <cfi_amdstd_destroy+0x914>
    2518:	e5983008 	ldr	r3, [r8, #8]
    251c:	e3530001 	cmp	r3, #1	; 0x1
    2520:	0a00094a 	beq	4a50 <cfi_amdstd_destroy+0x920>
    2524:	e3530002 	cmp	r3, #2	; 0x2
    2528:	0a00094a 	beq	4a58 <cfi_amdstd_destroy+0x928>
    252c:	e3a01000 	mov	r1, #0	; 0x0
    2530:	e5953008 	ldr	r3, [r5, #8]
    2534:	e3530001 	cmp	r3, #1	; 0x1
    2538:	1a000953 	bne	4a8c <cfi_amdstd_destroy+0x95c>
    253c:	e1a00005 	mov	r0, r5
    2540:	e20110ff 	and	r1, r1, #255	; 0xff
    2544:	e1a0200a 	mov	r2, r10
    2548:	e1a0e00f 	mov	lr, pc
    254c:	e595f01c 	ldr	pc, [r5, #28]
    2550:	ea000962 	b	4ae0 <cfi_amdstd_destroy+0x9b0>
    2554:	e3530002 	cmp	r3, #2	; 0x2
    2558:	1a00095c 	bne	4ad0 <cfi_amdstd_destroy+0x9a0>
    255c:	e1a00005 	mov	r0, r5
    2560:	e1a01801 	mov	r1, r1, lsl #16
    2564:	e1a01821 	mov	r1, r1, lsr #16
    2568:	e1a0200a 	mov	r2, r10
    256c:	e1a0e00f 	mov	lr, pc
    2570:	e595f020 	ldr	pc, [r5, #32]
    2574:	ea000962 	b	4b04 <cfi_amdstd_destroy+0x9d4>
    2578:	e3530004 	cmp	r3, #4	; 0x4
    257c:	1a000962 	bne	4b0c <cfi_amdstd_destroy+0x9dc>
    2580:	e1a00005 	mov	r0, r5
    2584:	e1a0200a 	mov	r2, r10
    2588:	e1a0e00f 	mov	lr, pc
    258c:	e595f024 	ldr	pc, [r5, #36]
    2590:	e5952008 	ldr	r2, [r5, #8]
    2594:	e51b0034 	ldr	r0, [r11, -#52]
    2598:	e2423001 	sub	r3, r2, #1	; 0x1
    259c:	e1100003 	tst	r0, r3
    25a0:	0a0009a9 	beq	4c4c <cfi_amdstd_destroy+0xb1c>
    25a4:	e3a07000 	mov	r7, #0	; 0x0
    25a8:	e1a00005 	mov	r0, r5
    25ac:	e24ba030 	sub	r10, r11, #48	; 0x30
    25b0:	e1a0100a 	mov	r1, r10
    25b4:	e1a03002 	mov	r3, r2
    25b8:	e51b203c 	ldr	r2, [r11, -#60]
    25bc:	e51be044 	ldr	lr, [r11, -#68]
    25c0:	e1a04102 	mov	r4, r2, lsl #2
    25c4:	e084c002 	add	r12, r4, r2
    25c8:	e082c08c 	add	r12, r2, r12, lsl #1
    25cc:	e79e210c 	ldr	r2, [lr, r12, lsl #2]
    25d0:	e51bc034 	ldr	r12, [r11, -#52]
    25d4:	e51be040 	ldr	lr, [r11, -#64]
    25d8:	e24cc001 	sub	r12, r12, #1	; 0x1
    25dc:	e08e2002 	add	r2, lr, r2
    25e0:	e50bc034 	str	r12, [r11, -#52]
    25e4:	e1a0e00f 	mov	lr, pc
    25e8:	e595f018 	ldr	pc, [r5, #24]
    25ec:	e51b0034 	ldr	r0, [r11, -#52]
    25f0:	e1a06007 	mov	r6, r7
    25f4:	e3700001 	cmn	r0, #1	; 0x1
    25f8:	0a000988 	beq	4c20 <cfi_amdstd_destroy+0xaf0>
    25fc:	e1a0100a 	mov	r1, r10
    2600:	e59b2008 	ldr	r2, [r11, #8]
    2604:	e51bc034 	ldr	r12, [r11, -#52]
    2608:	e7d23007 	ldrb	r3, [r2, r7]
    260c:	e2877001 	add	r7, r7, #1	; 0x1
    2610:	e24cc001 	sub	r12, r12, #1	; 0x1
    2614:	e37c0001 	cmn	r12, #1	; 0x1
    2618:	e50bc034 	str	r12, [r11, -#52]
    261c:	e7c13006 	strb	r3, [r1, r6]
    2620:	e2866001 	add	r6, r6, #1	; 0x1
    2624:	1a00097e 	bne	4c24 <cfi_amdstd_destroy+0xaf4>
    2628:	e5953008 	ldr	r3, [r5, #8]
    262c:	e3530002 	cmp	r3, #2	; 0x2
    2630:	015b33b0 	ldreqh	r3, [r11, -#48]
    2634:	0a00098f 	beq	4c78 <cfi_amdstd_destroy+0xb48>
    2638:	e3530004 	cmp	r3, #4	; 0x4
    263c:	1a00099e 	bne	4cbc <cfi_amdstd_destroy+0xb8c>
    2640:	e51b3030 	ldr	r3, [r11, -#48]
    2644:	e1a00005 	mov	r0, r5
    2648:	e51be03c 	ldr	lr, [r11, -#60]
    264c:	e51b2040 	ldr	r2, [r11, -#64]
    2650:	e3a0c000 	mov	r12, #0	; 0x0
    2654:	e58dc000 	str	r12, [sp]
    2658:	e084100e 	add	r1, r4, lr
    265c:	e08e1081 	add	r1, lr, r1, lsl #1
    2660:	e1a01101 	mov	r1, r1, lsl #2
    2664:	e281103c 	add	r1, r1, #60	; 0x3c
    2668:	e0881001 	add	r1, r8, r1
    266c:	eb0003ff 	bl	3670 <cfi_amdstd_erase_onesize+0x414>
    2670:	e3500000 	cmp	r0, #0	; 0x0
    2674:	e50b0038 	str	r0, [r11, -#56]
    2678:	0a0009a5 	beq	4d14 <cfi_amdstd_destroy+0xbe4>
    267c:	ea0009aa 	b	4d2c <cfi_amdstd_destroy+0xbfc>
    2680:	e3e00015 	mvn	r0, #21	; 0x15
    2684:	ea0009aa 	b	4d34 <cfi_amdstd_destroy+0xc04>
    2688:	20202020 	eorcs	r2, r0, r0, lsr #32
    268c:	00002020 	andeq	r2, r0, r0, lsr #32
    2690:	00009090 	muleq	r0, r0, r0
    2694:	00900090 	umulleqs	r0, r0, r0, r0
    2698:	90909090 	umulllss	r9, r0, r0, r0
    269c:	e59b0004 	ldr	r0, [r11, #4]
    26a0:	e5903000 	ldr	r3, [r0]
    26a4:	e0833007 	add	r3, r3, r7
    26a8:	e5803000 	str	r3, [r0]
    26ac:	e3a00000 	mov	r0, #0	; 0x0
    26b0:	e91baff0 	ldmdb	r11, {r4, r5, r6, r7, r8, r9, r10, r11, sp, pc}

000026b4 <cfi_amdstd_erase_varsize>:
    26b4:	e1a0c00d 	mov	r12, sp
    26b8:	e92ddff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    26bc:	e24cb004 	sub	r11, r12, #4	; 0x4
    26c0:	e24dd044 	sub	sp, sp, #68	; 0x44
    26c4:	e50b104c 	str	r1, [r11, -#76]
    26c8:	e5911004 	ldr	r1, [r1, #4]
    26cc:	e590a078 	ldr	r10, [r0, #120]
    26d0:	e590c008 	ldr	r12, [r0, #8]
    26d4:	e59a2038 	ldr	r2, [r10, #56]
    26d8:	e3a09000 	mov	r9, #0	; 0x0
    26dc:	e50b2050 	str	r2, [r11, -#80]
    26e0:	e590302c 	ldr	r3, [r0, #44]
    26e4:	e151000c 	cmp	r1, r12
    26e8:	e50b3064 	str	r3, [r11, -#100]
    26ec:	8a0009c0 	bhi	4df4 <cfi_amdstd_destroy+0xcc4>
    26f0:	e51b304c 	ldr	r3, [r11, -#76]
    26f4:	e5932008 	ldr	r2, [r3, #8]
    26f8:	e0823001 	add	r3, r2, r1
    26fc:	e153000c 	cmp	r3, r12
    2700:	e1a04002 	mov	r4, r2
    2704:	9a0009c2 	bls	4e14 <cfi_amdstd_destroy+0xce4>
    2708:	e3e00015 	mvn	r0, #21	; 0x15
    270c:	ea000c92 	b	595c <cfi_amdstd_destroy+0x182c>
    2710:	e5900028 	ldr	r0, [r0, #40]
    2714:	e1a0c001 	mov	r12, r1
    2718:	e50b9060 	str	r9, [r11, -#96]
    271c:	e1590000 	cmp	r9, r0
    2720:	e1a0e000 	mov	lr, r0
    2724:	aa0009d6 	bge	4e84 <cfi_amdstd_destroy+0xd54>
    2728:	e51b1064 	ldr	r1, [r11, -#100]
    272c:	e5913000 	ldr	r3, [r1]
    2730:	e15c0003 	cmp	r12, r3
    2734:	3a0009d6 	bcc	4e94 <cfi_amdstd_destroy+0xd64>
    2738:	e1a0100c 	mov	r1, r12
    273c:	e51b2064 	ldr	r2, [r11, -#100]
    2740:	e51b3060 	ldr	r3, [r11, -#96]
    2744:	e2833001 	add	r3, r3, #1	; 0x1
    2748:	e1530000 	cmp	r3, r0
    274c:	e50b3060 	str	r3, [r11, -#96]
    2750:	aa0009d6 	bge	4eb0 <cfi_amdstd_destroy+0xd80>
    2754:	e5b2300c 	ldr	r3, [r2, #12]!
    2758:	e1510003 	cmp	r1, r3
    275c:	2a0009ce 	bcs	4e9c <cfi_amdstd_destroy+0xd6c>
    2760:	e51b1060 	ldr	r1, [r11, -#96]
    2764:	e2411001 	sub	r1, r1, #1	; 0x1
    2768:	e0813081 	add	r3, r1, r1, lsl #1
    276c:	e1a02103 	mov	r2, r3, lsl #2
    2770:	e51b3064 	ldr	r3, [r11, -#100]
    2774:	e50b1060 	str	r1, [r11, -#96]
    2778:	e0820003 	add	r0, r2, r3
    277c:	e5903004 	ldr	r3, [r0, #4]
    2780:	e2433001 	sub	r3, r3, #1	; 0x1
    2784:	e11c0003 	tst	r12, r3
    2788:	1a0009c0 	bne	4e90 <cfi_amdstd_destroy+0xd60>
    278c:	e51b1060 	ldr	r1, [r11, -#96]
    2790:	e151000e 	cmp	r1, lr
    2794:	e1a05001 	mov	r5, r1
    2798:	aa0009f4 	bge	4f70 <cfi_amdstd_destroy+0xe40>
    279c:	e51b1064 	ldr	r1, [r11, -#100]
    27a0:	e7923001 	ldr	r3, [r2, r1]
    27a4:	e08c2004 	add	r2, r12, r4
    27a8:	e1520003 	cmp	r2, r3
    27ac:	3a0009f4 	bcc	4f84 <cfi_amdstd_destroy+0xe54>
    27b0:	e1a01002 	mov	r1, r2
    27b4:	e1a02000 	mov	r2, r0
    27b8:	e51b3060 	ldr	r3, [r11, -#96]
    27bc:	e2833001 	add	r3, r3, #1	; 0x1
    27c0:	e153000e 	cmp	r3, lr
    27c4:	e50b3060 	str	r3, [r11, -#96]
    27c8:	aa0009f4 	bge	4fa0 <cfi_amdstd_destroy+0xe70>
    27cc:	e5b2300c 	ldr	r3, [r2, #12]!
    27d0:	e1510003 	cmp	r1, r3
    27d4:	2a0009ec 	bcs	4f8c <cfi_amdstd_destroy+0xe5c>
    27d8:	e51b1060 	ldr	r1, [r11, -#96]
    27dc:	e51b2064 	ldr	r2, [r11, -#100]
    27e0:	e2411001 	sub	r1, r1, #1	; 0x1
    27e4:	e0813081 	add	r3, r1, r1, lsl #1
    27e8:	e0823103 	add	r3, r2, r3, lsl #2
    27ec:	e5932004 	ldr	r2, [r3, #4]
    27f0:	e08c1004 	add	r1, r12, r4
    27f4:	e2422001 	sub	r2, r2, #1	; 0x1
    27f8:	e1110002 	tst	r1, r2
    27fc:	0a000a01 	beq	5008 <cfi_amdstd_destroy+0xed8>
    2800:	ea0009c0 	b	4f08 <cfi_amdstd_destroy+0xdd8>
    2804:	e1a00009 	mov	r0, r9
    2808:	ea000c92 	b	5a58 <cfi_amdstd_destroy+0x1928>
    280c:	e51b1050 	ldr	r1, [r11, -#80]
    2810:	e50b5060 	str	r5, [r11, -#96]
    2814:	e5913034 	ldr	r3, [r1, #52]
    2818:	e3540000 	cmp	r4, #0	; 0x0
    281c:	e50b4058 	str	r4, [r11, -#88]
    2820:	e1a0233c 	mov	r2, r12, lsr r3
    2824:	e04cc312 	sub	r12, r12, r2, lsl r3
    2828:	e50b205c 	str	r2, [r11, -#92]
    282c:	e50bc054 	str	r12, [r11, -#84]
    2830:	0a000c88 	beq	5a58 <cfi_amdstd_destroy+0x1928>
    2834:	e0823102 	add	r3, r2, r2, lsl #2
    2838:	e0823083 	add	r3, r2, r3, lsl #1
    283c:	e1a03103 	mov	r3, r3, lsl #2
    2840:	e283303c 	add	r3, r3, #60	; 0x3c
    2844:	e0833001 	add	r3, r3, r1
    2848:	e50b306c 	str	r3, [r11, -#108]
    284c:	e24b0048 	sub	r0, r11, #72	; 0x48
    2850:	e3a01000 	mov	r1, #0	; 0x0
    2854:	e3a02010 	mov	r2, #16	; 0x10
    2858:	e51b706c 	ldr	r7, [r11, -#108]
    285c:	e59fc388 	ldr	r12, [pc, #388]	; 2bec <cfi_amdstd_erase_varsize+0x538>
    2860:	e59a5038 	ldr	r5, [r10, #56]
    2864:	e59c3000 	ldr	r3, [r12]
    2868:	ebfffffe 	bl	2868 <cfi_amdstd_erase_varsize+0x1b4>

static inline struct task_struct *get_current(void)
{
	register unsigned long sp asm ("sp");
	return (struct task_struct *)(sp & ~0x1fff);
    286c:	e3cd3d7f 	bic	r3, sp, #8128	; 0x1fc0
    2870:	e3c3303f 	bic	r3, r3, #63	; 0x3f
    2874:	e24bc048 	sub	r12, r11, #72	; 0x48
    2878:	e50b3068 	str	r3, [r11, -#104]
    287c:	e50b3044 	str	r3, [r11, -#68]
    2880:	e89c000f 	ldmia	r12, {r0, r1, r2, r3}
    2884:	e24be038 	sub	lr, r11, #56	; 0x38
    2888:	e88e000f 	stmia	lr, {r0, r1, r2, r3}
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    288c:	e59f135c 	ldr	r1, [pc, #35c]	; 2bf0 <cfi_amdstd_erase_varsize+0x53c>
    2890:	e5913008 	ldr	r3, [r1, #8]
    2894:	e2833001 	add	r3, r3, #1	; 0x1
    2898:	e5813008 	str	r3, [r1, #8]
    289c:	e5974004 	ldr	r4, [r7, #4]
    28a0:	e3540000 	cmp	r4, #0	; 0x0
    28a4:	0a000a40 	beq	51ac <cfi_amdstd_destroy+0x107c>
    28a8:	e51b2068 	ldr	r2, [r11, -#104]
    28ac:	e3a03002 	mov	r3, #2	; 0x2
    28b0:	e5823000 	str	r3, [r2]
    28b4:	e2874014 	add	r4, r7, #20	; 0x14
    28b8:	e1a00004 	mov	r0, r4
    28bc:	e24b1038 	sub	r1, r11, #56	; 0x38
    28c0:	ebfffffe 	bl	28c0 <cfi_amdstd_erase_varsize+0x20c>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    28c4:	e59fc328 	ldr	r12, [pc, #328]	; 2bf4 <cfi_amdstd_erase_varsize+0x540>
    28c8:	e59c3000 	ldr	r3, [r12]
    28cc:	e2433001 	sub	r3, r3, #1	; 0x1
    28d0:	e3530000 	cmp	r3, #0	; 0x0
    28d4:	e58c3000 	str	r3, [r12]
    28d8:	1a000a39 	bne	51c4 <cfi_amdstd_destroy+0x1094>
    28dc:	e51c3008 	ldr	r3, [r12, -#8]
    28e0:	e3530000 	cmp	r3, #0	; 0x0
    28e4:	0a000a39 	beq	51d0 <cfi_amdstd_destroy+0x10a0>
    28e8:	ebfffffe 	bl	28e8 <cfi_amdstd_erase_varsize+0x234>
    28ec:	ebfffffe 	bl	28ec <cfi_amdstd_erase_varsize+0x238>
    28f0:	e1a00004 	mov	r0, r4
    28f4:	e24b1038 	sub	r1, r11, #56	; 0x38
    28f8:	ebfffffe 	bl	28f8 <cfi_amdstd_erase_varsize+0x244>
    28fc:	e59f12e8 	ldr	r1, [pc, #2e8]	; 2bec <cfi_amdstd_erase_varsize+0x538>
    2900:	e5913000 	ldr	r3, [r1]
    2904:	ea000a21 	b	5190 <cfi_amdstd_destroy+0x1060>
    2908:	e5972000 	ldr	r2, [r7]
    290c:	e3a03004 	mov	r3, #4	; 0x4
    2910:	e5873004 	str	r3, [r7, #4]
    2914:	e51b3054 	ldr	r3, [r11, -#84]
    2918:	e0839002 	add	r9, r3, r2
    291c:	e59a302c 	ldr	r3, [r10, #44]
    2920:	e3530000 	cmp	r3, #0	; 0x0
    2924:	0a000a4c 	beq	525c <cfi_amdstd_destroy+0x112c>
    2928:	e1a0000a 	mov	r0, r10
    292c:	e3a01001 	mov	r1, #1	; 0x1
    2930:	e1a0e00f 	mov	lr, pc
    2934:	e1a0f003 	mov	pc, r3
 * Transforms the CFI command for the given geometry (bus width & interleave.
 */
static inline __u32 cfi_build_cmd(u_char cmd, struct map_info *map, struct cfi_private *cfi)
{
	__u32 val = 0;
    2938:	e1a01004 	mov	r1, r4

	if (cfi_buswidth_is_1()) {
		/* 1 x8 device */
		val = cmd;
	} else if (cfi_buswidth_is_2()) {
		if (cfi_interleave_is_1()) {
			/* 1 x16 device in x16 mode */
			val = cpu_to_cfi16(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 (x8, x16 or x32) devices in x8 mode */
			val = cpu_to_cfi16((cmd << 8) | cmd);
		}
	} else if (cfi_buswidth_is_4()) {
		if (cfi_interleave_is_1()) {
			/* 1 x32 device in x32 mode */
			val = cpu_to_cfi32(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 x16 device in x16 mode */
			val = cpu_to_cfi32((cmd << 16) | cmd);
		} else if (cfi_interleave_is_4()) {
			/* 4 (x8, x16 or x32) devices in x8 mode */
			val = (cmd << 16) | cmd;
			val = cpu_to_cfi32((val << 8) | val);
		}
	}
	return val;
}
#define CMD(x)  cfi_build_cmd((x), map, cfi)

/*
 * Read a value according to the bus width.
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return map->read16(map, addr);
	} else if (cfi_buswidth_is_4()) {
		return map->read32(map, addr);
	} else {
		return 0;
	}
}

/*
 * Write a value according to the bus width.
 */

static inline void cfi_write(struct map_info *map, __u32 val, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		map->write8(map, val, addr);
	} else if (cfi_buswidth_is_2()) {
		map->write16(map, val, addr);
	} else if (cfi_buswidth_is_4()) {
		map->write32(map, val, addr);
	}
}

/*
 * Sends a CFI command to a bank of flash for the given geometry.
 *
 * Returns the offset in flash where the command was written.
 * If prev_val is non-null, it will be set to the value at the command address,
 * before the command was written.
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    293c:	e5952014 	ldr	r2, [r5, #20]
    2940:	e5973000 	ldr	r3, [r7]
    2944:	e59a0008 	ldr	r0, [r10, #8]
    2948:	e595c008 	ldr	r12, [r5, #8]
    294c:	e3500001 	cmp	r0, #1	; 0x1
	__u32 val;
	__u32 addr = base + cfi_build_cmd_addr(cmd_addr, CFIDEV_INTERLEAVE, type);
    2950:	e022329c 	mla	r2, r12, r2, r3
    2954:	0a000a5f 	beq	52d8 <cfi_amdstd_destroy+0x11a8>
    2958:	e3500002 	cmp	r0, #2	; 0x2
    295c:	1a000a5b 	bne	52d0 <cfi_amdstd_destroy+0x11a0>
    2960:	e35c0001 	cmp	r12, #1	; 0x1
    2964:	0a000a5f 	beq	52e8 <cfi_amdstd_destroy+0x11b8>
    2968:	e59f3288 	ldr	r3, [pc, #288]	; 2bf8 <cfi_amdstd_erase_varsize+0x544>
    296c:	e35c0002 	cmp	r12, #2	; 0x2
    2970:	ea000a66 	b	5310 <cfi_amdstd_destroy+0x11e0>
    2974:	e3500004 	cmp	r0, #4	; 0x4
    2978:	1a000a67 	bne	531c <cfi_amdstd_destroy+0x11ec>
    297c:	e35c0001 	cmp	r12, #1	; 0x1
    2980:	1a000a61 	bne	530c <cfi_amdstd_destroy+0x11dc>
    2984:	e3a010aa 	mov	r1, #170	; 0xaa
    2988:	ea000a67 	b	532c <cfi_amdstd_destroy+0x11fc>
    298c:	e35c0002 	cmp	r12, #2	; 0x2
    2990:	059f1264 	ldreq	r1, [pc, #264]	; 2bfc <cfi_amdstd_erase_varsize+0x548>
    2994:	0a000a67 	beq	5338 <cfi_amdstd_destroy+0x1208>
    2998:	e59f3260 	ldr	r3, [pc, #260]	; 2c00 <cfi_amdstd_erase_varsize+0x54c>
    299c:	e35c0004 	cmp	r12, #4	; 0x4
    29a0:	01a01003 	moveq	r1, r3
    29a4:	e59a3008 	ldr	r3, [r10, #8]
    29a8:	e3530001 	cmp	r3, #1	; 0x1
    29ac:	1a000a6f 	bne	5370 <cfi_amdstd_destroy+0x1240>
    29b0:	e1a0000a 	mov	r0, r10
    29b4:	e20110ff 	and	r1, r1, #255	; 0xff
    29b8:	e1a0e00f 	mov	lr, pc
    29bc:	e59af01c 	ldr	pc, [r10, #28]
    29c0:	ea000a7c 	b	53b8 <cfi_amdstd_destroy+0x1288>
    29c4:	e3530002 	cmp	r3, #2	; 0x2
    29c8:	1a000a77 	bne	53ac <cfi_amdstd_destroy+0x127c>
    29cc:	e1a0000a 	mov	r0, r10
    29d0:	e1a01801 	mov	r1, r1, lsl #16
    29d4:	e1a01821 	mov	r1, r1, lsr #16
    29d8:	e1a0e00f 	mov	lr, pc
    29dc:	e59af020 	ldr	pc, [r10, #32]
    29e0:	ea000a7c 	b	53d8 <cfi_amdstd_destroy+0x12a8>
    29e4:	e3530004 	cmp	r3, #4	; 0x4
    29e8:	1a000a7c 	bne	53e0 <cfi_amdstd_destroy+0x12b0>
    29ec:	e1a0000a 	mov	r0, r10
    29f0:	e1a0e00f 	mov	lr, pc
    29f4:	e59af024 	ldr	pc, [r10, #36]
    29f8:	e3a0c000 	mov	r12, #0	; 0x0
    29fc:	e5952018 	ldr	r2, [r5, #24]
    2a00:	e5973000 	ldr	r3, [r7]
    2a04:	e59a1008 	ldr	r1, [r10, #8]
    2a08:	e5950008 	ldr	r0, [r5, #8]
    2a0c:	e3510001 	cmp	r1, #1	; 0x1
    2a10:	e0223290 	mla	r2, r0, r2, r3
    2a14:	0a000a8f 	beq	5458 <cfi_amdstd_destroy+0x1328>
    2a18:	e3510002 	cmp	r1, #2	; 0x2
    2a1c:	1a000a8b 	bne	5450 <cfi_amdstd_destroy+0x1320>
    2a20:	e3500001 	cmp	r0, #1	; 0x1
    2a24:	0a000a8f 	beq	5468 <cfi_amdstd_destroy+0x1338>
    2a28:	e59f31d4 	ldr	r3, [pc, #1d4]	; 2c04 <cfi_amdstd_erase_varsize+0x550>
    2a2c:	e3500002 	cmp	r0, #2	; 0x2
    2a30:	ea000a96 	b	5490 <cfi_amdstd_destroy+0x1360>
    2a34:	e3510004 	cmp	r1, #4	; 0x4
    2a38:	1a000a98 	bne	54a0 <cfi_amdstd_destroy+0x1370>
    2a3c:	e3500001 	cmp	r0, #1	; 0x1
    2a40:	1a000a91 	bne	548c <cfi_amdstd_destroy+0x135c>
    2a44:	e3a0c055 	mov	r12, #85	; 0x55
    2a48:	ea000a98 	b	54b0 <cfi_amdstd_destroy+0x1380>
    2a4c:	e3500002 	cmp	r0, #2	; 0x2
    2a50:	059fc1b0 	ldreq	r12, [pc, #1b0]	; 2c08 <cfi_amdstd_erase_varsize+0x554>
    2a54:	0a000a98 	beq	54bc <cfi_amdstd_destroy+0x138c>
    2a58:	e59f31ac 	ldr	r3, [pc, #1ac]	; 2c0c <cfi_amdstd_erase_varsize+0x558>
    2a5c:	e3500004 	cmp	r0, #4	; 0x4
    2a60:	01a0c003 	moveq	r12, r3
    2a64:	13a0c000 	movne	r12, #0	; 0x0
    2a68:	e59a3008 	ldr	r3, [r10, #8]
    2a6c:	e3530001 	cmp	r3, #1	; 0x1
    2a70:	1a000aa0 	bne	54f8 <cfi_amdstd_destroy+0x13c8>
    2a74:	e1a0000a 	mov	r0, r10
    2a78:	e20c1055 	and	r1, r12, #85	; 0x55
    2a7c:	e1a0e00f 	mov	lr, pc
    2a80:	e59af01c 	ldr	pc, [r10, #28]
    2a84:	ea000aae 	b	5544 <cfi_amdstd_destroy+0x1414>
    2a88:	e3530002 	cmp	r3, #2	; 0x2
    2a8c:	1a000aa8 	bne	5534 <cfi_amdstd_destroy+0x1404>
    2a90:	e59f116c 	ldr	r1, [pc, #16c]	; 2c04 <cfi_amdstd_erase_varsize+0x550>
    2a94:	e1a0000a 	mov	r0, r10
    2a98:	e00c1001 	and	r1, r12, r1
    2a9c:	e1a0e00f 	mov	lr, pc
    2aa0:	e59af020 	ldr	pc, [r10, #32]
    2aa4:	ea000aae 	b	5564 <cfi_amdstd_destroy+0x1434>
    2aa8:	e3530004 	cmp	r3, #4	; 0x4
    2aac:	1a000aae 	bne	556c <cfi_amdstd_destroy+0x143c>
    2ab0:	e1a0000a 	mov	r0, r10
    2ab4:	e1a0100c 	mov	r1, r12
    2ab8:	e1a0e00f 	mov	lr, pc
    2abc:	e59af024 	ldr	pc, [r10, #36]
    2ac0:	e3a0c000 	mov	r12, #0	; 0x0
    2ac4:	e5952014 	ldr	r2, [r5, #20]
    2ac8:	e5973000 	ldr	r3, [r7]
    2acc:	e59a1008 	ldr	r1, [r10, #8]
    2ad0:	e5950008 	ldr	r0, [r5, #8]
    2ad4:	e3510001 	cmp	r1, #1	; 0x1
    2ad8:	e0223290 	mla	r2, r0, r2, r3
    2adc:	0a000ac1 	beq	55e8 <cfi_amdstd_destroy+0x14b8>
    2ae0:	e3510002 	cmp	r1, #2	; 0x2
    2ae4:	1a000abd 	bne	55e0 <cfi_amdstd_destroy+0x14b0>
    2ae8:	e3500001 	cmp	r0, #1	; 0x1
    2aec:	0a000ac1 	beq	55f8 <cfi_amdstd_destroy+0x14c8>
    2af0:	e59f3118 	ldr	r3, [pc, #118]	; 2c10 <cfi_amdstd_erase_varsize+0x55c>
    2af4:	e3500002 	cmp	r0, #2	; 0x2
    2af8:	ea000ac8 	b	5620 <cfi_amdstd_destroy+0x14f0>
    2afc:	e3510004 	cmp	r1, #4	; 0x4
    2b00:	1a000aca 	bne	5630 <cfi_amdstd_destroy+0x1500>
    2b04:	e3500001 	cmp	r0, #1	; 0x1
    2b08:	1a000ac3 	bne	561c <cfi_amdstd_destroy+0x14ec>
    2b0c:	e3a0c080 	mov	r12, #128	; 0x80
    2b10:	ea000aca 	b	5640 <cfi_amdstd_destroy+0x1510>
    2b14:	e3500002 	cmp	r0, #2	; 0x2
    2b18:	059fc0f4 	ldreq	r12, [pc, #f4]	; 2c14 <cfi_amdstd_erase_varsize+0x560>
    2b1c:	0a000aca 	beq	564c <cfi_amdstd_destroy+0x151c>
    2b20:	e59f30f0 	ldr	r3, [pc, #f0]	; 2c18 <cfi_amdstd_erase_varsize+0x564>
    2b24:	e3500004 	cmp	r0, #4	; 0x4
    2b28:	01a0c003 	moveq	r12, r3
    2b2c:	13a0c000 	movne	r12, #0	; 0x0
    2b30:	e59a3008 	ldr	r3, [r10, #8]
    2b34:	e3530001 	cmp	r3, #1	; 0x1
    2b38:	1a000ad2 	bne	5688 <cfi_amdstd_destroy+0x1558>
    2b3c:	e1a0000a 	mov	r0, r10
    2b40:	e20c1080 	and	r1, r12, #128	; 0x80
    2b44:	e1a0e00f 	mov	lr, pc
    2b48:	e59af01c 	ldr	pc, [r10, #28]
    2b4c:	ea000ae0 	b	56d4 <cfi_amdstd_destroy+0x15a4>
    2b50:	e3530002 	cmp	r3, #2	; 0x2
    2b54:	1a000ada 	bne	56c4 <cfi_amdstd_destroy+0x1594>
    2b58:	e59f10b0 	ldr	r1, [pc, #b0]	; 2c10 <cfi_amdstd_erase_varsize+0x55c>
    2b5c:	e1a0000a 	mov	r0, r10
    2b60:	e00c1001 	and	r1, r12, r1
    2b64:	e1a0e00f 	mov	lr, pc
    2b68:	e59af020 	ldr	pc, [r10, #32]
    2b6c:	ea000ae0 	b	56f4 <cfi_amdstd_destroy+0x15c4>
    2b70:	e3530004 	cmp	r3, #4	; 0x4
    2b74:	1a000ae0 	bne	56fc <cfi_amdstd_destroy+0x15cc>
    2b78:	e1a0000a 	mov	r0, r10
    2b7c:	e1a0100c 	mov	r1, r12
    2b80:	e1a0e00f 	mov	lr, pc
    2b84:	e59af024 	ldr	pc, [r10, #36]
    2b88:	e3a0c000 	mov	r12, #0	; 0x0
    2b8c:	e5952014 	ldr	r2, [r5, #20]
    2b90:	e5973000 	ldr	r3, [r7]
    2b94:	e59a1008 	ldr	r1, [r10, #8]
    2b98:	e5950008 	ldr	r0, [r5, #8]
    2b9c:	e3510001 	cmp	r1, #1	; 0x1
    2ba0:	e0223290 	mla	r2, r0, r2, r3
    2ba4:	0a000af3 	beq	5778 <cfi_amdstd_destroy+0x1648>
    2ba8:	e3510002 	cmp	r1, #2	; 0x2
    2bac:	1a000aef 	bne	5770 <cfi_amdstd_destroy+0x1640>
    2bb0:	e3500001 	cmp	r0, #1	; 0x1
    2bb4:	0a000af3 	beq	5788 <cfi_amdstd_destroy+0x1658>
    2bb8:	e59f3038 	ldr	r3, [pc, #38]	; 2bf8 <cfi_amdstd_erase_varsize+0x544>
    2bbc:	e3500002 	cmp	r0, #2	; 0x2
    2bc0:	ea000b07 	b	57e4 <cfi_amdstd_destroy+0x16b4>
    2bc4:	e3510004 	cmp	r1, #4	; 0x4
    2bc8:	1a000b09 	bne	57f4 <cfi_amdstd_destroy+0x16c4>
    2bcc:	e3500001 	cmp	r0, #1	; 0x1
    2bd0:	1a000af5 	bne	57ac <cfi_amdstd_destroy+0x167c>
    2bd4:	e3a0c0aa 	mov	r12, #170	; 0xaa
    2bd8:	ea000b09 	b	5804 <cfi_amdstd_destroy+0x16d4>
    2bdc:	e3500002 	cmp	r0, #2	; 0x2
    2be0:	1a000b05 	bne	57fc <cfi_amdstd_destroy+0x16cc>
    2be4:	e59fc010 	ldr	r12, [pc, #10]	; 2bfc <cfi_amdstd_erase_varsize+0x548>
    2be8:	ea000b09 	b	5814 <cfi_amdstd_destroy+0x16e4>
	...
    2bf4:	00000008 	andeq	r0, r0, r8
    2bf8:	0000aaaa 	andeq	r10, r0, r10, lsr #21
    2bfc:	00aa00aa 	adceq	r0, r10, r10, lsr #1
    2c00:	aaaaaaaa 	bge	feaad6b0 <cfi_amdstd_destroy+0xfeaa9580>
    2c04:	00005555 	andeq	r5, r0, r5, asr r5
    2c08:	00550055 	subeqs	r0, r5, r5, asr r0
    2c0c:	55555555 	ldrplb	r5, [r5, -#1365]
    2c10:	00008080 	andeq	r8, r0, r0, lsl #1
    2c14:	00800080 	addeq	r0, r0, r0, lsl #1
    2c18:	80808080 	addhi	r8, r0, r0, lsl #1
    2c1c:	e59f3338 	ldr	r3, [pc, #338]	; 2f5c <cfi_amdstd_erase_varsize+0x8a8>
    2c20:	e3500004 	cmp	r0, #4	; 0x4
    2c24:	01a0c003 	moveq	r12, r3
    2c28:	13a0c000 	movne	r12, #0	; 0x0
    2c2c:	e59a3008 	ldr	r3, [r10, #8]
    2c30:	e3530001 	cmp	r3, #1	; 0x1
    2c34:	1a000b11 	bne	5880 <cfi_amdstd_destroy+0x1750>
    2c38:	e1a0000a 	mov	r0, r10
    2c3c:	e20c10aa 	and	r1, r12, #170	; 0xaa
    2c40:	e1a0e00f 	mov	lr, pc
    2c44:	e59af01c 	ldr	pc, [r10, #28]
    2c48:	ea000b1f 	b	58cc <cfi_amdstd_destroy+0x179c>
    2c4c:	e3530002 	cmp	r3, #2	; 0x2
    2c50:	1a000b19 	bne	58bc <cfi_amdstd_destroy+0x178c>
    2c54:	e59f1304 	ldr	r1, [pc, #304]	; 2f60 <cfi_amdstd_erase_varsize+0x8ac>
    2c58:	e1a0000a 	mov	r0, r10
    2c5c:	e00c1001 	and	r1, r12, r1
    2c60:	e1a0e00f 	mov	lr, pc
    2c64:	e59af020 	ldr	pc, [r10, #32]
    2c68:	ea000b1f 	b	58ec <cfi_amdstd_destroy+0x17bc>
    2c6c:	e3530004 	cmp	r3, #4	; 0x4
    2c70:	1a000b1f 	bne	58f4 <cfi_amdstd_destroy+0x17c4>
    2c74:	e1a0000a 	mov	r0, r10
    2c78:	e1a0100c 	mov	r1, r12
    2c7c:	e1a0e00f 	mov	lr, pc
    2c80:	e59af024 	ldr	pc, [r10, #36]
    2c84:	e3a0c000 	mov	r12, #0	; 0x0
    2c88:	e5952018 	ldr	r2, [r5, #24]
    2c8c:	e5973000 	ldr	r3, [r7]
    2c90:	e59a1008 	ldr	r1, [r10, #8]
    2c94:	e5950008 	ldr	r0, [r5, #8]
    2c98:	e3510001 	cmp	r1, #1	; 0x1
    2c9c:	e0223290 	mla	r2, r0, r2, r3
    2ca0:	0a000b32 	beq	5970 <cfi_amdstd_destroy+0x1840>
    2ca4:	e3510002 	cmp	r1, #2	; 0x2
    2ca8:	1a000b2e 	bne	5968 <cfi_amdstd_destroy+0x1838>
    2cac:	e3500001 	cmp	r0, #1	; 0x1
    2cb0:	0a000b32 	beq	5980 <cfi_amdstd_destroy+0x1850>
    2cb4:	e59f32a8 	ldr	r3, [pc, #2a8]	; 2f64 <cfi_amdstd_erase_varsize+0x8b0>
    2cb8:	e3500002 	cmp	r0, #2	; 0x2
    2cbc:	ea000b39 	b	59a8 <cfi_amdstd_destroy+0x1878>
    2cc0:	e3510004 	cmp	r1, #4	; 0x4
    2cc4:	1a000b3b 	bne	59b8 <cfi_amdstd_destroy+0x1888>
    2cc8:	e3500001 	cmp	r0, #1	; 0x1
    2ccc:	1a000b34 	bne	59a4 <cfi_amdstd_destroy+0x1874>
    2cd0:	e3a0c055 	mov	r12, #85	; 0x55
    2cd4:	ea000b3b 	b	59c8 <cfi_amdstd_destroy+0x1898>
    2cd8:	e3500002 	cmp	r0, #2	; 0x2
    2cdc:	059fc284 	ldreq	r12, [pc, #284]	; 2f68 <cfi_amdstd_erase_varsize+0x8b4>
    2ce0:	0a000b3b 	beq	59d4 <cfi_amdstd_destroy+0x18a4>
    2ce4:	e59f3280 	ldr	r3, [pc, #280]	; 2f6c <cfi_amdstd_erase_varsize+0x8b8>
    2ce8:	e3500004 	cmp	r0, #4	; 0x4
    2cec:	01a0c003 	moveq	r12, r3
    2cf0:	13a0c000 	movne	r12, #0	; 0x0
    2cf4:	e59a3008 	ldr	r3, [r10, #8]
    2cf8:	e3530001 	cmp	r3, #1	; 0x1
    2cfc:	1a000b43 	bne	5a10 <cfi_amdstd_destroy+0x18e0>
    2d00:	e1a0000a 	mov	r0, r10
    2d04:	e20c1055 	and	r1, r12, #85	; 0x55
    2d08:	e1a0e00f 	mov	lr, pc
    2d0c:	e59af01c 	ldr	pc, [r10, #28]
    2d10:	ea000b51 	b	5a5c <cfi_amdstd_destroy+0x192c>
    2d14:	e3530002 	cmp	r3, #2	; 0x2
    2d18:	1a000b4b 	bne	5a4c <cfi_amdstd_destroy+0x191c>
    2d1c:	e59f1240 	ldr	r1, [pc, #240]	; 2f64 <cfi_amdstd_erase_varsize+0x8b0>
    2d20:	e1a0000a 	mov	r0, r10
    2d24:	e00c1001 	and	r1, r12, r1
    2d28:	e1a0e00f 	mov	lr, pc
    2d2c:	e59af020 	ldr	pc, [r10, #32]
    2d30:	ea000b51 	b	5a7c <cfi_amdstd_destroy+0x194c>
    2d34:	e3530004 	cmp	r3, #4	; 0x4
    2d38:	1a000b51 	bne	5a84 <cfi_amdstd_destroy+0x1954>
    2d3c:	e1a0000a 	mov	r0, r10
    2d40:	e1a0100c 	mov	r1, r12
    2d44:	e1a0e00f 	mov	lr, pc
    2d48:	e59af024 	ldr	pc, [r10, #36]
    2d4c:	e59a3008 	ldr	r3, [r10, #8]
    2d50:	e3a0c000 	mov	r12, #0	; 0x0
    2d54:	e3530001 	cmp	r3, #1	; 0x1
    2d58:	0a000b62 	beq	5ae8 <cfi_amdstd_destroy+0x19b8>
    2d5c:	e3530002 	cmp	r3, #2	; 0x2
    2d60:	1a000b5d 	bne	5adc <cfi_amdstd_destroy+0x19ac>
    2d64:	e5951008 	ldr	r1, [r5, #8]
    2d68:	e3510001 	cmp	r1, #1	; 0x1
    2d6c:	0a000b62 	beq	5afc <cfi_amdstd_destroy+0x19cc>
    2d70:	e59f31f8 	ldr	r3, [pc, #1f8]	; 2f70 <cfi_amdstd_erase_varsize+0x8bc>
    2d74:	e3510002 	cmp	r1, #2	; 0x2
    2d78:	ea000b69 	b	5b24 <cfi_amdstd_destroy+0x19f4>
    2d7c:	e3530004 	cmp	r3, #4	; 0x4
    2d80:	1a000b6b 	bne	5b34 <cfi_amdstd_destroy+0x1a04>
    2d84:	e5951008 	ldr	r1, [r5, #8]
    2d88:	e3510001 	cmp	r1, #1	; 0x1
    2d8c:	1a000b64 	bne	5b24 <cfi_amdstd_destroy+0x19f4>
    2d90:	e3a0c030 	mov	r12, #48	; 0x30
    2d94:	ea000b6b 	b	5b48 <cfi_amdstd_destroy+0x1a18>
    2d98:	e3510002 	cmp	r1, #2	; 0x2
    2d9c:	059fc1d0 	ldreq	r12, [pc, #1d0]	; 2f74 <cfi_amdstd_erase_varsize+0x8c0>
    2da0:	0a000b6b 	beq	5b54 <cfi_amdstd_destroy+0x1a24>
    2da4:	e59f31cc 	ldr	r3, [pc, #1cc]	; 2f78 <cfi_amdstd_erase_varsize+0x8c4>
    2da8:	e3510004 	cmp	r1, #4	; 0x4
    2dac:	01a0c003 	moveq	r12, r3
    2db0:	13a0c000 	movne	r12, #0	; 0x0
    2db4:	e59a3008 	ldr	r3, [r10, #8]
    2db8:	e3530001 	cmp	r3, #1	; 0x1
    2dbc:	1a000b74 	bne	5b94 <cfi_amdstd_destroy+0x1a64>
    2dc0:	e1a0000a 	mov	r0, r10
    2dc4:	e20c1030 	and	r1, r12, #48	; 0x30
    2dc8:	e1a02009 	mov	r2, r9
    2dcc:	e1a0e00f 	mov	lr, pc
    2dd0:	e59af01c 	ldr	pc, [r10, #28]
    2dd4:	ea000b84 	b	5bec <cfi_amdstd_destroy+0x1abc>
    2dd8:	e3530002 	cmp	r3, #2	; 0x2
    2ddc:	1a000b7d 	bne	5bd8 <cfi_amdstd_destroy+0x1aa8>
    2de0:	e1a0000a 	mov	r0, r10
    2de4:	e59f1184 	ldr	r1, [pc, #184]	; 2f70 <cfi_amdstd_erase_varsize+0x8bc>
    2de8:	e1a02009 	mov	r2, r9
    2dec:	e00c1001 	and	r1, r12, r1
    2df0:	e1a0e00f 	mov	lr, pc
    2df4:	e59af020 	ldr	pc, [r10, #32]
    2df8:	ea000b84 	b	5c10 <cfi_amdstd_destroy+0x1ae0>
    2dfc:	e3530004 	cmp	r3, #4	; 0x4
    2e00:	1a000b84 	bne	5c18 <cfi_amdstd_destroy+0x1ae8>
    2e04:	e1a0000a 	mov	r0, r10
    2e08:	e1a0100c 	mov	r1, r12
    2e0c:	e1a02009 	mov	r2, r9
    2e10:	e1a0e00f 	mov	lr, pc
    2e14:	e59af024 	ldr	pc, [r10, #36]
    2e18:	e59fc15c 	ldr	r12, [pc, #15c]	; 2f7c <cfi_amdstd_erase_varsize+0x8c8>
    2e1c:	e59c2000 	ldr	r2, [r12]
    2e20:	e2824e7d 	add	r4, r2, #2000	; 0x7d0
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    2e24:	e59f1154 	ldr	r1, [pc, #154]	; 2f80 <cfi_amdstd_erase_varsize+0x8cc>
    2e28:	e5913000 	ldr	r3, [r1]
    2e2c:	e2433001 	sub	r3, r3, #1	; 0x1
    2e30:	e3530000 	cmp	r3, #0	; 0x0
    2e34:	e5813000 	str	r3, [r1]
    2e38:	1a000b91 	bne	5c84 <cfi_amdstd_destroy+0x1b54>
    2e3c:	e5113008 	ldr	r3, [r1, -#8]
    2e40:	e3530000 	cmp	r3, #0	; 0x0
    2e44:	0a000b91 	beq	5c90 <cfi_amdstd_destroy+0x1b60>
    2e48:	ebfffffe 	bl	2e48 <cfi_amdstd_erase_varsize+0x794>
    2e4c:	e3a00064 	mov	r0, #100	; 0x64
    2e50:	ebfffffe 	bl	2e50 <cfi_amdstd_erase_varsize+0x79c>
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    2e54:	e59f2128 	ldr	r2, [pc, #128]	; 2f84 <cfi_amdstd_erase_varsize+0x8d0>
    2e58:	e5923008 	ldr	r3, [r2, #8]
    2e5c:	e2833001 	add	r3, r3, #1	; 0x1
    2e60:	e5823008 	str	r3, [r2, #8]
    2e64:	e3a06000 	mov	r6, #0	; 0x0
    2e68:	e59a3008 	ldr	r3, [r10, #8]
    2e6c:	e3530001 	cmp	r3, #1	; 0x1
    2e70:	0a000ba8 	beq	5d18 <cfi_amdstd_destroy+0x1be8>
    2e74:	e3530002 	cmp	r3, #2	; 0x2
    2e78:	1a000ba3 	bne	5d0c <cfi_amdstd_destroy+0x1bdc>
    2e7c:	e5952008 	ldr	r2, [r5, #8]
    2e80:	e3520001 	cmp	r2, #1	; 0x1
    2e84:	0a000ba8 	beq	5d2c <cfi_amdstd_destroy+0x1bfc>
    2e88:	e59f30f8 	ldr	r3, [pc, #f8]	; 2f88 <cfi_amdstd_erase_varsize+0x8d4>
    2e8c:	e3520002 	cmp	r2, #2	; 0x2
    2e90:	ea000baf 	b	5d54 <cfi_amdstd_destroy+0x1c24>
    2e94:	e3530004 	cmp	r3, #4	; 0x4
    2e98:	1a000bb1 	bne	5d64 <cfi_amdstd_destroy+0x1c34>
    2e9c:	e5952008 	ldr	r2, [r5, #8]
    2ea0:	e3520001 	cmp	r2, #1	; 0x1
    2ea4:	1a000baa 	bne	5d54 <cfi_amdstd_destroy+0x1c24>
    2ea8:	e3a06080 	mov	r6, #128	; 0x80
    2eac:	ea000bb1 	b	5d78 <cfi_amdstd_destroy+0x1c48>
    2eb0:	e3520002 	cmp	r2, #2	; 0x2
    2eb4:	059f60d0 	ldreq	r6, [pc, #d0]	; 2f8c <cfi_amdstd_erase_varsize+0x8d8>
    2eb8:	0a000bb1 	beq	5d84 <cfi_amdstd_destroy+0x1c54>
    2ebc:	e59f30cc 	ldr	r3, [pc, #cc]	; 2f90 <cfi_amdstd_erase_varsize+0x8dc>
    2ec0:	e3520004 	cmp	r2, #4	; 0x4
    2ec4:	01a06003 	moveq	r6, r3
    2ec8:	13a06000 	movne	r6, #0	; 0x0
    2ecc:	e59f50ac 	ldr	r5, [pc, #ac]	; 2f80 <cfi_amdstd_erase_varsize+0x8cc>
    2ed0:	e51b8068 	ldr	r8, [r11, -#104]
    2ed4:	ea000c1d 	b	5f50 <cfi_amdstd_destroy+0x1e20>
    2ed8:	e5973004 	ldr	r3, [r7, #4]
    2edc:	e3530004 	cmp	r3, #4	; 0x4
    2ee0:	0a000be4 	beq	5e78 <cfi_amdstd_destroy+0x1d48>
    2ee4:	e3a03002 	mov	r3, #2	; 0x2
    2ee8:	e5883000 	str	r3, [r8]
    2eec:	e2870014 	add	r0, r7, #20	; 0x14
    2ef0:	e24b1038 	sub	r1, r11, #56	; 0x38
    2ef4:	ebfffffe 	bl	2ef4 <cfi_amdstd_erase_varsize+0x840>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    2ef8:	e5953000 	ldr	r3, [r5]
    2efc:	e2433001 	sub	r3, r3, #1	; 0x1
    2f00:	e3530000 	cmp	r3, #0	; 0x0
    2f04:	e2874014 	add	r4, r7, #20	; 0x14
    2f08:	e5853000 	str	r3, [r5]
    2f0c:	1a000bc7 	bne	5e30 <cfi_amdstd_destroy+0x1d00>
    2f10:	e59fc068 	ldr	r12, [pc, #68]	; 2f80 <cfi_amdstd_erase_varsize+0x8cc>
    2f14:	e51c3008 	ldr	r3, [r12, -#8]
    2f18:	e3530000 	cmp	r3, #0	; 0x0
    2f1c:	0a000bc7 	beq	5e40 <cfi_amdstd_destroy+0x1d10>
    2f20:	ebfffffe 	bl	2f20 <cfi_amdstd_erase_varsize+0x86c>
    2f24:	e59f0068 	ldr	r0, [pc, #68]	; 2f94 <cfi_amdstd_erase_varsize+0x8e0>
    2f28:	ebfffffe 	bl	2f28 <cfi_amdstd_erase_varsize+0x874>
    2f2c:	ebfffffe 	bl	2f2c <cfi_amdstd_erase_varsize+0x878>
    2f30:	e1a00004 	mov	r0, r4
    2f34:	e24b1038 	sub	r1, r11, #56	; 0x38
    2f38:	ebfffffe 	bl	2f38 <cfi_amdstd_erase_varsize+0x884>
    2f3c:	e59f1038 	ldr	r1, [pc, #38]	; 2f7c <cfi_amdstd_erase_varsize+0x8c8>
    2f40:	e5912000 	ldr	r2, [r1]
    2f44:	e28240c8 	add	r4, r2, #200	; 0xc8
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    2f48:	e59f2034 	ldr	r2, [pc, #34]	; 2f84 <cfi_amdstd_erase_varsize+0x8d0>
    2f4c:	e5923008 	ldr	r3, [r2, #8]
    2f50:	e2833001 	add	r3, r3, #1	; 0x1
    2f54:	e5823008 	str	r3, [r2, #8]
    2f58:	ea000c1d 	b	5fd4 <cfi_amdstd_destroy+0x1ea4>
    2f5c:	aaaaaaaa 	bge	feaada0c <cfi_amdstd_destroy+0xfeaa98dc>
    2f60:	0000aaaa 	andeq	r10, r0, r10, lsr #21
    2f64:	00005555 	andeq	r5, r0, r5, asr r5
    2f68:	00550055 	subeqs	r0, r5, r5, asr r0
    2f6c:	55555555 	ldrplb	r5, [r5, -#1365]
    2f70:	00003030 	andeq	r3, r0, r0, lsr r0
    2f74:	00300030 	eoreqs	r0, r0, r0, lsr r0
    2f78:	30303030 	eorccs	r3, r0, r0, lsr r0
    2f7c:	00000000 	andeq	r0, r0, r0
    2f80:	00000008 	andeq	r0, r0, r8
    2f84:	00000000 	andeq	r0, r0, r0
    2f88:	00008080 	andeq	r8, r0, r0, lsl #1
    2f8c:	00800080 	addeq	r0, r0, r0, lsl #1
    2f90:	80808080 	addhi	r8, r0, r0, lsl #1
    2f94:	00000218 	andeq	r0, r0, r8, lsl r2
    2f98:	e59fc140 	ldr	r12, [pc, #140]	; 30e0 <cfi_amdstd_erase_varsize+0xa2c>
    2f9c:	e59c3000 	ldr	r3, [r12]
    2fa0:	e0633004 	rsb	r3, r3, r4
    2fa4:	e3530000 	cmp	r3, #0	; 0x0
    2fa8:	aa000c00 	bge	5fb0 <cfi_amdstd_destroy+0x1e80>
    2fac:	e3a02000 	mov	r2, #0	; 0x0
    2fb0:	e5872004 	str	r2, [r7, #4]
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    2fb4:	e5953000 	ldr	r3, [r5]
    2fb8:	e2433001 	sub	r3, r3, #1	; 0x1
    2fbc:	e1530002 	cmp	r3, r2
    2fc0:	e5853000 	str	r3, [r5]
    2fc4:	1a000bf5 	bne	5fa0 <cfi_amdstd_destroy+0x1e70>
    2fc8:	e59f1114 	ldr	r1, [pc, #114]	; 30e4 <cfi_amdstd_erase_varsize+0xa30>
    2fcc:	e5113008 	ldr	r3, [r1, -#8]
    2fd0:	e1530002 	cmp	r3, r2
    2fd4:	0a000bf5 	beq	5fb0 <cfi_amdstd_destroy+0x1e80>
    2fd8:	ebfffffe 	bl	2fd8 <cfi_amdstd_erase_varsize+0x924>
    2fdc:	e59f0104 	ldr	r0, [pc, #104]	; 30e8 <cfi_amdstd_erase_varsize+0xa34>
    2fe0:	ebfffffe 	bl	2fe0 <cfi_amdstd_erase_varsize+0x92c>
    2fe4:	e59a302c 	ldr	r3, [r10, #44]
    2fe8:	e3530000 	cmp	r3, #0	; 0x0
    2fec:	0a000bfe 	beq	5fec <cfi_amdstd_destroy+0x1ebc>
    2ff0:	e1a0000a 	mov	r0, r10
    2ff4:	e3a01000 	mov	r1, #0	; 0x0
    2ff8:	e1a0e00f 	mov	lr, pc
    2ffc:	e1a0f003 	mov	pc, r3
    3000:	e3e09004 	mvn	r9, #4	; 0x4
    3004:	ea000c57 	b	6168 <cfi_amdstd_destroy+0x2038>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3008:	e5953000 	ldr	r3, [r5]
    300c:	e2433001 	sub	r3, r3, #1	; 0x1
    3010:	e3530000 	cmp	r3, #0	; 0x0
    3014:	e5853000 	str	r3, [r5]
    3018:	1a000c0a 	bne	6048 <cfi_amdstd_destroy+0x1f18>
    301c:	e59f20c0 	ldr	r2, [pc, #c0]	; 30e4 <cfi_amdstd_erase_varsize+0xa30>
    3020:	e5123008 	ldr	r3, [r2, -#8]
    3024:	e3530000 	cmp	r3, #0	; 0x0
    3028:	0a000c0a 	beq	6058 <cfi_amdstd_destroy+0x1f28>
    302c:	ebfffffe 	bl	302c <cfi_amdstd_erase_varsize+0x978>
    3030:	e59f10b4 	ldr	r1, [pc, #b4]	; 30ec <cfi_amdstd_erase_varsize+0xa38>

static inline void cfi_udelay(int us)
{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
	if (current->need_resched) {
    3034:	e5982014 	ldr	r2, [r8, #20]
    3038:	e5913000 	ldr	r3, [r1]

static inline void cfi_udelay(int us)
{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
	if (current->need_resched) {
    303c:	e3520000 	cmp	r2, #0	; 0x0
    3040:	e2833001 	add	r3, r3, #1	; 0x1
    3044:	e5813000 	str	r3, [r1]

static inline void cfi_udelay(int us)
{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
	if (current->need_resched) {
    3048:	0a000c17 	beq	60ac <cfi_amdstd_destroy+0x1f7c>
		unsigned long t = us * HZ / 1000000;
		if (t < 1)
			t = 1;
		set_current_state(TASK_UNINTERRUPTIBLE);
    304c:	e51bc068 	ldr	r12, [r11, -#104]
    3050:	e3a03002 	mov	r3, #2	; 0x2
    3054:	e58c3000 	str	r3, [r12]
		schedule_timeout(t);
    3058:	e3a00001 	mov	r0, #1	; 0x1
    305c:	ebfffffe 	bl	305c <cfi_amdstd_erase_varsize+0x9a8>
	}
    3060:	ea000c19 	b	60cc <cfi_amdstd_destroy+0x1f9c>
	else
#endif
		udelay(us);
    3064:	e3a00001 	mov	r0, #1	; 0x1
    3068:	ebfffffe 	bl	3068 <cfi_amdstd_erase_varsize+0x9b4>
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    306c:	e59f107c 	ldr	r1, [pc, #7c]	; 30f0 <cfi_amdstd_erase_varsize+0xa3c>
    3070:	e5913008 	ldr	r3, [r1, #8]
    3074:	e2833001 	add	r3, r3, #1	; 0x1
    3078:	e5813008 	str	r3, [r1, #8]
    307c:	e59a3008 	ldr	r3, [r10, #8]
    3080:	e3530001 	cmp	r3, #1	; 0x1
    3084:	1a000c26 	bne	6124 <cfi_amdstd_destroy+0x1ff4>
    3088:	e1a0000a 	mov	r0, r10
    308c:	e1a01009 	mov	r1, r9
    3090:	e1a0e00f 	mov	lr, pc
    3094:	e59af00c 	ldr	pc, [r10, #12]
    3098:	e20000ff 	and	r0, r0, #255	; 0xff
    309c:	ea000c3c 	b	6194 <cfi_amdstd_destroy+0x2064>
    30a0:	e3530002 	cmp	r3, #2	; 0x2
    30a4:	1a000c2f 	bne	6168 <cfi_amdstd_destroy+0x2038>
    30a8:	e1a0000a 	mov	r0, r10
    30ac:	e1a01009 	mov	r1, r9
    30b0:	e1a0e00f 	mov	lr, pc
    30b4:	e59af010 	ldr	pc, [r10, #16]
    30b8:	e1a00800 	mov	r0, r0, lsl #16
    30bc:	e1a00820 	mov	r0, r0, lsr #16
    30c0:	ea000c3c 	b	61b8 <cfi_amdstd_destroy+0x2088>
    30c4:	e3530004 	cmp	r3, #4	; 0x4
    30c8:	1a000c3b 	bne	61bc <cfi_amdstd_destroy+0x208c>
    30cc:	e1a0000a 	mov	r0, r10
    30d0:	e1a01009 	mov	r1, r9
    30d4:	e1a0e00f 	mov	lr, pc
    30d8:	e59af014 	ldr	pc, [r10, #20]
    30dc:	ea000c3c 	b	61d4 <cfi_amdstd_destroy+0x20a4>
    30e0:	00000000 	andeq	r0, r0, r0
    30e4:	00000008 	andeq	r0, r0, r8
    30e8:	00000238 	andeq	r0, r0, r8, lsr r2
    30ec:	00000018 	andeq	r0, r0, r8, lsl r0
    30f0:	00000000 	andeq	r0, r0, r0
    30f4:	e3a00000 	mov	r0, #0	; 0x0
    30f8:	e0003006 	and	r3, r0, r6
    30fc:	e1530006 	cmp	r3, r6
    3100:	1a000bb4 	bne	5fd8 <cfi_amdstd_destroy+0x1ea8>
    3104:	e59a302c 	ldr	r3, [r10, #44]
    3108:	e3530000 	cmp	r3, #0	; 0x0
    310c:	0a000c46 	beq	622c <cfi_amdstd_destroy+0x20fc>
    3110:	e1a0000a 	mov	r0, r10
    3114:	e3a01000 	mov	r1, #0	; 0x0
    3118:	e1a0e00f 	mov	lr, pc
    311c:	e1a0f003 	mov	pc, r3
    3120:	e2870014 	add	r0, r7, #20	; 0x14
    3124:	e3a01003 	mov	r1, #3	; 0x3
    3128:	e3a02001 	mov	r2, #1	; 0x1
    312c:	e3a03000 	mov	r3, #0	; 0x0
    3130:	e5873004 	str	r3, [r7, #4]
    3134:	ebfffffe 	bl	3134 <cfi_amdstd_erase_varsize+0xa80>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3138:	e59f2114 	ldr	r2, [pc, #114]	; 3254 <cfi_amdstd_erase_varsize+0xba0>
    313c:	e5923000 	ldr	r3, [r2]
    3140:	e2433001 	sub	r3, r3, #1	; 0x1
    3144:	e3530000 	cmp	r3, #0	; 0x0
    3148:	e5823000 	str	r3, [r2]
    314c:	1a000c56 	bne	62ac <cfi_amdstd_destroy+0x217c>
    3150:	e5123008 	ldr	r3, [r2, -#8]
    3154:	e3530000 	cmp	r3, #0	; 0x0
    3158:	0a000c56 	beq	62b8 <cfi_amdstd_destroy+0x2188>
    315c:	ebfffffe 	bl	315c <cfi_amdstd_erase_varsize+0xaa8>
    3160:	e3a09000 	mov	r9, #0	; 0x0
    3164:	e3590000 	cmp	r9, #0	; 0x0
    3168:	1a0009ff 	bne	596c <cfi_amdstd_destroy+0x183c>
    316c:	e3a04001 	mov	r4, #1	; 0x1
    3170:	e51b3060 	ldr	r3, [r11, -#96]
    3174:	e51bc064 	ldr	r12, [r11, -#100]
    3178:	e51b1054 	ldr	r1, [r11, -#84]
    317c:	e0835083 	add	r5, r3, r3, lsl #1
    3180:	e1a05105 	mov	r5, r5, lsl #2
    3184:	e085700c 	add	r7, r5, r12
    3188:	e5976004 	ldr	r6, [r7, #4]
    318c:	e51b2050 	ldr	r2, [r11, -#80]
    3190:	e0811006 	add	r1, r1, r6
    3194:	e50b1054 	str	r1, [r11, -#84]
    3198:	e5928034 	ldr	r8, [r2, #52]
    319c:	e1a00001 	mov	r0, r1
    31a0:	e1a04814 	mov	r4, r4, lsl r8
    31a4:	e1a01004 	mov	r1, r4
    31a8:	ebfffffe 	bl	31a8 <cfi_amdstd_erase_varsize+0xaf4>
    31ac:	e51bc064 	ldr	r12, [r11, -#100]
    31b0:	e5972008 	ldr	r2, [r7, #8]
    31b4:	e795300c 	ldr	r3, [r5, r12]
    31b8:	e1a07000 	mov	r7, r0
    31bc:	e0203692 	mla	r0, r2, r6, r3
    31c0:	e51b1058 	ldr	r1, [r11, -#88]
    31c4:	e0661001 	rsb	r1, r6, r1
    31c8:	e50b1058 	str	r1, [r11, -#88]
    31cc:	e1a01004 	mov	r1, r4
    31d0:	ebfffffe 	bl	31d0 <cfi_amdstd_erase_varsize+0xb1c>
    31d4:	e51b2060 	ldr	r2, [r11, -#96]
    31d8:	e51b3054 	ldr	r3, [r11, -#84]
    31dc:	e1570000 	cmp	r7, r0
    31e0:	02822001 	addeq	r2, r2, #1	; 0x1
    31e4:	e1b03833 	movs	r3, r3, lsr r8
    31e8:	e50b2060 	str	r2, [r11, -#96]
    31ec:	0a000c85 	beq	6408 <cfi_amdstd_destroy+0x22d8>
    31f0:	e50b9054 	str	r9, [r11, -#84]
    31f4:	e51bc06c 	ldr	r12, [r11, -#108]
    31f8:	e51b1050 	ldr	r1, [r11, -#80]
    31fc:	e51b205c 	ldr	r2, [r11, -#92]
    3200:	e28cc02c 	add	r12, r12, #44	; 0x2c
    3204:	e50bc06c 	str	r12, [r11, -#108]
    3208:	e5913030 	ldr	r3, [r1, #48]
    320c:	e2822001 	add	r2, r2, #1	; 0x1
    3210:	e50b205c 	str	r2, [r11, -#92]
    3214:	e1520003 	cmp	r2, r3
    3218:	aa000c88 	bge	6440 <cfi_amdstd_destroy+0x2310>
    321c:	e51b3058 	ldr	r3, [r11, -#88]
    3220:	e3530000 	cmp	r3, #0	; 0x0
    3224:	1a000a11 	bne	5a70 <cfi_amdstd_destroy+0x1940>
    3228:	e51bc04c 	ldr	r12, [r11, -#76]
    322c:	e59c201c 	ldr	r2, [r12, #28]
    3230:	e3a03008 	mov	r3, #8	; 0x8
    3234:	e5cc3024 	strb	r3, [r12, #36]
    3238:	e3520000 	cmp	r2, #0	; 0x0
    323c:	0a000c91 	beq	6488 <cfi_amdstd_destroy+0x2358>
    3240:	e51b004c 	ldr	r0, [r11, -#76]
    3244:	e1a0e00f 	mov	lr, pc
    3248:	e1a0f002 	mov	pc, r2
    324c:	e3a00000 	mov	r0, #0	; 0x0
    3250:	ea000c94 	b	64a8 <cfi_amdstd_destroy+0x2378>
    3254:	00000008 	andeq	r0, r0, r8
    3258:	e91baff0 	ldmdb	r11, {r4, r5, r6, r7, r8, r9, r10, r11, sp, pc}

0000325c <cfi_amdstd_erase_onesize>:
    325c:	e1a0c00d 	mov	r12, sp
    3260:	e92ddff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    3264:	e24cb004 	sub	r11, r12, #4	; 0x4
    3268:	e24dd044 	sub	sp, sp, #68	; 0x44
    326c:	e50b004c 	str	r0, [r11, -#76]
    3270:	e590300c 	ldr	r3, [r0, #12]
    3274:	e50b1050 	str	r1, [r11, -#80]
    3278:	e5910004 	ldr	r0, [r1, #4]
    327c:	e51b104c 	ldr	r1, [r11, -#76]
    3280:	e5915078 	ldr	r5, [r1, #120]
    3284:	e2433001 	sub	r3, r3, #1	; 0x1
    3288:	e5952038 	ldr	r2, [r5, #56]
    328c:	e1100003 	tst	r0, r3
    3290:	e50b2054 	str	r2, [r11, -#84]
    3294:	1a000cad 	bne	6550 <cfi_amdstd_destroy+0x2420>
    3298:	e51bc050 	ldr	r12, [r11, -#80]
    329c:	e59c1008 	ldr	r1, [r12, #8]
    32a0:	e1110003 	tst	r1, r3
    32a4:	1a000cad 	bne	6560 <cfi_amdstd_destroy+0x2430>
    32a8:	e51b304c 	ldr	r3, [r11, -#76]
    32ac:	e5932008 	ldr	r2, [r3, #8]
    32b0:	e0813000 	add	r3, r1, r0
    32b4:	e1530002 	cmp	r3, r2
    32b8:	9a000caf 	bls	657c <cfi_amdstd_destroy+0x244c>
    32bc:	e3e00015 	mvn	r0, #21	; 0x15
    32c0:	ea000f21 	b	6f4c <cfi_amdstd_destroy+0x2e1c>
    32c4:	e51bc054 	ldr	r12, [r11, -#84]
    32c8:	e59c3034 	ldr	r3, [r12, #52]
    32cc:	e3510000 	cmp	r1, #0	; 0x0
    32d0:	e50b105c 	str	r1, [r11, -#92]
    32d4:	e1a01330 	mov	r1, r0, lsr r3
    32d8:	e0400311 	sub	r0, r0, r1, lsl r3
    32dc:	e50b1060 	str	r1, [r11, -#96]
    32e0:	e50b0058 	str	r0, [r11, -#88]
    32e4:	0a000f17 	beq	6f48 <cfi_amdstd_destroy+0x2e18>
    32e8:	e0813101 	add	r3, r1, r1, lsl #2
    32ec:	e0813083 	add	r3, r1, r3, lsl #1
    32f0:	e1a03103 	mov	r3, r3, lsl #2
    32f4:	e283303c 	add	r3, r3, #60	; 0x3c
    32f8:	e59f2398 	ldr	r2, [pc, #398]	; 3698 <cfi_amdstd_erase_onesize+0x43c>
    32fc:	e083300c 	add	r3, r3, r12
    3300:	e50b306c 	str	r3, [r11, -#108]
    3304:	e2829008 	add	r9, r2, #8	; 0x8
    3308:	e24b0048 	sub	r0, r11, #72	; 0x48
    330c:	e3a01000 	mov	r1, #0	; 0x0
    3310:	e3a02010 	mov	r2, #16	; 0x10
    3314:	e51b806c 	ldr	r8, [r11, -#108]
    3318:	e59fc37c 	ldr	r12, [pc, #37c]	; 369c <cfi_amdstd_erase_onesize+0x440>
    331c:	e5956038 	ldr	r6, [r5, #56]
    3320:	e59c3000 	ldr	r3, [r12]
    3324:	ebfffffe 	bl	3324 <cfi_amdstd_erase_onesize+0xc8>

static inline struct task_struct *get_current(void)
{
	register unsigned long sp asm ("sp");
	return (struct task_struct *)(sp & ~0x1fff);
    3328:	e3cd3d7f 	bic	r3, sp, #8128	; 0x1fc0
    332c:	e3c3303f 	bic	r3, r3, #63	; 0x3f
    3330:	e24bc048 	sub	r12, r11, #72	; 0x48
    3334:	e50b3068 	str	r3, [r11, -#104]
    3338:	e50b3044 	str	r3, [r11, -#68]
    333c:	e89c000f 	ldmia	r12, {r0, r1, r2, r3}
    3340:	e24be038 	sub	lr, r11, #56	; 0x38
    3344:	e88e000f 	stmia	lr, {r0, r1, r2, r3}
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    3348:	e59f1348 	ldr	r1, [pc, #348]	; 3698 <cfi_amdstd_erase_onesize+0x43c>
    334c:	e5913008 	ldr	r3, [r1, #8]
    3350:	e2833001 	add	r3, r3, #1	; 0x1
    3354:	e5813008 	str	r3, [r1, #8]
    3358:	e5984004 	ldr	r4, [r8, #4]
    335c:	e3540000 	cmp	r4, #0	; 0x0
    3360:	0a000cee 	beq	6720 <cfi_amdstd_destroy+0x25f0>
    3364:	e51b2068 	ldr	r2, [r11, -#104]
    3368:	e3a03002 	mov	r3, #2	; 0x2
    336c:	e5823000 	str	r3, [r2]
    3370:	e2884014 	add	r4, r8, #20	; 0x14
    3374:	e1a00004 	mov	r0, r4
    3378:	e24b1038 	sub	r1, r11, #56	; 0x38
    337c:	ebfffffe 	bl	337c <cfi_amdstd_erase_onesize+0x120>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3380:	e5993000 	ldr	r3, [r9]
    3384:	e2433001 	sub	r3, r3, #1	; 0x1
    3388:	e3530000 	cmp	r3, #0	; 0x0
    338c:	e5893000 	str	r3, [r9]
    3390:	1a000ce7 	bne	6734 <cfi_amdstd_destroy+0x2604>
    3394:	e5193008 	ldr	r3, [r9, -#8]
    3398:	e3530000 	cmp	r3, #0	; 0x0
    339c:	0a000ce7 	beq	6740 <cfi_amdstd_destroy+0x2610>
    33a0:	ebfffffe 	bl	33a0 <cfi_amdstd_erase_onesize+0x144>
    33a4:	ebfffffe 	bl	33a4 <cfi_amdstd_erase_onesize+0x148>
    33a8:	e1a00004 	mov	r0, r4
    33ac:	e24b1038 	sub	r1, r11, #56	; 0x38
    33b0:	ebfffffe 	bl	33b0 <cfi_amdstd_erase_onesize+0x154>
    33b4:	e59fc2e0 	ldr	r12, [pc, #2e0]	; 369c <cfi_amdstd_erase_onesize+0x440>
    33b8:	e59c3000 	ldr	r3, [r12]
    33bc:	ea000cd0 	b	6704 <cfi_amdstd_destroy+0x25d4>
    33c0:	e5982000 	ldr	r2, [r8]
    33c4:	e3a03004 	mov	r3, #4	; 0x4
    33c8:	e5883004 	str	r3, [r8, #4]
    33cc:	e51b1058 	ldr	r1, [r11, -#88]
    33d0:	e0812002 	add	r2, r1, r2
    33d4:	e50b2064 	str	r2, [r11, -#100]
    33d8:	e595302c 	ldr	r3, [r5, #44]
    33dc:	e3530000 	cmp	r3, #0	; 0x0
    33e0:	0a000cfb 	beq	67d4 <cfi_amdstd_destroy+0x26a4>
    33e4:	e1a00005 	mov	r0, r5
    33e8:	e3a01001 	mov	r1, #1	; 0x1
    33ec:	e1a0e00f 	mov	lr, pc
    33f0:	e1a0f003 	mov	pc, r3
 * Transforms the CFI command for the given geometry (bus width & interleave.
 */
static inline __u32 cfi_build_cmd(u_char cmd, struct map_info *map, struct cfi_private *cfi)
{
	__u32 val = 0;
    33f4:	e1a01004 	mov	r1, r4

	if (cfi_buswidth_is_1()) {
		/* 1 x8 device */
		val = cmd;
	} else if (cfi_buswidth_is_2()) {
		if (cfi_interleave_is_1()) {
			/* 1 x16 device in x16 mode */
			val = cpu_to_cfi16(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 (x8, x16 or x32) devices in x8 mode */
			val = cpu_to_cfi16((cmd << 8) | cmd);
		}
	} else if (cfi_buswidth_is_4()) {
		if (cfi_interleave_is_1()) {
			/* 1 x32 device in x32 mode */
			val = cpu_to_cfi32(cmd);
		} else if (cfi_interleave_is_2()) {
			/* 2 x16 device in x16 mode */
			val = cpu_to_cfi32((cmd << 16) | cmd);
		} else if (cfi_interleave_is_4()) {
			/* 4 (x8, x16 or x32) devices in x8 mode */
			val = (cmd << 16) | cmd;
			val = cpu_to_cfi32((val << 8) | val);
		}
	}
	return val;
}
#define CMD(x)  cfi_build_cmd((x), map, cfi)

/*
 * Read a value according to the bus width.
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return map->read16(map, addr);
	} else if (cfi_buswidth_is_4()) {
		return map->read32(map, addr);
	} else {
		return 0;
	}
}

/*
 * Write a value according to the bus width.
 */

static inline void cfi_write(struct map_info *map, __u32 val, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		map->write8(map, val, addr);
	} else if (cfi_buswidth_is_2()) {
		map->write16(map, val, addr);
	} else if (cfi_buswidth_is_4()) {
		map->write32(map, val, addr);
	}
}

/*
 * Sends a CFI command to a bank of flash for the given geometry.
 *
 * Returns the offset in flash where the command was written.
 * If prev_val is non-null, it will be set to the value at the command address,
 * before the command was written.
 */
static inline __u32 cfi_send_gen_cmd(u_char cmd, __u32 cmd_addr, __u32 base,
				struct map_info *map, struct cfi_private *cfi,
				int type, __u32 *prev_val)
{
    33f8:	e5962014 	ldr	r2, [r6, #20]
    33fc:	e5983000 	ldr	r3, [r8]
    3400:	e5950008 	ldr	r0, [r5, #8]
    3404:	e596c008 	ldr	r12, [r6, #8]
    3408:	e3500001 	cmp	r0, #1	; 0x1
	__u32 val;
	__u32 addr = base + cfi_build_cmd_addr(cmd_addr, CFIDEV_INTERLEAVE, type);
    340c:	e022329c 	mla	r2, r12, r2, r3
    3410:	0a000d0e 	beq	6850 <cfi_amdstd_destroy+0x2720>
    3414:	e3500002 	cmp	r0, #2	; 0x2
    3418:	1a000d0a 	bne	6848 <cfi_amdstd_destroy+0x2718>
    341c:	e35c0001 	cmp	r12, #1	; 0x1
    3420:	0a000d0e 	beq	6860 <cfi_amdstd_destroy+0x2730>
    3424:	e59f3274 	ldr	r3, [pc, #274]	; 36a0 <cfi_amdstd_erase_onesize+0x444>
    3428:	e35c0002 	cmp	r12, #2	; 0x2
    342c:	ea000d15 	b	6888 <cfi_amdstd_destroy+0x2758>
    3430:	e3500004 	cmp	r0, #4	; 0x4
    3434:	1a000d16 	bne	6894 <cfi_amdstd_destroy+0x2764>
    3438:	e35c0001 	cmp	r12, #1	; 0x1
    343c:	1a000d10 	bne	6884 <cfi_amdstd_destroy+0x2754>
    3440:	e3a010aa 	mov	r1, #170	; 0xaa
    3444:	ea000d16 	b	68a4 <cfi_amdstd_destroy+0x2774>
    3448:	e35c0002 	cmp	r12, #2	; 0x2
    344c:	059f1250 	ldreq	r1, [pc, #250]	; 36a4 <cfi_amdstd_erase_onesize+0x448>
    3450:	0a000d16 	beq	68b0 <cfi_amdstd_destroy+0x2780>
    3454:	e59f324c 	ldr	r3, [pc, #24c]	; 36a8 <cfi_amdstd_erase_onesize+0x44c>
    3458:	e35c0004 	cmp	r12, #4	; 0x4
    345c:	01a01003 	moveq	r1, r3
    3460:	e5953008 	ldr	r3, [r5, #8]
    3464:	e3530001 	cmp	r3, #1	; 0x1
    3468:	1a000d1e 	bne	68e8 <cfi_amdstd_destroy+0x27b8>
    346c:	e1a00005 	mov	r0, r5
    3470:	e20110ff 	and	r1, r1, #255	; 0xff
    3474:	e1a0e00f 	mov	lr, pc
    3478:	e595f01c 	ldr	pc, [r5, #28]
    347c:	ea000d2b 	b	6930 <cfi_amdstd_destroy+0x2800>
    3480:	e3530002 	cmp	r3, #2	; 0x2
    3484:	1a000d26 	bne	6924 <cfi_amdstd_destroy+0x27f4>
    3488:	e1a00005 	mov	r0, r5
    348c:	e1a01801 	mov	r1, r1, lsl #16
    3490:	e1a01821 	mov	r1, r1, lsr #16
    3494:	e1a0e00f 	mov	lr, pc
    3498:	e595f020 	ldr	pc, [r5, #32]
    349c:	ea000d2b 	b	6950 <cfi_amdstd_destroy+0x2820>
    34a0:	e3530004 	cmp	r3, #4	; 0x4
    34a4:	1a000d2b 	bne	6958 <cfi_amdstd_destroy+0x2828>
    34a8:	e1a00005 	mov	r0, r5
    34ac:	e1a0e00f 	mov	lr, pc
    34b0:	e595f024 	ldr	pc, [r5, #36]
    34b4:	e3a0c000 	mov	r12, #0	; 0x0
    34b8:	e5962018 	ldr	r2, [r6, #24]
    34bc:	e5983000 	ldr	r3, [r8]
    34c0:	e5951008 	ldr	r1, [r5, #8]
    34c4:	e5960008 	ldr	r0, [r6, #8]
    34c8:	e3510001 	cmp	r1, #1	; 0x1
    34cc:	e0223290 	mla	r2, r0, r2, r3
    34d0:	0a000d3e 	beq	69d0 <cfi_amdstd_destroy+0x28a0>
    34d4:	e3510002 	cmp	r1, #2	; 0x2
    34d8:	1a000d3a 	bne	69c8 <cfi_amdstd_destroy+0x2898>
    34dc:	e3500001 	cmp	r0, #1	; 0x1
    34e0:	0a000d3e 	beq	69e0 <cfi_amdstd_destroy+0x28b0>
    34e4:	e59f31c0 	ldr	r3, [pc, #1c0]	; 36ac <cfi_amdstd_erase_onesize+0x450>
    34e8:	e3500002 	cmp	r0, #2	; 0x2
    34ec:	ea000d45 	b	6a08 <cfi_amdstd_destroy+0x28d8>
    34f0:	e3510004 	cmp	r1, #4	; 0x4
    34f4:	1a000d47 	bne	6a18 <cfi_amdstd_destroy+0x28e8>
    34f8:	e3500001 	cmp	r0, #1	; 0x1
    34fc:	1a000d40 	bne	6a04 <cfi_amdstd_destroy+0x28d4>
    3500:	e3a0c055 	mov	r12, #85	; 0x55
    3504:	ea000d47 	b	6a28 <cfi_amdstd_destroy+0x28f8>
    3508:	e3500002 	cmp	r0, #2	; 0x2
    350c:	059fc19c 	ldreq	r12, [pc, #19c]	; 36b0 <cfi_amdstd_erase_onesize+0x454>
    3510:	0a000d47 	beq	6a34 <cfi_amdstd_destroy+0x2904>
    3514:	e59f3198 	ldr	r3, [pc, #198]	; 36b4 <cfi_amdstd_erase_onesize+0x458>
    3518:	e3500004 	cmp	r0, #4	; 0x4
    351c:	01a0c003 	moveq	r12, r3
    3520:	13a0c000 	movne	r12, #0	; 0x0
    3524:	e5953008 	ldr	r3, [r5, #8]
    3528:	e3530001 	cmp	r3, #1	; 0x1
    352c:	1a000d4f 	bne	6a70 <cfi_amdstd_destroy+0x2940>
    3530:	e1a00005 	mov	r0, r5
    3534:	e20c1055 	and	r1, r12, #85	; 0x55
    3538:	e1a0e00f 	mov	lr, pc
    353c:	e595f01c 	ldr	pc, [r5, #28]
    3540:	ea000d5d 	b	6abc <cfi_amdstd_destroy+0x298c>
    3544:	e3530002 	cmp	r3, #2	; 0x2
    3548:	1a000d57 	bne	6aac <cfi_amdstd_destroy+0x297c>
    354c:	e59f1158 	ldr	r1, [pc, #158]	; 36ac <cfi_amdstd_erase_onesize+0x450>
    3550:	e1a00005 	mov	r0, r5
    3554:	e00c1001 	and	r1, r12, r1
    3558:	e1a0e00f 	mov	lr, pc
    355c:	e595f020 	ldr	pc, [r5, #32]
    3560:	ea000d5d 	b	6adc <cfi_amdstd_destroy+0x29ac>
    3564:	e3530004 	cmp	r3, #4	; 0x4
    3568:	1a000d5d 	bne	6ae4 <cfi_amdstd_destroy+0x29b4>
    356c:	e1a00005 	mov	r0, r5
    3570:	e1a0100c 	mov	r1, r12
    3574:	e1a0e00f 	mov	lr, pc
    3578:	e595f024 	ldr	pc, [r5, #36]
    357c:	e3a0c000 	mov	r12, #0	; 0x0
    3580:	e5962014 	ldr	r2, [r6, #20]
    3584:	e5983000 	ldr	r3, [r8]
    3588:	e5951008 	ldr	r1, [r5, #8]
    358c:	e5960008 	ldr	r0, [r6, #8]
    3590:	e3510001 	cmp	r1, #1	; 0x1
    3594:	e0223290 	mla	r2, r0, r2, r3
    3598:	0a000d70 	beq	6b60 <cfi_amdstd_destroy+0x2a30>
    359c:	e3510002 	cmp	r1, #2	; 0x2
    35a0:	1a000d6c 	bne	6b58 <cfi_amdstd_destroy+0x2a28>
    35a4:	e3500001 	cmp	r0, #1	; 0x1
    35a8:	0a000d70 	beq	6b70 <cfi_amdstd_destroy+0x2a40>
    35ac:	e59f3104 	ldr	r3, [pc, #104]	; 36b8 <cfi_amdstd_erase_onesize+0x45c>
    35b0:	e3500002 	cmp	r0, #2	; 0x2
    35b4:	ea000d77 	b	6b98 <cfi_amdstd_destroy+0x2a68>
    35b8:	e3510004 	cmp	r1, #4	; 0x4
    35bc:	1a000d79 	bne	6ba8 <cfi_amdstd_destroy+0x2a78>
    35c0:	e3500001 	cmp	r0, #1	; 0x1
    35c4:	1a000d72 	bne	6b94 <cfi_amdstd_destroy+0x2a64>
    35c8:	e3a0c080 	mov	r12, #128	; 0x80
    35cc:	ea000d79 	b	6bb8 <cfi_amdstd_destroy+0x2a88>
    35d0:	e3500002 	cmp	r0, #2	; 0x2
    35d4:	059fc0e0 	ldreq	r12, [pc, #e0]	; 36bc <cfi_amdstd_erase_onesize+0x460>
    35d8:	0a000d79 	beq	6bc4 <cfi_amdstd_destroy+0x2a94>
    35dc:	e59f30dc 	ldr	r3, [pc, #dc]	; 36c0 <cfi_amdstd_erase_onesize+0x464>
    35e0:	e3500004 	cmp	r0, #4	; 0x4
    35e4:	01a0c003 	moveq	r12, r3
    35e8:	13a0c000 	movne	r12, #0	; 0x0
    35ec:	e5953008 	ldr	r3, [r5, #8]
    35f0:	e3530001 	cmp	r3, #1	; 0x1
    35f4:	1a000d81 	bne	6c00 <cfi_amdstd_destroy+0x2ad0>
    35f8:	e1a00005 	mov	r0, r5
    35fc:	e20c1080 	and	r1, r12, #128	; 0x80
    3600:	e1a0e00f 	mov	lr, pc
    3604:	e595f01c 	ldr	pc, [r5, #28]
    3608:	ea000d8f 	b	6c4c <cfi_amdstd_destroy+0x2b1c>
    360c:	e3530002 	cmp	r3, #2	; 0x2
    3610:	1a000d89 	bne	6c3c <cfi_amdstd_destroy+0x2b0c>
    3614:	e59f109c 	ldr	r1, [pc, #9c]	; 36b8 <cfi_amdstd_erase_onesize+0x45c>
    3618:	e1a00005 	mov	r0, r5
    361c:	e00c1001 	and	r1, r12, r1
    3620:	e1a0e00f 	mov	lr, pc
    3624:	e595f020 	ldr	pc, [r5, #32]
    3628:	ea000d8f 	b	6c6c <cfi_amdstd_destroy+0x2b3c>
    362c:	e3530004 	cmp	r3, #4	; 0x4
    3630:	1a000d8f 	bne	6c74 <cfi_amdstd_destroy+0x2b44>
    3634:	e1a00005 	mov	r0, r5
    3638:	e1a0100c 	mov	r1, r12
    363c:	e1a0e00f 	mov	lr, pc
    3640:	e595f024 	ldr	pc, [r5, #36]
    3644:	e3a0c000 	mov	r12, #0	; 0x0
    3648:	e5962014 	ldr	r2, [r6, #20]
    364c:	e5983000 	ldr	r3, [r8]
    3650:	e5951008 	ldr	r1, [r5, #8]
    3654:	e5960008 	ldr	r0, [r6, #8]
    3658:	e3510001 	cmp	r1, #1	; 0x1
    365c:	e0223290 	mla	r2, r0, r2, r3
    3660:	0a000da2 	beq	6cf0 <cfi_amdstd_destroy+0x2bc0>
    3664:	e3510002 	cmp	r1, #2	; 0x2
    3668:	1a000d9e 	bne	6ce8 <cfi_amdstd_destroy+0x2bb8>
    366c:	e3500001 	cmp	r0, #1	; 0x1
    3670:	0a000da2 	beq	6d00 <cfi_amdstd_destroy+0x2bd0>
    3674:	e59f3024 	ldr	r3, [pc, #24]	; 36a0 <cfi_amdstd_erase_onesize+0x444>
    3678:	e3500002 	cmp	r0, #2	; 0x2
    367c:	ea000db4 	b	6d54 <cfi_amdstd_destroy+0x2c24>
    3680:	e3510004 	cmp	r1, #4	; 0x4
    3684:	1a000db6 	bne	6d64 <cfi_amdstd_destroy+0x2c34>
    3688:	e3500001 	cmp	r0, #1	; 0x1
    368c:	1a000daf 	bne	6d50 <cfi_amdstd_destroy+0x2c20>
    3690:	e3a0c0aa 	mov	r12, #170	; 0xaa
    3694:	ea000db6 	b	6d74 <cfi_amdstd_destroy+0x2c44>
	...
    36a0:	0000aaaa 	andeq	r10, r0, r10, lsr #21
    36a4:	00aa00aa 	adceq	r0, r10, r10, lsr #1
    36a8:	aaaaaaaa 	bge	feaae158 <cfi_amdstd_destroy+0xfeaaa028>
    36ac:	00005555 	andeq	r5, r0, r5, asr r5
    36b0:	00550055 	subeqs	r0, r5, r5, asr r0
    36b4:	55555555 	ldrplb	r5, [r5, -#1365]
    36b8:	00008080 	andeq	r8, r0, r0, lsl #1
    36bc:	00800080 	addeq	r0, r0, r0, lsl #1
    36c0:	80808080 	addhi	r8, r0, r0, lsl #1
    36c4:	e3500002 	cmp	r0, #2	; 0x2
    36c8:	059fc394 	ldreq	r12, [pc, #394]	; 3a64 <cfi_amdstd_erase_onesize+0x808>
    36cc:	0a000db6 	beq	6dac <cfi_amdstd_destroy+0x2c7c>
    36d0:	e59f3390 	ldr	r3, [pc, #390]	; 3a68 <cfi_amdstd_erase_onesize+0x80c>
    36d4:	e3500004 	cmp	r0, #4	; 0x4
    36d8:	01a0c003 	moveq	r12, r3
    36dc:	13a0c000 	movne	r12, #0	; 0x0
    36e0:	e5953008 	ldr	r3, [r5, #8]
    36e4:	e3530001 	cmp	r3, #1	; 0x1
    36e8:	1a000dbe 	bne	6de8 <cfi_amdstd_destroy+0x2cb8>
    36ec:	e1a00005 	mov	r0, r5
    36f0:	e20c10aa 	and	r1, r12, #170	; 0xaa
    36f4:	e1a0e00f 	mov	lr, pc
    36f8:	e595f01c 	ldr	pc, [r5, #28]
    36fc:	ea000dcc 	b	6e34 <cfi_amdstd_destroy+0x2d04>
    3700:	e3530002 	cmp	r3, #2	; 0x2
    3704:	1a000dc6 	bne	6e24 <cfi_amdstd_destroy+0x2cf4>
    3708:	e59f135c 	ldr	r1, [pc, #35c]	; 3a6c <cfi_amdstd_erase_onesize+0x810>
    370c:	e1a00005 	mov	r0, r5
    3710:	e00c1001 	and	r1, r12, r1
    3714:	e1a0e00f 	mov	lr, pc
    3718:	e595f020 	ldr	pc, [r5, #32]
    371c:	ea000dcc 	b	6e54 <cfi_amdstd_destroy+0x2d24>
    3720:	e3530004 	cmp	r3, #4	; 0x4
    3724:	1a000dcc 	bne	6e5c <cfi_amdstd_destroy+0x2d2c>
    3728:	e1a00005 	mov	r0, r5
    372c:	e1a0100c 	mov	r1, r12
    3730:	e1a0e00f 	mov	lr, pc
    3734:	e595f024 	ldr	pc, [r5, #36]
    3738:	e3a0c000 	mov	r12, #0	; 0x0
    373c:	e5962018 	ldr	r2, [r6, #24]
    3740:	e5983000 	ldr	r3, [r8]
    3744:	e5951008 	ldr	r1, [r5, #8]
    3748:	e5960008 	ldr	r0, [r6, #8]
    374c:	e3510001 	cmp	r1, #1	; 0x1
    3750:	e0223290 	mla	r2, r0, r2, r3
    3754:	0a000ddf 	beq	6ed8 <cfi_amdstd_destroy+0x2da8>
    3758:	e3510002 	cmp	r1, #2	; 0x2
    375c:	1a000ddb 	bne	6ed0 <cfi_amdstd_destroy+0x2da0>
    3760:	e3500001 	cmp	r0, #1	; 0x1
    3764:	0a000ddf 	beq	6ee8 <cfi_amdstd_destroy+0x2db8>
    3768:	e59f3300 	ldr	r3, [pc, #300]	; 3a70 <cfi_amdstd_erase_onesize+0x814>
    376c:	e3500002 	cmp	r0, #2	; 0x2
    3770:	ea000de6 	b	6f10 <cfi_amdstd_destroy+0x2de0>
    3774:	e3510004 	cmp	r1, #4	; 0x4
    3778:	1a000de8 	bne	6f20 <cfi_amdstd_destroy+0x2df0>
    377c:	e3500001 	cmp	r0, #1	; 0x1
    3780:	1a000de1 	bne	6f0c <cfi_amdstd_destroy+0x2ddc>
    3784:	e3a0c055 	mov	r12, #85	; 0x55
    3788:	ea000de8 	b	6f30 <cfi_amdstd_destroy+0x2e00>
    378c:	e3500002 	cmp	r0, #2	; 0x2
    3790:	059fc2dc 	ldreq	r12, [pc, #2dc]	; 3a74 <cfi_amdstd_erase_onesize+0x818>
    3794:	0a000de8 	beq	6f3c <cfi_amdstd_destroy+0x2e0c>
    3798:	e59f32d8 	ldr	r3, [pc, #2d8]	; 3a78 <cfi_amdstd_erase_onesize+0x81c>
    379c:	e3500004 	cmp	r0, #4	; 0x4
    37a0:	01a0c003 	moveq	r12, r3
    37a4:	13a0c000 	movne	r12, #0	; 0x0
    37a8:	e5953008 	ldr	r3, [r5, #8]
    37ac:	e3530001 	cmp	r3, #1	; 0x1
    37b0:	1a000df0 	bne	6f78 <cfi_amdstd_destroy+0x2e48>
    37b4:	e1a00005 	mov	r0, r5
    37b8:	e20c1055 	and	r1, r12, #85	; 0x55
    37bc:	e1a0e00f 	mov	lr, pc
    37c0:	e595f01c 	ldr	pc, [r5, #28]
    37c4:	ea000dfe 	b	6fc4 <cfi_amdstd_destroy+0x2e94>
    37c8:	e3530002 	cmp	r3, #2	; 0x2
    37cc:	1a000df8 	bne	6fb4 <cfi_amdstd_destroy+0x2e84>
    37d0:	e59f1298 	ldr	r1, [pc, #298]	; 3a70 <cfi_amdstd_erase_onesize+0x814>
    37d4:	e1a00005 	mov	r0, r5
    37d8:	e00c1001 	and	r1, r12, r1
    37dc:	e1a0e00f 	mov	lr, pc
    37e0:	e595f020 	ldr	pc, [r5, #32]
    37e4:	ea000dfe 	b	6fe4 <cfi_amdstd_destroy+0x2eb4>
    37e8:	e3530004 	cmp	r3, #4	; 0x4
    37ec:	1a000dfe 	bne	6fec <cfi_amdstd_destroy+0x2ebc>
    37f0:	e1a00005 	mov	r0, r5
    37f4:	e1a0100c 	mov	r1, r12
    37f8:	e1a0e00f 	mov	lr, pc
    37fc:	e595f024 	ldr	pc, [r5, #36]
    3800:	e5953008 	ldr	r3, [r5, #8]
    3804:	e3a0c000 	mov	r12, #0	; 0x0
    3808:	e3530001 	cmp	r3, #1	; 0x1
    380c:	0a000e0f 	beq	7050 <cfi_amdstd_destroy+0x2f20>
    3810:	e3530002 	cmp	r3, #2	; 0x2
    3814:	1a000e0a 	bne	7044 <cfi_amdstd_destroy+0x2f14>
    3818:	e5961008 	ldr	r1, [r6, #8]
    381c:	e3510001 	cmp	r1, #1	; 0x1
    3820:	0a000e0f 	beq	7064 <cfi_amdstd_destroy+0x2f34>
    3824:	e59f3250 	ldr	r3, [pc, #250]	; 3a7c <cfi_amdstd_erase_onesize+0x820>
    3828:	e3510002 	cmp	r1, #2	; 0x2
    382c:	ea000e16 	b	708c <cfi_amdstd_destroy+0x2f5c>
    3830:	e3530004 	cmp	r3, #4	; 0x4
    3834:	1a000e18 	bne	709c <cfi_amdstd_destroy+0x2f6c>
    3838:	e5961008 	ldr	r1, [r6, #8]
    383c:	e3510001 	cmp	r1, #1	; 0x1
    3840:	1a000e11 	bne	708c <cfi_amdstd_destroy+0x2f5c>
    3844:	e3a0c030 	mov	r12, #48	; 0x30
    3848:	ea000e18 	b	70b0 <cfi_amdstd_destroy+0x2f80>
    384c:	e3510002 	cmp	r1, #2	; 0x2
    3850:	059fc228 	ldreq	r12, [pc, #228]	; 3a80 <cfi_amdstd_erase_onesize+0x824>
    3854:	0a000e18 	beq	70bc <cfi_amdstd_destroy+0x2f8c>
    3858:	e59f3224 	ldr	r3, [pc, #224]	; 3a84 <cfi_amdstd_erase_onesize+0x828>
    385c:	e3510004 	cmp	r1, #4	; 0x4
    3860:	01a0c003 	moveq	r12, r3
    3864:	13a0c000 	movne	r12, #0	; 0x0
    3868:	e5953008 	ldr	r3, [r5, #8]
    386c:	e3530001 	cmp	r3, #1	; 0x1
    3870:	1a000e21 	bne	70fc <cfi_amdstd_destroy+0x2fcc>
    3874:	e1a00005 	mov	r0, r5
    3878:	e51b2064 	ldr	r2, [r11, -#100]
    387c:	e20c1030 	and	r1, r12, #48	; 0x30
    3880:	e1a0e00f 	mov	lr, pc
    3884:	e595f01c 	ldr	pc, [r5, #28]
    3888:	ea000e31 	b	7154 <cfi_amdstd_destroy+0x3024>
    388c:	e3530002 	cmp	r3, #2	; 0x2
    3890:	1a000e2a 	bne	7140 <cfi_amdstd_destroy+0x3010>
    3894:	e1a00005 	mov	r0, r5
    3898:	e59f11dc 	ldr	r1, [pc, #1dc]	; 3a7c <cfi_amdstd_erase_onesize+0x820>
    389c:	e51b2064 	ldr	r2, [r11, -#100]
    38a0:	e00c1001 	and	r1, r12, r1
    38a4:	e1a0e00f 	mov	lr, pc
    38a8:	e595f020 	ldr	pc, [r5, #32]
    38ac:	ea000e31 	b	7178 <cfi_amdstd_destroy+0x3048>
    38b0:	e3530004 	cmp	r3, #4	; 0x4
    38b4:	1a000e31 	bne	7180 <cfi_amdstd_destroy+0x3050>
    38b8:	e1a00005 	mov	r0, r5
    38bc:	e51b2064 	ldr	r2, [r11, -#100]
    38c0:	e1a0100c 	mov	r1, r12
    38c4:	e1a0e00f 	mov	lr, pc
    38c8:	e595f024 	ldr	pc, [r5, #36]
    38cc:	e59f31b4 	ldr	r3, [pc, #1b4]	; 3a88 <cfi_amdstd_erase_onesize+0x82c>
    38d0:	e5932000 	ldr	r2, [r3]
    38d4:	e2824e7d 	add	r4, r2, #2000	; 0x7d0
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    38d8:	e5993000 	ldr	r3, [r9]
    38dc:	e2433001 	sub	r3, r3, #1	; 0x1
    38e0:	e3530000 	cmp	r3, #0	; 0x0
    38e4:	e5893000 	str	r3, [r9]
    38e8:	1a000e3d 	bne	71e4 <cfi_amdstd_destroy+0x30b4>
    38ec:	e5193008 	ldr	r3, [r9, -#8]
    38f0:	e3530000 	cmp	r3, #0	; 0x0
    38f4:	0a000e3d 	beq	71f0 <cfi_amdstd_destroy+0x30c0>
    38f8:	ebfffffe 	bl	38f8 <cfi_amdstd_erase_onesize+0x69c>
    38fc:	e3a00064 	mov	r0, #100	; 0x64
    3900:	ebfffffe 	bl	3900 <cfi_amdstd_erase_onesize+0x6a4>
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    3904:	e59fc180 	ldr	r12, [pc, #180]	; 3a8c <cfi_amdstd_erase_onesize+0x830>
    3908:	e59c3008 	ldr	r3, [r12, #8]
    390c:	e2833001 	add	r3, r3, #1	; 0x1
    3910:	e58c3008 	str	r3, [r12, #8]
    3914:	e3a07000 	mov	r7, #0	; 0x0
    3918:	e5953008 	ldr	r3, [r5, #8]
    391c:	e3530001 	cmp	r3, #1	; 0x1
    3920:	0a000e54 	beq	7278 <cfi_amdstd_destroy+0x3148>
    3924:	e3530002 	cmp	r3, #2	; 0x2
    3928:	1a000e4f 	bne	726c <cfi_amdstd_destroy+0x313c>
    392c:	e5962008 	ldr	r2, [r6, #8]
    3930:	e3520001 	cmp	r2, #1	; 0x1
    3934:	0a000e54 	beq	728c <cfi_amdstd_destroy+0x315c>
    3938:	e59f3150 	ldr	r3, [pc, #150]	; 3a90 <cfi_amdstd_erase_onesize+0x834>
    393c:	e3520002 	cmp	r2, #2	; 0x2
    3940:	ea000e5b 	b	72b4 <cfi_amdstd_destroy+0x3184>
    3944:	e3530004 	cmp	r3, #4	; 0x4
    3948:	1a000e5d 	bne	72c4 <cfi_amdstd_destroy+0x3194>
    394c:	e5962008 	ldr	r2, [r6, #8]
    3950:	e3520001 	cmp	r2, #1	; 0x1
    3954:	1a000e56 	bne	72b4 <cfi_amdstd_destroy+0x3184>
    3958:	e3a07080 	mov	r7, #128	; 0x80
    395c:	ea000e5d 	b	72d8 <cfi_amdstd_destroy+0x31a8>
    3960:	e3520002 	cmp	r2, #2	; 0x2
    3964:	059f7128 	ldreq	r7, [pc, #128]	; 3a94 <cfi_amdstd_erase_onesize+0x838>
    3968:	0a000e5d 	beq	72e4 <cfi_amdstd_destroy+0x31b4>
    396c:	e59f3124 	ldr	r3, [pc, #124]	; 3a98 <cfi_amdstd_erase_onesize+0x83c>
    3970:	e3520004 	cmp	r2, #4	; 0x4
    3974:	01a07003 	moveq	r7, r3
    3978:	13a07000 	movne	r7, #0	; 0x0
    397c:	e59f6118 	ldr	r6, [pc, #118]	; 3a9c <cfi_amdstd_erase_onesize+0x840>
    3980:	e51ba068 	ldr	r10, [r11, -#104]
    3984:	ea000ec4 	b	749c <cfi_amdstd_destroy+0x336c>
    3988:	e5983004 	ldr	r3, [r8, #4]
    398c:	e3530004 	cmp	r3, #4	; 0x4
    3990:	0a000e7c 	beq	7388 <cfi_amdstd_destroy+0x3258>
    3994:	e3a03002 	mov	r3, #2	; 0x2
    3998:	e58a3000 	str	r3, [r10]
    399c:	e2880014 	add	r0, r8, #20	; 0x14
    39a0:	e24b1038 	sub	r1, r11, #56	; 0x38
    39a4:	ebfffffe 	bl	39a4 <cfi_amdstd_erase_onesize+0x748>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    39a8:	e5963000 	ldr	r3, [r6]
    39ac:	e2433001 	sub	r3, r3, #1	; 0x1
    39b0:	e3530000 	cmp	r3, #0	; 0x0
    39b4:	e2884014 	add	r4, r8, #20	; 0x14
    39b8:	e5863000 	str	r3, [r6]
    39bc:	1a000e72 	bne	738c <cfi_amdstd_destroy+0x325c>
    39c0:	e5193008 	ldr	r3, [r9, -#8]
    39c4:	e3530000 	cmp	r3, #0	; 0x0
    39c8:	0a000e72 	beq	7398 <cfi_amdstd_destroy+0x3268>
    39cc:	ebfffffe 	bl	39cc <cfi_amdstd_erase_onesize+0x770>
    39d0:	e59f00c8 	ldr	r0, [pc, #c8]	; 3aa0 <cfi_amdstd_erase_onesize+0x844>
    39d4:	ebfffffe 	bl	39d4 <cfi_amdstd_erase_onesize+0x778>
    39d8:	ebfffffe 	bl	39d8 <cfi_amdstd_erase_onesize+0x77c>
    39dc:	e1a00004 	mov	r0, r4
    39e0:	e24b1038 	sub	r1, r11, #56	; 0x38
    39e4:	ebfffffe 	bl	39e4 <cfi_amdstd_erase_onesize+0x788>
    39e8:	e59f1098 	ldr	r1, [pc, #98]	; 3a88 <cfi_amdstd_erase_onesize+0x82c>
    39ec:	e5912000 	ldr	r2, [r1]
    39f0:	e28240c8 	add	r4, r2, #200	; 0xc8
    39f4:	ea000ec0 	b	74fc <cfi_amdstd_destroy+0x33cc>
    39f8:	e59fc088 	ldr	r12, [pc, #88]	; 3a88 <cfi_amdstd_erase_onesize+0x82c>
    39fc:	e59c3000 	ldr	r3, [r12]
    3a00:	e0633004 	rsb	r3, r3, r4
    3a04:	e3530000 	cmp	r3, #0	; 0x0
    3a08:	aa000ea8 	bge	74b0 <cfi_amdstd_destroy+0x3380>
    3a0c:	e3a02000 	mov	r2, #0	; 0x0
    3a10:	e5882004 	str	r2, [r8, #4]
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3a14:	e5963000 	ldr	r3, [r6]
    3a18:	e2433001 	sub	r3, r3, #1	; 0x1
    3a1c:	e1530002 	cmp	r3, r2
    3a20:	e5863000 	str	r3, [r6]
    3a24:	1a000e8c 	bne	745c <cfi_amdstd_destroy+0x332c>
    3a28:	e5193008 	ldr	r3, [r9, -#8]
    3a2c:	e1530002 	cmp	r3, r2
    3a30:	0a000e8c 	beq	7468 <cfi_amdstd_destroy+0x3338>
    3a34:	ebfffffe 	bl	3a34 <cfi_amdstd_erase_onesize+0x7d8>
    3a38:	e59f0064 	ldr	r0, [pc, #64]	; 3aa4 <cfi_amdstd_erase_onesize+0x848>
    3a3c:	ebfffffe 	bl	3a3c <cfi_amdstd_erase_onesize+0x7e0>
    3a40:	e595302c 	ldr	r3, [r5, #44]
    3a44:	e3530000 	cmp	r3, #0	; 0x0
    3a48:	0a000e95 	beq	74a4 <cfi_amdstd_destroy+0x3374>
    3a4c:	e1a00005 	mov	r0, r5
    3a50:	e3a01000 	mov	r1, #0	; 0x0
    3a54:	e1a0e00f 	mov	lr, pc
    3a58:	e1a0f003 	mov	pc, r3
    3a5c:	e3e00004 	mvn	r0, #4	; 0x4
    3a60:	ea000efa 	b	7650 <cfi_amdstd_destroy+0x3520>
    3a64:	00aa00aa 	adceq	r0, r10, r10, lsr #1
    3a68:	aaaaaaaa 	bge	feaae518 <cfi_amdstd_destroy+0xfeaaa3e8>
    3a6c:	0000aaaa 	andeq	r10, r0, r10, lsr #21
    3a70:	00005555 	andeq	r5, r0, r5, asr r5
    3a74:	00550055 	subeqs	r0, r5, r5, asr r0
    3a78:	55555555 	ldrplb	r5, [r5, -#1365]
    3a7c:	00003030 	andeq	r3, r0, r0, lsr r0
    3a80:	00300030 	eoreqs	r0, r0, r0, lsr r0
    3a84:	30303030 	eorccs	r3, r0, r0, lsr r0
	...
    3a90:	00008080 	andeq	r8, r0, r0, lsl #1
    3a94:	00800080 	addeq	r0, r0, r0, lsl #1
    3a98:	80808080 	addhi	r8, r0, r0, lsl #1
    3a9c:	00000008 	andeq	r0, r0, r8
    3aa0:	00000218 	andeq	r0, r0, r8, lsl r2
    3aa4:	00000238 	andeq	r0, r0, r8, lsr r2
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3aa8:	e5963000 	ldr	r3, [r6]
    3aac:	e2433001 	sub	r3, r3, #1	; 0x1
    3ab0:	e3530000 	cmp	r3, #0	; 0x0
    3ab4:	e5863000 	str	r3, [r6]
    3ab8:	1a000eb1 	bne	7584 <cfi_amdstd_destroy+0x3454>
    3abc:	e5193008 	ldr	r3, [r9, -#8]
    3ac0:	e3530000 	cmp	r3, #0	; 0x0
    3ac4:	0a000eb1 	beq	7590 <cfi_amdstd_destroy+0x3460>
    3ac8:	ebfffffe 	bl	3ac8 <cfi_amdstd_erase_onesize+0x86c>
    3acc:	e59f10a8 	ldr	r1, [pc, #a8]	; 3b7c <cfi_amdstd_erase_onesize+0x920>

static inline void cfi_udelay(int us)
{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
	if (current->need_resched) {
    3ad0:	e59a2014 	ldr	r2, [r10, #20]
    3ad4:	e5913000 	ldr	r3, [r1]

static inline void cfi_udelay(int us)
{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
	if (current->need_resched) {
    3ad8:	e3520000 	cmp	r2, #0	; 0x0
    3adc:	e2833001 	add	r3, r3, #1	; 0x1
    3ae0:	e5813000 	str	r3, [r1]

static inline void cfi_udelay(int us)
{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,2,0)
	if (current->need_resched) {
    3ae4:	0a000ebe 	beq	75e4 <cfi_amdstd_destroy+0x34b4>
		unsigned long t = us * HZ / 1000000;
		if (t < 1)
			t = 1;
		set_current_state(TASK_UNINTERRUPTIBLE);
    3ae8:	e51b1068 	ldr	r1, [r11, -#104]
    3aec:	e3a03002 	mov	r3, #2	; 0x2
    3af0:	e5813000 	str	r3, [r1]
		schedule_timeout(t);
    3af4:	e3a00001 	mov	r0, #1	; 0x1
    3af8:	ebfffffe 	bl	3af8 <cfi_amdstd_erase_onesize+0x89c>
	}
    3afc:	ea000ec0 	b	7604 <cfi_amdstd_destroy+0x34d4>
	else
#endif
		udelay(us);
    3b00:	e3a00001 	mov	r0, #1	; 0x1
    3b04:	ebfffffe 	bl	3b04 <cfi_amdstd_erase_onesize+0x8a8>
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    3b08:	e59f2070 	ldr	r2, [pc, #70]	; 3b80 <cfi_amdstd_erase_onesize+0x924>
    3b0c:	e5923008 	ldr	r3, [r2, #8]
    3b10:	e2833001 	add	r3, r3, #1	; 0x1
    3b14:	e5823008 	str	r3, [r2, #8]
    3b18:	e5953008 	ldr	r3, [r5, #8]
    3b1c:	e3530001 	cmp	r3, #1	; 0x1
    3b20:	1a000ecd 	bne	765c <cfi_amdstd_destroy+0x352c>
    3b24:	e51b1064 	ldr	r1, [r11, -#100]
    3b28:	e1a00005 	mov	r0, r5
    3b2c:	e1a0e00f 	mov	lr, pc
    3b30:	e595f00c 	ldr	pc, [r5, #12]
    3b34:	e20000ff 	and	r0, r0, #255	; 0xff
    3b38:	ea000ee0 	b	76c0 <cfi_amdstd_destroy+0x3590>
    3b3c:	e3530002 	cmp	r3, #2	; 0x2
    3b40:	1a000ed6 	bne	76a0 <cfi_amdstd_destroy+0x3570>
    3b44:	e51b1064 	ldr	r1, [r11, -#100]
    3b48:	e1a00005 	mov	r0, r5
    3b4c:	e1a0e00f 	mov	lr, pc
    3b50:	e595f010 	ldr	pc, [r5, #16]
    3b54:	e1a00800 	mov	r0, r0, lsl #16
    3b58:	e1a00820 	mov	r0, r0, lsr #16
    3b5c:	ea000ee0 	b	76e4 <cfi_amdstd_destroy+0x35b4>
    3b60:	e3530004 	cmp	r3, #4	; 0x4
    3b64:	1a000edf 	bne	76e8 <cfi_amdstd_destroy+0x35b8>
    3b68:	e51b1064 	ldr	r1, [r11, -#100]
    3b6c:	e1a00005 	mov	r0, r5
    3b70:	e1a0e00f 	mov	lr, pc
    3b74:	e595f014 	ldr	pc, [r5, #20]
    3b78:	ea000ee0 	b	7700 <cfi_amdstd_destroy+0x35d0>
    3b7c:	00000018 	andeq	r0, r0, r8, lsl r0
    3b80:	00000000 	andeq	r0, r0, r0
    3b84:	e3a00000 	mov	r0, #0	; 0x0
    3b88:	e0003007 	and	r3, r0, r7
    3b8c:	e1530007 	cmp	r3, r7
    3b90:	1a000e60 	bne	7518 <cfi_amdstd_destroy+0x33e8>
    3b94:	e595302c 	ldr	r3, [r5, #44]
    3b98:	e3530000 	cmp	r3, #0	; 0x0
    3b9c:	0a000eea 	beq	774c <cfi_amdstd_destroy+0x361c>
    3ba0:	e1a00005 	mov	r0, r5
    3ba4:	e3a01000 	mov	r1, #0	; 0x0
    3ba8:	e1a0e00f 	mov	lr, pc
    3bac:	e1a0f003 	mov	pc, r3
    3bb0:	e2880014 	add	r0, r8, #20	; 0x14
    3bb4:	e3a01003 	mov	r1, #3	; 0x3
    3bb8:	e3a02001 	mov	r2, #1	; 0x1
    3bbc:	e3a03000 	mov	r3, #0	; 0x0
    3bc0:	e5883004 	str	r3, [r8, #4]
    3bc4:	ebfffffe 	bl	3bc4 <cfi_amdstd_erase_onesize+0x968>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3bc8:	e5993000 	ldr	r3, [r9]
    3bcc:	e2433001 	sub	r3, r3, #1	; 0x1
    3bd0:	e3530000 	cmp	r3, #0	; 0x0
    3bd4:	e5893000 	str	r3, [r9]
    3bd8:	1a000ef9 	bne	77c4 <cfi_amdstd_destroy+0x3694>
    3bdc:	e5193008 	ldr	r3, [r9, -#8]
    3be0:	e3530000 	cmp	r3, #0	; 0x0
    3be4:	0a000ef9 	beq	77d0 <cfi_amdstd_destroy+0x36a0>
    3be8:	ebfffffe 	bl	3be8 <cfi_amdstd_erase_onesize+0x98c>
    3bec:	e3a00000 	mov	r0, #0	; 0x0
    3bf0:	e3500000 	cmp	r0, #0	; 0x0
    3bf4:	1a000f21 	bne	7880 <cfi_amdstd_destroy+0x3750>
    3bf8:	e51bc04c 	ldr	r12, [r11, -#76]
    3bfc:	e51b1058 	ldr	r1, [r11, -#88]
    3c00:	e59c300c 	ldr	r3, [r12, #12]
    3c04:	e51bc054 	ldr	r12, [r11, -#84]
    3c08:	e0811003 	add	r1, r1, r3
    3c0c:	e50b1058 	str	r1, [r11, -#88]
    3c10:	e51b105c 	ldr	r1, [r11, -#92]
    3c14:	e59c2034 	ldr	r2, [r12, #52]
    3c18:	e0631001 	rsb	r1, r3, r1
    3c1c:	e51b3058 	ldr	r3, [r11, -#88]
    3c20:	e50b105c 	str	r1, [r11, -#92]
    3c24:	e1b03233 	movs	r3, r3, lsr r2
    3c28:	0a000f14 	beq	7880 <cfi_amdstd_destroy+0x3750>
    3c2c:	e50b0058 	str	r0, [r11, -#88]
    3c30:	e51bc06c 	ldr	r12, [r11, -#108]
    3c34:	e51b1054 	ldr	r1, [r11, -#84]
    3c38:	e51b2060 	ldr	r2, [r11, -#96]
    3c3c:	e28cc02c 	add	r12, r12, #44	; 0x2c
    3c40:	e50bc06c 	str	r12, [r11, -#108]
    3c44:	e5913030 	ldr	r3, [r1, #48]
    3c48:	e2822001 	add	r2, r2, #1	; 0x1
    3c4c:	e50b2060 	str	r2, [r11, -#96]
    3c50:	e1520003 	cmp	r2, r3
    3c54:	aa000f17 	bge	78b8 <cfi_amdstd_destroy+0x3788>
    3c58:	e51b305c 	ldr	r3, [r11, -#92]
    3c5c:	e3530000 	cmp	r3, #0	; 0x0
    3c60:	1a000cc0 	bne	6f68 <cfi_amdstd_destroy+0x2e38>
    3c64:	e51bc050 	ldr	r12, [r11, -#80]
    3c68:	e59c201c 	ldr	r2, [r12, #28]
    3c6c:	e3a03008 	mov	r3, #8	; 0x8
    3c70:	e5cc3024 	strb	r3, [r12, #36]
    3c74:	e3520000 	cmp	r2, #0	; 0x0
    3c78:	0a000f20 	beq	7900 <cfi_amdstd_destroy+0x37d0>
    3c7c:	e51b0050 	ldr	r0, [r11, -#80]
    3c80:	e1a0e00f 	mov	lr, pc
    3c84:	e1a0f002 	mov	pc, r2
    3c88:	e3a00000 	mov	r0, #0	; 0x0
    3c8c:	e91baff0 	ldmdb	r11, {r4, r5, r6, r7, r8, r9, r10, r11, sp, pc}

00003c90 <cfi_amdstd_sync>:
    3c90:	e1a0c00d 	mov	r12, sp
    3c94:	e92ddff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    3c98:	e24cb004 	sub	r11, r12, #4	; 0x4
    3c9c:	e24b4048 	sub	r4, r11, #72	; 0x48
    3ca0:	e3a01000 	mov	r1, #0	; 0x0
    3ca4:	e3a02010 	mov	r2, #16	; 0x10
    3ca8:	e24dd020 	sub	sp, sp, #32	; 0x20
    3cac:	e5903078 	ldr	r3, [r0, #120]
    3cb0:	e1a00004 	mov	r0, r4
    3cb4:	e5938038 	ldr	r8, [r3, #56]
    3cb8:	ebfffffe 	bl	3cb8 <cfi_amdstd_sync+0x28>

static inline struct task_struct *get_current(void)
{
	register unsigned long sp asm ("sp");
	return (struct task_struct *)(sp & ~0x1fff);
    3cbc:	e3cd3d7f 	bic	r3, sp, #8128	; 0x1fc0
    3cc0:	e3c3303f 	bic	r3, r3, #63	; 0x3f
    3cc4:	e50b3044 	str	r3, [r11, -#68]
    3cc8:	e894000f 	ldmia	r4, {r0, r1, r2, r3}
    3ccc:	e24bc038 	sub	r12, r11, #56	; 0x38
    3cd0:	e88c000f 	stmia	r12, {r0, r1, r2, r3}
    3cd4:	e3a05000 	mov	r5, #0	; 0x0
    3cd8:	e5983030 	ldr	r3, [r8, #48]
    3cdc:	e1a0900c 	mov	r9, r12
    3ce0:	e1550003 	cmp	r5, r3
    3ce4:	aa000f6f 	bge	7aa8 <cfi_amdstd_destroy+0x3978>
    3ce8:	e59fa0b8 	ldr	r10, [pc, #b8]	; 3da8 <cfi_amdstd_sync+0x118>
    3cec:	e28a6008 	add	r6, r10, #8	; 0x8
    3cf0:	e0853105 	add	r3, r5, r5, lsl #2
    3cf4:	e0853083 	add	r3, r5, r3, lsl #1
    3cf8:	e1a03103 	mov	r3, r3, lsl #2
    3cfc:	e283303c 	add	r3, r3, #60	; 0x3c
    3d00:	e0887003 	add	r7, r8, r3
    3d04:	e2855001 	add	r5, r5, #1	; 0x1
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    3d08:	e59a3008 	ldr	r3, [r10, #8]
    3d0c:	e2833001 	add	r3, r3, #1	; 0x1
    3d10:	e58a3008 	str	r3, [r10, #8]
    3d14:	e5973004 	ldr	r3, [r7, #4]
    3d18:	e3530003 	cmp	r3, #3	; 0x3
    3d1c:	9a000f49 	bls	7a48 <cfi_amdstd_destroy+0x3918>
    3d20:	e353000c 	cmp	r3, #12	; 0xc
    3d24:	0a000f4c 	beq	7a5c <cfi_amdstd_destroy+0x392c>
    3d28:	ea000f56 	b	7a88 <cfi_amdstd_destroy+0x3958>
    3d2c:	e5873008 	str	r3, [r7, #8]
    3d30:	e3a0300c 	mov	r3, #12	; 0xc
    3d34:	e5873004 	str	r3, [r7, #4]
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3d38:	e5963000 	ldr	r3, [r6]
    3d3c:	e2433001 	sub	r3, r3, #1	; 0x1
    3d40:	e3530000 	cmp	r3, #0	; 0x0
    3d44:	e5863000 	str	r3, [r6]
    3d48:	1a000f69 	bne	7af4 <cfi_amdstd_destroy+0x39c4>
    3d4c:	e5163008 	ldr	r3, [r6, -#8]
    3d50:	e3530000 	cmp	r3, #0	; 0x0
    3d54:	0a000f69 	beq	7b00 <cfi_amdstd_destroy+0x39d0>
    3d58:	ebfffffe 	bl	3d58 <cfi_amdstd_sync+0xc8>
    3d5c:	ea000f69 	b	7b08 <cfi_amdstd_destroy+0x39d8>
    3d60:	e2874014 	add	r4, r7, #20	; 0x14
    3d64:	e1a00004 	mov	r0, r4
    3d68:	e1a01009 	mov	r1, r9
    3d6c:	ebfffffe 	bl	3d6c <cfi_amdstd_sync+0xdc>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3d70:	e5963000 	ldr	r3, [r6]
    3d74:	e2433001 	sub	r3, r3, #1	; 0x1
    3d78:	e3530000 	cmp	r3, #0	; 0x0
    3d7c:	e5863000 	str	r3, [r6]
    3d80:	1a000f63 	bne	7b14 <cfi_amdstd_destroy+0x39e4>
    3d84:	e5163008 	ldr	r3, [r6, -#8]
    3d88:	e3530000 	cmp	r3, #0	; 0x0
    3d8c:	0a000f63 	beq	7b20 <cfi_amdstd_destroy+0x39f0>
    3d90:	ebfffffe 	bl	3d90 <cfi_amdstd_sync+0x100>
    3d94:	ebfffffe 	bl	3d94 <cfi_amdstd_sync+0x104>
    3d98:	e1a00004 	mov	r0, r4
    3d9c:	e1a01009 	mov	r1, r9
    3da0:	ebfffffe 	bl	3da0 <cfi_amdstd_sync+0x110>
    3da4:	ea000f40 	b	7aac <cfi_amdstd_destroy+0x397c>
    3da8:	00000000 	andeq	r0, r0, r0
    3dac:	e3a03000 	mov	r3, #0	; 0x0
    3db0:	e1530003 	cmp	r3, r3
    3db4:	1a000f6f 	bne	7b78 <cfi_amdstd_destroy+0x3a48>
    3db8:	e5983030 	ldr	r3, [r8, #48]
    3dbc:	e1550003 	cmp	r5, r3
    3dc0:	ba000f3a 	blt	7ab0 <cfi_amdstd_destroy+0x3980>
    3dc4:	e2555001 	subs	r5, r5, #1	; 0x1
    3dc8:	4a000f96 	bmi	7c28 <cfi_amdstd_destroy+0x3af8>
    3dcc:	e0853105 	add	r3, r5, r5, lsl #2
    3dd0:	e0853083 	add	r3, r5, r3, lsl #1
    3dd4:	e1a03103 	mov	r3, r3, lsl #2
    3dd8:	e2832050 	add	r2, r3, #80	; 0x50
    3ddc:	e0827008 	add	r7, r2, r8
    3de0:	e283303c 	add	r3, r3, #60	; 0x3c
    3de4:	e0834008 	add	r4, r3, r8
    3de8:	e59f6064 	ldr	r6, [pc, #64]	; 3e54 <cfi_amdstd_sync+0x1c4>
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    3dec:	e5963008 	ldr	r3, [r6, #8]
    3df0:	e2833001 	add	r3, r3, #1	; 0x1
    3df4:	e5863008 	str	r3, [r6, #8]
    3df8:	e5943004 	ldr	r3, [r4, #4]
    3dfc:	e353000c 	cmp	r3, #12	; 0xc
    3e00:	1a000f85 	bne	7c1c <cfi_amdstd_destroy+0x3aec>
    3e04:	e1a00007 	mov	r0, r7
    3e08:	e3a01003 	mov	r1, #3	; 0x3
    3e0c:	e5943008 	ldr	r3, [r4, #8]
    3e10:	e3a02001 	mov	r2, #1	; 0x1
    3e14:	e5843004 	str	r3, [r4, #4]
    3e18:	ebfffffe 	bl	3e18 <cfi_amdstd_sync+0x188>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3e1c:	e59f2034 	ldr	r2, [pc, #34]	; 3e58 <cfi_amdstd_sync+0x1c8>
    3e20:	e5923000 	ldr	r3, [r2]
    3e24:	e2433001 	sub	r3, r3, #1	; 0x1
    3e28:	e3530000 	cmp	r3, #0	; 0x0
    3e2c:	e5823000 	str	r3, [r2]
    3e30:	1a000f8f 	bne	7c74 <cfi_amdstd_destroy+0x3b44>
    3e34:	e5123008 	ldr	r3, [r2, -#8]
    3e38:	e3530000 	cmp	r3, #0	; 0x0
    3e3c:	0a000f8f 	beq	7c80 <cfi_amdstd_destroy+0x3b50>
    3e40:	ebfffffe 	bl	3e40 <cfi_amdstd_sync+0x1b0>
    3e44:	e247702c 	sub	r7, r7, #44	; 0x2c
    3e48:	e244402c 	sub	r4, r4, #44	; 0x2c
    3e4c:	e2555001 	subs	r5, r5, #1	; 0x1
    3e50:	ea000f95 	b	7cac <cfi_amdstd_destroy+0x3b7c>
    3e54:	00000000 	andeq	r0, r0, r0
    3e58:	00000008 	andeq	r0, r0, r8
    3e5c:	5a000f79 	bpl	7c48 <cfi_amdstd_destroy+0x3b18>
    3e60:	e91baff0 	ldmdb	r11, {r4, r5, r6, r7, r8, r9, r10, r11, sp, pc}

00003e64 <cfi_amdstd_suspend>:
    3e64:	e1a0c00d 	mov	r12, sp
    3e68:	e92dd9f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r11, r12, lr, pc}
    3e6c:	e5903078 	ldr	r3, [r0, #120]
    3e70:	e24cb004 	sub	r11, r12, #4	; 0x4
    3e74:	e593c038 	ldr	r12, [r3, #56]
    3e78:	e3a08000 	mov	r8, #0	; 0x0
    3e7c:	e59c3030 	ldr	r3, [r12, #48]
    3e80:	e1a05008 	mov	r5, r8
    3e84:	e1580003 	cmp	r8, r3
    3e88:	aa000fbf 	bge	7d8c <cfi_amdstd_destroy+0x3c5c>
    3e8c:	e28c103c 	add	r1, r12, #60	; 0x3c
    3e90:	e59f010c 	ldr	r0, [pc, #10c]	; 3fa4 <cfi_amdstd_suspend+0x140>
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    3e94:	e5903008 	ldr	r3, [r0, #8]
    3e98:	e2833001 	add	r3, r3, #1	; 0x1
    3e9c:	e5803008 	str	r3, [r0, #8]
    3ea0:	e5913004 	ldr	r3, [r1, #4]
    3ea4:	e3530003 	cmp	r3, #3	; 0x3
    3ea8:	95813008 	strls	r3, [r1, #8]
    3eac:	93a0300b 	movls	r3, #11	; 0xb
    3eb0:	95813004 	strls	r3, [r1, #4]
    3eb4:	9a000fae 	bls	7d74 <cfi_amdstd_destroy+0x3c44>
    3eb8:	e353000b 	cmp	r3, #11	; 0xb
    3ebc:	13e0800a 	mvnne	r8, #10	; 0xa
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3ec0:	e59f20e0 	ldr	r2, [pc, #e0]	; 3fa8 <cfi_amdstd_suspend+0x144>
    3ec4:	e5923000 	ldr	r3, [r2]
    3ec8:	e2433001 	sub	r3, r3, #1	; 0x1
    3ecc:	e3530000 	cmp	r3, #0	; 0x0
    3ed0:	e5823000 	str	r3, [r2]
    3ed4:	1a000fb8 	bne	7dbc <cfi_amdstd_destroy+0x3c8c>
    3ed8:	e5123008 	ldr	r3, [r2, -#8]
    3edc:	e3530000 	cmp	r3, #0	; 0x0
    3ee0:	0a000fb8 	beq	7dc8 <cfi_amdstd_destroy+0x3c98>
    3ee4:	ebfffffe 	bl	3ee4 <cfi_amdstd_suspend+0x80>
    3ee8:	e281102c 	add	r1, r1, #44	; 0x2c
    3eec:	e2855001 	add	r5, r5, #1	; 0x1
    3ef0:	e3580000 	cmp	r8, #0	; 0x0
    3ef4:	1a000fbf 	bne	7df8 <cfi_amdstd_destroy+0x3cc8>
    3ef8:	e59c3030 	ldr	r3, [r12, #48]
    3efc:	e1550003 	cmp	r5, r3
    3f00:	ba000fa3 	blt	7d94 <cfi_amdstd_destroy+0x3c64>
    3f04:	e3580000 	cmp	r8, #0	; 0x0
    3f08:	0a000fe5 	beq	7ea4 <cfi_amdstd_destroy+0x3d74>
    3f0c:	e2555001 	subs	r5, r5, #1	; 0x1
    3f10:	4a000fe5 	bmi	7eac <cfi_amdstd_destroy+0x3d7c>
    3f14:	e0853105 	add	r3, r5, r5, lsl #2
    3f18:	e0853083 	add	r3, r5, r3, lsl #1
    3f1c:	e1a03103 	mov	r3, r3, lsl #2
    3f20:	e2832050 	add	r2, r3, #80	; 0x50
    3f24:	e082700c 	add	r7, r2, r12
    3f28:	e283303c 	add	r3, r3, #60	; 0x3c
    3f2c:	e083400c 	add	r4, r3, r12
    3f30:	e59f606c 	ldr	r6, [pc, #6c]	; 3fa4 <cfi_amdstd_suspend+0x140>
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    3f34:	e5963008 	ldr	r3, [r6, #8]
    3f38:	e2833001 	add	r3, r3, #1	; 0x1
    3f3c:	e5863008 	str	r3, [r6, #8]
    3f40:	e5943004 	ldr	r3, [r4, #4]
    3f44:	e353000b 	cmp	r3, #11	; 0xb
    3f48:	1a000fd7 	bne	7eac <cfi_amdstd_destroy+0x3d7c>
    3f4c:	e1a00007 	mov	r0, r7
    3f50:	e3a01003 	mov	r1, #3	; 0x3
    3f54:	e5943008 	ldr	r3, [r4, #8]
    3f58:	e3a02001 	mov	r2, #1	; 0x1
    3f5c:	e5843004 	str	r3, [r4, #4]
    3f60:	ebfffffe 	bl	3f60 <cfi_amdstd_suspend+0xfc>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    3f64:	e59f203c 	ldr	r2, [pc, #3c]	; 3fa8 <cfi_amdstd_suspend+0x144>
    3f68:	e5923000 	ldr	r3, [r2]
    3f6c:	e2433001 	sub	r3, r3, #1	; 0x1
    3f70:	e3530000 	cmp	r3, #0	; 0x0
    3f74:	e5823000 	str	r3, [r2]
    3f78:	1a000fe1 	bne	7f04 <cfi_amdstd_destroy+0x3dd4>
    3f7c:	e5123008 	ldr	r3, [r2, -#8]
    3f80:	e3530000 	cmp	r3, #0	; 0x0
    3f84:	0a000fe1 	beq	7f10 <cfi_amdstd_destroy+0x3de0>
    3f88:	ebfffffe 	bl	3f88 <cfi_amdstd_suspend+0x124>
    3f8c:	e247702c 	sub	r7, r7, #44	; 0x2c
    3f90:	e244402c 	sub	r4, r4, #44	; 0x2c
    3f94:	e2555001 	subs	r5, r5, #1	; 0x1
    3f98:	5a000fcb 	bpl	7ecc <cfi_amdstd_destroy+0x3d9c>
    3f9c:	e1a00008 	mov	r0, r8
    3fa0:	e91ba9f0 	ldmdb	r11, {r4, r5, r6, r7, r8, r11, sp, pc}
    3fa4:	00000000 	andeq	r0, r0, r0
    3fa8:	00000008 	andeq	r0, r0, r8

00003fac <cfi_amdstd_resume>:
    3fac:	e1a0c00d 	mov	r12, sp
    3fb0:	e92dd9f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r11, r12, lr, pc}
    3fb4:	e5904078 	ldr	r4, [r0, #120]
    3fb8:	e5946038 	ldr	r6, [r4, #56]
    3fbc:	e24cb004 	sub	r11, r12, #4	; 0x4
    3fc0:	e5963030 	ldr	r3, [r6, #48]
    3fc4:	e3a08000 	mov	r8, #0	; 0x0
    3fc8:	e1580003 	cmp	r8, r3
    3fcc:	a91ba9f0 	ldmgedb	r11, {r4, r5, r6, r7, r8, r11, sp, pc}
    3fd0:	e2867050 	add	r7, r6, #80	; 0x50
    3fd4:	e286503c 	add	r5, r6, #60	; 0x3c
		udelay(us);
}
static inline void cfi_spin_lock(spinlock_t *mutex)
{
	spin_lock_bh(mutex);
    3fd8:	e59f3138 	ldr	r3, [pc, #138]	; 4118 <cfi_amdstd_resume+0x16c>
    3fdc:	e5932008 	ldr	r2, [r3, #8]
    3fe0:	e2822001 	add	r2, r2, #1	; 0x1
    3fe4:	e5832008 	str	r2, [r3, #8]
    3fe8:	e5953004 	ldr	r3, [r5, #4]
    3fec:	e353000b 	cmp	r3, #11	; 0xb
    3ff0:	1a001031 	bne	80bc <cfi_amdstd_destroy+0x3f8c>
    3ff4:	e3a03000 	mov	r3, #0	; 0x0
    3ff8:	e5853004 	str	r3, [r5, #4]
static inline __u32 cfi_build_cmd(u_char cmd, struct map_info *map, struct cfi_private *cfi)
{
	__u32 val = 0;

	if (cfi_buswidth_is_1()) {
    3ffc:	e5942008 	ldr	r2, [r4, #8]
    4000:	e3520001 	cmp	r2, #1	; 0x1
    4004:	0a00100d 	beq	8040 <cfi_amdstd_destroy+0x3f10>
		/* 1 x8 device */
		val = cmd;
	} else if (cfi_buswidth_is_2()) {
    4008:	e3520002 	cmp	r2, #2	; 0x2
    400c:	1a001008 	bne	8034 <cfi_amdstd_destroy+0x3f04>
		if (cfi_interleave_is_1()) {
    4010:	e5961008 	ldr	r1, [r6, #8]
    4014:	e3510001 	cmp	r1, #1	; 0x1
    4018:	0a00100d 	beq	8054 <cfi_amdstd_destroy+0x3f24>
			/* 1 x16 device in x16 mode */
			val = cpu_to_cfi16(cmd);
		} else if (cfi_interleave_is_2()) {
    401c:	e59f30f8 	ldr	r3, [pc, #f8]	; 411c <cfi_amdstd_resume+0x170>
    4020:	e3510002 	cmp	r1, #2	; 0x2
			/* 2 (x8, x16 or x32) devices in x8 mode */
			val = cpu_to_cfi16((cmd << 8) | cmd);
		}
	} else if (cfi_buswidth_is_4()) {
    4024:	ea001014 	b	807c <cfi_amdstd_destroy+0x3f4c>
    4028:	e3520004 	cmp	r2, #4	; 0x4
    402c:	1a001015 	bne	8088 <cfi_amdstd_destroy+0x3f58>
		if (cfi_interleave_is_1()) {
    4030:	e5961008 	ldr	r1, [r6, #8]
    4034:	e3510001 	cmp	r1, #1	; 0x1
    4038:	1a00100f 	bne	807c <cfi_amdstd_destroy+0x3f4c>
			/* 1 x32 device in x32 mode */
			val = cpu_to_cfi32(cmd);
    403c:	e3a030f0 	mov	r3, #240	; 0xf0
		} else if (cfi_interleave_is_2()) {
    4040:	ea001015 	b	809c <cfi_amdstd_destroy+0x3f6c>
    4044:	e3510002 	cmp	r1, #2	; 0x2
			/* 2 x16 device in x16 mode */
			val = cpu_to_cfi32((cmd << 16) | cmd);
    4048:	059f30d0 	ldreq	r3, [pc, #d0]	; 4120 <cfi_amdstd_resume+0x174>
		} else if (cfi_interleave_is_4()) {
    404c:	0a001015 	beq	80a8 <cfi_amdstd_destroy+0x3f78>
			/* 4 (x8, x16 or x32) devices in x8 mode */
			val = (cmd << 16) | cmd;
			val = cpu_to_cfi32((val << 8) | val);
    4050:	e59f30cc 	ldr	r3, [pc, #cc]	; 4124 <cfi_amdstd_resume+0x178>
    4054:	e3510004 	cmp	r1, #4	; 0x4
    4058:	13a03000 	movne	r3, #0	; 0x0
		}
	}
	return val;
}
#define CMD(x)  cfi_build_cmd((x), map, cfi)

/*
 * Read a value according to the bus width.
 */

static inline __u32 cfi_read(struct map_info *map, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
		return map->read8(map, addr);
	} else if (cfi_buswidth_is_2()) {
		return map->read16(map, addr);
	} else if (cfi_buswidth_is_4()) {
		return map->read32(map, addr);
	} else {
		return 0;
	}
}

/*
 * Write a value according to the bus width.
 */

static inline void cfi_write(struct map_info *map, __u32 val, __u32 addr)
{
	if (cfi_buswidth_is_1()) {
    405c:	e5941008 	ldr	r1, [r4, #8]
    4060:	e5952000 	ldr	r2, [r5]
    4064:	e3510001 	cmp	r1, #1	; 0x1
    4068:	1a00101e 	bne	80e8 <cfi_amdstd_destroy+0x3fb8>
		map->write8(map, val, addr);
    406c:	e1a00004 	mov	r0, r4
    4070:	e20310f0 	and	r1, r3, #240	; 0xf0
    4074:	e1a0e00f 	mov	lr, pc
    4078:	e594f01c 	ldr	pc, [r4, #28]
	} else if (cfi_buswidth_is_2()) {
    407c:	ea00102c 	b	8134 <cfi_amdstd_destroy+0x4004>
    4080:	e3510002 	cmp	r1, #2	; 0x2
    4084:	1a001026 	bne	8124 <cfi_amdstd_destroy+0x3ff4>
		map->write16(map, val, addr);
    4088:	e59f108c 	ldr	r1, [pc, #8c]	; 411c <cfi_amdstd_resume+0x170>
    408c:	e1a00004 	mov	r0, r4
    4090:	e0031001 	and	r1, r3, r1
    4094:	e1a0e00f 	mov	lr, pc
    4098:	e594f020 	ldr	pc, [r4, #32]
	} else if (cfi_buswidth_is_4()) {
    409c:	ea00102c 	b	8154 <cfi_amdstd_destroy+0x4024>
    40a0:	e3510004 	cmp	r1, #4	; 0x4
    40a4:	1a00102c 	bne	815c <cfi_amdstd_destroy+0x402c>
		map->write32(map, val, addr);
    40a8:	e1a00004 	mov	r0, r4
    40ac:	e1a01003 	mov	r1, r3
    40b0:	e1a0e00f 	mov	lr, pc
    40b4:	e594f024 	ldr	pc, [r4, #36]
    40b8:	e1a00007 	mov	r0, r7
    40bc:	e3a01003 	mov	r1, #3	; 0x3
    40c0:	e3a02001 	mov	r2, #1	; 0x1
    40c4:	ebfffffe 	bl	40c4 <cfi_amdstd_resume+0x118>
    40c8:	ea001033 	b	819c <cfi_amdstd_destroy+0x406c>
    40cc:	e59f0054 	ldr	r0, [pc, #54]	; 4128 <cfi_amdstd_resume+0x17c>
    40d0:	ebfffffe 	bl	40d0 <cfi_amdstd_resume+0x124>
}

static inline void cfi_spin_unlock(spinlock_t *mutex)
{
	spin_unlock_bh(mutex);
    40d4:	e59f2050 	ldr	r2, [pc, #50]	; 412c <cfi_amdstd_resume+0x180>
    40d8:	e5923000 	ldr	r3, [r2]
    40dc:	e2433001 	sub	r3, r3, #1	; 0x1
    40e0:	e3530000 	cmp	r3, #0	; 0x0
    40e4:	e5823000 	str	r3, [r2]
    40e8:	1a00103d 	bne	81e4 <cfi_amdstd_destroy+0x40b4>
    40ec:	e5123008 	ldr	r3, [r2, -#8]
    40f0:	e3530000 	cmp	r3, #0	; 0x0
    40f4:	0a00103d 	beq	81f0 <cfi_amdstd_destroy+0x40c0>
    40f8:	ebfffffe 	bl	40f8 <cfi_amdstd_resume+0x14c>
    40fc:	e287702c 	add	r7, r7, #44	; 0x2c
    4100:	e285502c 	add	r5, r5, #44	; 0x2c
    4104:	e5963030 	ldr	r3, [r6, #48]
    4108:	e2888001 	add	r8, r8, #1	; 0x1
    410c:	e1580003 	cmp	r8, r3
    4110:	ba000ff4 	blt	80e8 <cfi_amdstd_destroy+0x3fb8>
    4114:	e91ba9f0 	ldmdb	r11, {r4, r5, r6, r7, r8, r11, sp, pc}
    4118:	00000000 	andeq	r0, r0, r0
    411c:	0000f0f0 	streqsh	pc, [r0], -r0
    4120:	00f000f0 	ldreqsh	r0, [r0]
    4124:	f0f0f0f0 	ldrnvsh	pc, [r0]
    4128:	00000290 	muleq	r0, r0, r2
    412c:	00000008 	andeq	r0, r0, r8

00004130 <cfi_amdstd_destroy>:
    4130:	e1a0c00d 	mov	r12, sp
    4134:	e92dd810 	stmdb	sp!, {r4, r11, r12, lr, pc}
    4138:	e5903078 	ldr	r3, [r0, #120]
    413c:	e5934038 	ldr	r4, [r3, #56]
    4140:	e5940004 	ldr	r0, [r4, #4]
    4144:	e24cb004 	sub	r11, r12, #4	; 0x4
    4148:	ebfffffe 	bl	4148 <cfi_amdstd_destroy+0x18>
    414c:	e1a00004 	mov	r0, r4
    4150:	ebfffffe 	bl	4150 <cfi_amdstd_destroy+0x20>
    4154:	e91ba810 	ldmdb	r11, {r4, r11, sp, pc}
Disassembly of section .text.init:

00000000 <cfi_amdstd_init>:
   0:	e1a0c00d 	mov	r12, sp
   4:	e92dd800 	stmdb	sp!, {r11, r12, lr, pc}
   8:	e24cb004 	sub	r11, r12, #4	; 0x4
   c:	e59f0010 	ldr	r0, [pc, #10]	; 24 <cfi_amdstd_init+0x24>
  10:	e59f2010 	ldr	r2, [pc, #10]	; 28 <cfi_amdstd_init+0x28>
  14:	e3a01000 	mov	r1, #0	; 0x0
  18:	ebfffffe 	bl	18 <cfi_amdstd_init+0x18>
  1c:	e3a00000 	mov	r0, #0	; 0x0
  20:	e91ba800 	ldmdb	r11, {r11, sp, pc}
  24:	0000001c 	andeq	r0, r0, r12, lsl r0
  28:	00000000 	andeq	r0, r0, r0
Disassembly of section .text.exit:

00000000 <cfi_amdstd_exit>:
   0:	e1a0c00d 	mov	r12, sp
   4:	e92dd800 	stmdb	sp!, {r11, r12, lr, pc}
   8:	e59f0008 	ldr	r0, [pc, #8]	; 18 <cfi_amdstd_exit+0x18>
   c:	e24cb004 	sub	r11, r12, #4	; 0x4
  10:	ebfffffe 	bl	10 <cfi_amdstd_exit+0x10>
  14:	e91ba800 	ldmdb	r11, {r11, sp, pc}
  18:	0000001c 	andeq	r0, r0, r12, lsl r0
